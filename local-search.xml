<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TypeScript logs</title>
    <link href="/2021/01/02/TS%20logs/"/>
    <url>/2021/01/02/TS%20logs/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对于写惯了 JS 的人来说，第一次接触到 TS 无疑是痛苦的，但是 TS 的静态类型检查，会让我们在开发维护阶段让我们的代码更加具有可读性，更加优雅</p><p>本文记录📝学习使用 TS 中的坑</p></blockquote><h1 id="在开发中遇到的-TS-报错🥲"><a href="#在开发中遇到的-TS-报错🥲" class="headerlink" title="在开发中遇到的 TS 报错🥲"></a>在开发中遇到的 TS 报错🥲</h1><p>TS 报错：</p><blockquote><p>元素隐式地具有“any”类型，因为类型“string”的表达式不能用于索引类型</p></blockquote><p>代码举例：</p><pre><code class="hljs ts"><span class="hljs-comment">//我定义一常量对象</span><span class="hljs-keyword">const</span> EVENT_TYPE &#123;  EVENT_TYPE_TEMPERATURE_HIGH: <span class="hljs-string">&#x27;温度过高&#x27;</span>,  <span class="hljs-comment">//...</span>&#125;<span class="hljs-comment">//在 antd table 组件中，我根据不同的对象 Key 值渲染不同的文本</span>  render: <span class="hljs-function">(<span class="hljs-params">event_type: <span class="hljs-built_in">string</span></span>) =&gt;</span> EVENT_TYPE[event_type]</code></pre><p>解决办法：</p><p>为常量对象声明类型如下：</p><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> IEvent &#123;  [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> EVENT_TYPE:IEvent &#123;    EVENT_TYPE_TEMPERATURE_HIGH: <span class="hljs-string">&#x27;温度过高&#x27;</span>,  <span class="hljs-comment">//...</span>&#125;</code></pre><h1 id="使用-TS-的小技巧"><a href="#使用-TS-的小技巧" class="headerlink" title="使用 TS 的小技巧"></a>使用 TS 的小技巧</h1><blockquote><p>待续…</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《前端100问》70</title>
    <link href="/2020/12/11/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B70/"/>
    <url>/2020/12/11/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B70/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍下如何实现-token-加密"><a href="#介绍下如何实现-token-加密" class="headerlink" title="介绍下如何实现 token 加密"></a>介绍下如何实现 token 加密</h1><p>JWT（JSON Web Token）举例：</p><ol><li>需要一个 secret （随机数）</li><li>后端利用 secret 和加密算法（如：SHA-256）对 payload （如：账号、密码）生成一个字符串（token），返回前端</li><li>前端每次 request 都在 header 中 带上 token</li><li>后端用同样算法解密</li></ol><h1 id="redux-为什么要把-reducer-设计成纯函数"><a href="#redux-为什么要把-reducer-设计成纯函数" class="headerlink" title="redux 为什么要把 reducer 设计成纯函数"></a>redux 为什么要把 reducer 设计成纯函数</h1><blockquote><p>纯函数：</p><ol><li>如果函数的调用参数相同，则永远返回相同的结果。它不依赖于程序执行期间函数外部任何状态或数据的变化，必须只依赖于其输入参数。</li><li>该函数不会产生任何可观察的副作用，例如网络请求，输入和输出设备或数据突变（mutation）。</li></ol></blockquote><p>什么是纯函数？</p><ol><li>相同的输入永远返回相同的输出 （参数为对象，返回值也为对象）</li><li>不修改函数的输入值</li><li>不依赖外部环境状态</li><li>无任何副作用 </li></ol><p>在 Redux 源码中 <strong><code>var nextStateForKey = reducer(previousStateForKey, action)</code></strong> </p><p><strong>nextStateForKey</strong> 就是通过 reducer 执行后返回的结果(state)，然后通过<code>hasChanged = hasChanged || nextStateForKey !== previousStateForKey</code> 来比较新旧两个对象是否一致。</p><p><strong><em>此比较法，比较的是两个对象的存储位置</em></strong>，也就是浅比较法，所以，当我们 reducer 直接返回旧的 state 对象时，Redux 认为没有任何改变，从而导致页面没有更新。</p><p>为什么 Redux 会这样设计？</p><p>因为比较两个 JavaScript 对象中所有的属性是否完全相同，唯一的办法就是深比较。</p><p>然而，深比较在真实的应用中代码是非常大的，非常耗性能的，需要比较的次数特别多。</p><p>所以一个有效的解决方案就是做一个规定，当无论发生任何变化时，开发者都要返回一个新的对象，没有变化时，开发者返回旧的对象，这也就是 redux 为什么要把 reducer 设计成纯函数的原因。</p><h1 id="如何设计实现无缝轮播"><a href="#如何设计实现无缝轮播" class="headerlink" title="如何设计实现无缝轮播"></a>如何设计实现无缝轮播</h1><p>简单来说，无缝轮播的核心是制造一个连续的效果。</p><p>最简单的方法就是复制一个轮播的元素，当复制元素将要滚到目标位置后，把原来的元素进行归位的操作，以达到无缝的轮播效果。</p><h1 id="模拟实现一个-Promise-finally"><a href="#模拟实现一个-Promise-finally" class="headerlink" title="模拟实现一个 Promise.finally"></a>模拟实现一个 Promise.finally</h1><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.finally = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>) </span>&#123;  <span class="hljs-keyword">let</span> P = <span class="hljs-built_in">this</span>.constructor;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(    value  =&gt; P.resolve(callback()).then(<span class="hljs-function">() =&gt;</span> value),    reason =&gt; P.resolve(callback()).then(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-keyword">throw</span> reason &#125;)  );&#125;;</code></pre><p>MDN 对于 <code>finally</code> 的定义：</p><p><strong><code>finally()</code></strong> 方法返回一个<code>Promise</code>。在 promise 结束时，无论结果是 fulfilled 或者是 rejected，都会执行指定的回调函数。</p><h1 id="a-b-c-d-和-a-39-b-39-39-c-39-39-d-39-，哪个性能更高？"><a href="#a-b-c-d-和-a-39-b-39-39-c-39-39-d-39-，哪个性能更高？" class="headerlink" title="a.b.c.d 和 a[&#39;b&#39;][&#39;c&#39;][&#39;d&#39;]，哪个性能更高？"></a><code>a.b.c.d</code> 和 <code>a[&#39;b&#39;][&#39;c&#39;][&#39;d&#39;]</code>，哪个性能更高？</h1><p><code>.</code> 比 <code>[]</code> 性能更高</p><p>在语法分析转换成 AST时，<code>[]</code> 是含计算的，而 <code>.</code> 只是字符串字面量。</p><p>天然的<code>[]</code>  会消耗更多的计算成本，时间更长。</p><h1 id="ES6-代码转成-ES5-代码的实现思路是什么"><a href="#ES6-代码转成-ES5-代码的实现思路是什么" class="headerlink" title="ES6 代码转成 ES5 代码的实现思路是什么"></a>ES6 代码转成 ES5 代码的实现思路是什么</h1><p>以 Babel 的实现举例：</p><ul><li>将代码字符串解析成抽象语法树，即所谓的 AST</li><li>对 AST 进行处理，在这个阶段可以对 ES6 代码进行相应转换，即转成 ES5 代码</li><li>根据处理后的 AST 再生成代码字符串</li></ul><p>不用工具的话就要编写各种 polyfill。</p><p>题外话：Babel6.0 开始，就不再对代码进行转换。Babel 只负责 parse 和 generate 流程，专注于解析和生成阶段。转换代码的 transform 过程有 Babel 的插件完成</p><p><code>.babelrc</code> 文件就是用来配置 Babel 处理的，常有 <code>plugins</code> 与 <code>presets</code> 配置项，当他们同时存在的时候，先执行 <code>plugins</code> 从上到下，在执行 <code>presets</code> 从左到右。</p><h1 id="数组编程题"><a href="#数组编程题" class="headerlink" title="数组编程题"></a>数组编程题</h1><blockquote><p>随机生成一个长度为 10 的整数类型的数组，例如 <code>[2, 10, 3, 4, 5, 11, 10, 11, 20]</code>，将其排列成一个新数组，要求新数组形式如下，例如 <code>[[2, 3, 4, 5], [10, 11], [20]]</code>。 </p></blockquote><pre><code class="hljs js"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>min 生成随机数最小范围</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>max 生成随机数最大范围</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arrLength 生成数组长度</span><span class="hljs-comment"> */</span><span class="hljs-keyword">const</span> randomArr = <span class="hljs-function">(<span class="hljs-params">min, max, arrLength</span>) =&gt;</span> &#123;  <span class="hljs-comment">//区间取整</span>  min = <span class="hljs-built_in">Math</span>.ceil(min)  max = <span class="hljs-built_in">Math</span>.floor(max)  <span class="hljs-comment">//Array.from() 可以通过以下方式来创建数组对象：</span>  <span class="hljs-comment">//伪数组对象（拥有一个 length 属性和若干索引属性的任意对象）</span>  <span class="hljs-comment">//可迭代对象（可以获取对象中的元素,如 Map和 Set 等）</span>  <span class="hljs-comment">//Aarray 第二个参数：如果指定了该参数，新数组中的每个元素会执行该回调函数。</span>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(    &#123; <span class="hljs-attr">length</span>: arrLength &#125;,    () =&gt; <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min  ) <span class="hljs-comment">//含最大值，含最小值</span>&#125;<span class="hljs-comment">// 排列数组函数</span><span class="hljs-keyword">const</span> arrConvert = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> &#123;  <span class="hljs-comment">// 去重 排序</span>  arr = <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr)).sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b)  <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>  <span class="hljs-comment">//作为临时数组</span>  <span class="hljs-keyword">let</span> tep = []  <span class="hljs-comment">//结果数组</span>  <span class="hljs-keyword">const</span> result = []  <span class="hljs-comment">// 先推进去第一个数</span>  tep.push(arr[index])  <span class="hljs-keyword">while</span> (index &lt; arr.length) &#123;    <span class="hljs-keyword">if</span> (arr[index + <span class="hljs-number">1</span>] - arr[index] === <span class="hljs-number">1</span>) &#123;      tep.push(arr[index + <span class="hljs-number">1</span>])    &#125; <span class="hljs-keyword">else</span> &#123;      result.push(tep)      tep = [arr[index + <span class="hljs-number">1</span>]]    &#125;    index++  &#125;  <span class="hljs-keyword">return</span> result&#125;<span class="hljs-comment">// console.log(arrConvert(data))</span><span class="hljs-built_in">console</span>.log(arrConvert(randomArr(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)))</code></pre><p>hash（PS：得补习一下数据结构了，玩不转 hash）</p><h1 id="如何解决移动端-Retina-屏-1px-像素问题"><a href="#如何解决移动端-Retina-屏-1px-像素问题" class="headerlink" title="如何解决移动端 Retina 屏 1px 像素问题"></a>如何解决移动端 Retina 屏 1px 像素问题</h1><ol><li>基于 <code>media</code> 查询判断不同的设备像素比给定不同的 <code>border-image</code></li><li>使用 <code>background-image</code> 和 <code>border-image</code>类似，准备一张符合条件的边框背景图，模拟在背景上。</li><li>伪类 + <code>transform</code>  基于 <code>media</code> 查询判断不同的设备像素比对线条进行缩放<code>transformY:scale(.5)</code></li><li><code>rem</code> + <code>viewport</code> ：在根元素 <code>html</code> 设置 <code>font-size</code> 将 <code>px</code> 转换成 <code>rem</code> 通过 <code>window.devicePixelRatio </code> 拿到 <code>dpr</code> 再写 <code>meta</code> 设置 <code>viewport</code> 的 <code>scale : 1/dpr</code></li><li><code>box-shadow</code></li></ol><h1 id="如何把一个字符串的大小写取反（大写变小写小写变大写），例如-‘AbC’-变成-‘aBc’-。"><a href="#如何把一个字符串的大小写取反（大写变小写小写变大写），例如-‘AbC’-变成-‘aBc’-。" class="headerlink" title="如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ‘AbC’ 变成 ‘aBc’ 。"></a>如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ‘AbC’ 变成 ‘aBc’ 。</h1><pre><code class="hljs js"><span class="hljs-comment">// 如何把一个字符串的大小写取反（大写变小写小写变大写），例如 &#x27;AbC&#x27; 变成 &#x27;aBc&#x27;</span><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;AbC&#x27;</span><span class="hljs-keyword">const</span> testStr = <span class="hljs-string">&#x27;ADasfads123!@$!@#&#x27;</span><span class="hljs-keyword">const</span> toggleCase = <span class="hljs-function"><span class="hljs-params">str</span> =&gt;</span> &#123;  <span class="hljs-keyword">const</span> strArr = str.split(<span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-keyword">const</span> newArr = strArr.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span>    item === item.toUpperCase() ? item.toLowerCase() : item.toUpperCase()  )  <span class="hljs-keyword">return</span> newArr.join(<span class="hljs-string">&#x27;&#x27;</span>)&#125;<span class="hljs-comment">//test</span><span class="hljs-built_in">console</span>.log(toggleCase(str))<span class="hljs-built_in">console</span>.log(toggleCase(testStr))</code></pre><h1 id="Webpack-热更新原理，是如何做到在不刷新浏览器的前提下更新页面的"><a href="#Webpack-热更新原理，是如何做到在不刷新浏览器的前提下更新页面的" class="headerlink" title="Webpack 热更新原理，是如何做到在不刷新浏览器的前提下更新页面的"></a>Webpack 热更新原理，是如何做到在不刷新浏览器的前提下更新页面的</h1><blockquote><p>好难🤯，只能明白的大概意思和原理… 希望能搞懂…在以后</p></blockquote><p>来自官网文档：</p><p>模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p><ul><li>保留在完全重新加载页面期间丢失的应用程序状态。</li><li>只更新变更内容，以节省宝贵的开发时间。</li><li>在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。</li></ul><h2 id="这一切是如何运行的？"><a href="#这一切是如何运行的？" class="headerlink" title="这一切是如何运行的？"></a>这一切是如何运行的？</h2><p>让我们从一些不同的角度观察，以了解 HMR 的工作原理……</p><h3 id="在应用程序中"><a href="#在应用程序中" class="headerlink" title="在应用程序中"></a>在应用程序中</h3><p>通过以下步骤，可以做到在应用程序中置换(swap in and out)模块：</p><ol><li>应用程序要求 HMR runtime 检查更新。</li><li>HMR runtime 异步地下载更新，然后通知应用程序。</li><li>应用程序要求 HMR runtime 应用更新。</li><li>HMR runtime 同步地应用更新。</li></ol><p>你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新。</p><h3 id="在-compiler-中"><a href="#在-compiler-中" class="headerlink" title="在 compiler 中"></a>在 compiler 中</h3><p>除了普通资源，compiler 需要发出 “update”，将之前的版本更新到新的版本。”update” 由两部分组成：</p><ol><li>更新后的 manifest (JSON)</li><li>一个或多个 updated chunk (JavaScript)</li></ol><p>manifest 包括新的 compilation hash 和所有的 updated chunk 列表。每个 chunk 都包含着全部更新模块的最新代码（或一个 flag 用于表明此模块需要被移除）。</p><p>compiler 会确保在这些构建之间的模块 ID 和 chunk ID 保持一致。通常将这些 ID 存储在内存中（例如，使用 webpack-dev-server 时），但是也可能会将它们存储在一个 JSON 文件中。</p><h3 id="在模块中"><a href="#在模块中" class="headerlink" title="在模块中"></a>在模块中</h3><p>HMR 是可选功能，只会影响包含 HMR 代码的模块。举个例子，通过 <code>style-loader</code> 为 style 追加补丁。为了运行追加补丁，<code>style-loader</code> 实现了 HMR 接口；当它通过 HMR 接收到更新，它会使用新的样式替换旧的样式。</p><p>类似的，当在一个模块中实现了 HMR 接口，你可以描述出当模块被更新后发生了什么。然而在多数情况下，不需要在每个模块中强行写入 HMR 代码。如果一个模块没有 HMR 处理函数，更新就会冒泡(bubble up)。这意味着某个单独处理函数能够更新整个模块树。如果在模块树的一个单独模块被更新，那么整组依赖模块都会被重新加载。</p><h3 id="在-runtime-中"><a href="#在-runtime-中" class="headerlink" title="在 runtime 中"></a>在 runtime 中</h3><p>对于模块系统运行时(module system runtime)，会发出额外代码，来跟踪模块 <code>parents</code> 和 <code>children</code> 关系。在管理方面，runtime 支持两个方法 <code>check</code> 和 <code>apply</code>。</p><p><code>check</code> 方法，发送一个 HTTP 请求来更新 manifest。如果请求失败，说明没有可用更新。如果请求成功，会将 updated chunk 列表与当前的 loaded chunk 列表进行比较。每个 loaded chunk 都会下载相应的 updated chunk。当所有更新 chunk 完成下载，runtime 就会切换到 <code>ready</code> 状态。</p><p><code>apply</code> 方法，将所有 updated module 标记为无效。对于每个无效 module，都需要在模块中有一个 update handler，或者在此模块的父级模块中有 update handler。否则，会进行无效标记冒泡，并且父级也会被标记为无效。继续每个冒泡，直到到达应用程序入口起点，或者到达带有 update handler 的 module（以最先到达为准，冒泡停止）。如果它从入口起点开始冒泡，则此过程失败。</p><p>之后，所有无效 module 都会被（通过 dispose handler）处理和解除加载。然后更新当前 hash，并且调用所有 <code>accept</code> handler。runtime 切换回 <code>idle</code> 状态，一切照常继续。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 组件生命周期</title>
    <link href="/2020/12/10/React%20lifecycle/"/>
    <url>/2020/12/10/React%20lifecycle/</url>
    
    <content type="html"><![CDATA[<h1 id="React-Component-🌟"><a href="#React-Component-🌟" class="headerlink" title="React.Component 🌟"></a>React.Component 🌟</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>React 的组件可以定义为 class 或函数的形式。class 组件目前提供了更多的功能，这些功能将在此章节中详细介绍。如需定义 class 组件，需要继承 <code>React.Component</code>：</p><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;  render() &#123;    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;  &#125;&#125;</code></pre><p>在 <code>React.Component</code> 的子类中有个必须定义的 <code>render()</code> 函数。其他方法均为可选。</p><p><strong>我们强烈建议你不要创建自己的组件基类</strong></p><p>在 React 组件中，代码重用的主要方式是组合而不是继承。</p><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>每个组件都包含 “生命周期方法”，你可以重写这些方法，以便于在运行过程中特定的阶段执行这些方法。</p><p>常用的生命周期方法会被加粗。其余生命周期函数的使用则相对罕见。</p><p><img src="/images/react-lifecycle.jpg" alt="react-lifecycle"></p><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p><ul><li><strong><code>constructor()</code></strong></li><li><code>static getDerivedStateFromProps()</code></li><li><strong><code>render()</code></strong></li><li><strong><code>componentDidMount()</code></strong></li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p><ul><li><code>static getDerivedStateFromProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><strong><code>render()</code></strong></li><li><code>getSnapshotBeforeUpdate()</code></li><li><strong><code>componentDidUpdate()</code></strong></li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>当组件从 DOM 中移除时会调用如下方法：</p><ul><li><strong><code>componentWillUnmount()</code></strong></li></ul><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</p><ul><li><code>static getDerivedStateFromError()</code></li><li><code>componentDidCatch()</code></li></ul><h2 id="其他-APIs"><a href="#其他-APIs" class="headerlink" title="其他 APIs"></a>其他 APIs</h2><p>组件还提供了一些额外的 API：</p><ul><li><p><code>setState()</code></p></li><li><p><code>forceUpdate()</code></p><h3 id="class-属性"><a href="#class-属性" class="headerlink" title="class 属性"></a>class 属性</h3></li><li><p><code>defaultProps</code></p></li><li><p><code>displayName</code></p></li></ul><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><ul><li><code>props</code></li><li><code>state</code></li></ul><h2 id="常用的生命周期方法"><a href="#常用的生命周期方法" class="headerlink" title="常用的生命周期方法"></a>常用的生命周期方法</h2><p><img src="/images/react-lifecycle.jpg" alt="react-lifecycle"></p><h3 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h3><pre><code class="hljs jsx">render()</code></pre><p><code>render()</code> 方法是 class 组件中唯一必须实现的方法。</p><p>当 <code>render</code> 被调用时，它会检查 <code>this.props</code> 和 <code>this.state</code> 的变化并返回以下类型之一：</p><ul><li><strong>React 元素</strong>。通常通过 JSX 创建。例如，<code>&lt;div /&gt;</code> 会被 React 渲染为 DOM 节点，<code>&lt;MyComponent /&gt;</code> 会被 React 渲染为自定义组件，无论是 <code>&lt;div /&gt;</code> 还是 <code>&lt;MyComponent /&gt;</code> 均为 React 元素。</li><li><strong>数组或 fragments</strong>。 使得 render 方法可以返回多个元素。</li><li><strong>Portals</strong>。可以渲染子节点到不同的 DOM 子树中。</li><li><strong>字符串或数值类型</strong>。它们在 DOM 中会被渲染为文本节点</li><li>**布尔类型或 <code>null</code>**。什么都不渲染。（主要用于支持返回 <code>test &amp;&amp; &lt;Child /&gt;</code> 的模式，其中 test 为布尔类型。)</li></ul><p><code>render()</code> 函数应该为纯函数，这意味着在不修改组件 state 的情况下，每次调用时都返回相同的结果，并且它不会直接与浏览器交互。</p><p>如需与浏览器进行交互，请在 <code>componentDidMount()</code> 或其他生命周期方法中执行你的操作。保持 <code>render()</code> 为纯函数，可以使组件更容易思考。</p><blockquote><p><strong>注意:</strong></p><p>如果 <code>shouldComponentUpdate()</code> 返回 false，则不会调用 <code>render()</code>。</p></blockquote><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h3><pre><code class="hljs jsx"><span class="hljs-keyword">constructor</span>(props)</code></pre><p><strong>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。</strong></p><p>在 React 组件挂载之前，会调用它的构造函数。</p><p>在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 <code>super(props)</code>。</p><p>否则，<code>this.props</code> 在构造函数中可能会出现未定义的 bug。</p><p>通常，在 React 中，构造函数仅用于以下两种情况：</p><ul><li>通过给 <code>this.state</code> 赋值对象来初始化内部 state</li><li>为事件处理函数绑定实例</li></ul><p>在 <code>constructor()</code> 函数中<strong>不要调用 <code>setState()</code> 方法</strong>。</p><p>如果你的组件需要使用内部 state，请直接在构造函数中为 <strong><code>this.state</code> 赋值初始 state</strong>：</p><pre><code class="hljs jsx"><span class="hljs-keyword">constructor</span>(props) &#123;  <span class="hljs-built_in">super</span>(props);  <span class="hljs-comment">// 不要在这里调用 this.setState()</span>  <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span> &#125;;  <span class="hljs-built_in">this</span>.handleClick = <span class="hljs-built_in">this</span>.handleClick.bind(<span class="hljs-built_in">this</span>);&#125;</code></pre><p>只能在构造函数中直接为 <code>this.state</code> 赋值。如需在其他方法中赋值，你应使用 <code>this.setState()</code> 替代。</p><p>要避免在构造函数中引入任何副作用或订阅。如遇到此场景，请将对应的操作放置在 <code>componentDidMount</code> 中。</p><blockquote><p>注意</p><p><strong>避免将 props 的值复制给 state！这是一个常见的错误：</strong></p><pre><code class="hljs jsx"><span class="hljs-keyword">constructor</span>(props) &#123;<span class="hljs-built_in">super</span>(props);<span class="hljs-comment">// 不要这样做</span><span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">color</span>: props.color &#125;;&#125;</code></pre><p>如此做毫无必要（你可以直接使用 <code>this.props.color</code>），同时还产生了 bug（更新 prop 中的 <code>color</code> 时，并不会影响 state）。</p><p><strong>只有在你刻意忽略 prop 更新的情况下使用。</strong></p><p>此时，应将 prop 重命名为 <code>initialColor</code> 或 <code>defaultColor</code>。</p></blockquote><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h3><pre><code class="hljs jsx">componentDidMount()</code></pre><p><code>componentDidMount()</code> 会在组件挂载后（插入 DOM 树中）立即调用。</p><p>依赖于 DOM 节点的初始化应该放在这里。</p><p>如需通过<strong>网络请求获取数据</strong>，此处是实例化请求的好地方。</p><p>这个方法是比较适合添加订阅的地方。如果添加了订阅，请不要忘记在 <code>componentWillUnmount()</code> 里取消订阅</p><p>你可以在 <code>componentDidMount()</code> 里**直接调用 <code>setState()</code>**。它将触发额外渲染，但此渲染会发生在浏览器更新屏幕之前。</p><p>如此保证了即使在 <code>render()</code> 两次调用的情况下，用户也不会看到中间状态。</p><p>请谨慎使用该模式，因为它会导致性能问题。</p><p>通常，你应该在 <code>constructor()</code> 中初始化 state。如果你的渲染依赖于 DOM 节点的大小或位置，比如实现 modals 和 tooltips 等情况下，你可以使用此方式处理</p><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h3><pre><code class="hljs jsx">componentDidUpdate(prevProps, prevState, snapshot)</code></pre><p><code>componentDidUpdate()</code> 会在更新后会被立即调用。首次渲染不会执行此方法。</p><p>当组件更新后，可以在此处对 DOM 进行操作。</p><p>如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求。（例如，当 props 未发生变化时，则不会执行网络请求）。</p><pre><code class="hljs jsx">componentDidUpdate(prevProps) &#123;  <span class="hljs-comment">// 典型用法（不要忘记比较 props）：</span>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.props.userID !== prevProps.userID) &#123;    <span class="hljs-built_in">this</span>.fetchData(<span class="hljs-built_in">this</span>.props.userID);  &#125;&#125;</code></pre><p>你也可以在 <code>componentDidUpdate()</code> 中<strong>直接调用 <code>setState()</code>**，但请注意</strong>它必须被包裹在一个条件语句里**，正如上述的例子那样进行处理，否则会导致死循环。</p><p>它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。</p><p>不要将 props “镜像”给 state，请考虑直接使用 props。</p><p>如果组件实现了 <code>getSnapshotBeforeUpdate()</code> 生命周期（不常用），则它的返回值将作为 <code>componentDidUpdate()</code> 的第三个参数 “snapshot” 参数传递。否则此参数将为 undefined。</p><blockquote><p><strong>注意:</strong></p><p>如果 <code>shouldComponentUpdate()</code> 返回值为 false，则不会调用 <code>componentDidUpdate()</code>。</p></blockquote><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h3><pre><code class="hljs jsx">componentWillUnmount()</code></pre><p><code>componentWillUnmount()</code> 会在组件卸载及销毁之前直接调用。</p><p>在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 <code>componentDidMount()</code> 中创建的订阅等。</p><p><code>componentWillUnmount()</code> 中**不应调用 <code>setState()</code>**，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。</p><h2 id="不常用的生命周期方法"><a href="#不常用的生命周期方法" class="headerlink" title="不常用的生命周期方法"></a>不常用的生命周期方法</h2><p>这些生命周期方法并不太常用。它们偶尔会很方便，但是大部分情况下组件可能都不需要它们。</p><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h3><pre><code class="hljs jsx">shouldComponentUpdate(nextProps, nextState)</code></pre><p>根据 <code>shouldComponentUpdate()</code> 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。</p><p>默认行为是 state 每次发生变化组件都会重新渲染。大部分情况下，你应该遵循默认行为。</p><p>当 props 或 state 发生变化时，<code>shouldComponentUpdate()</code> 会在渲染执行之前被调用。返回值默认为 true。</p><p>首次渲染或使用 <code>forceUpdate()</code> 时不会调用该方法。</p><p>此方法仅作为<strong>性能优化的方式</strong>而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。你应该<strong>考虑使用内置的 <code>PureComponent</code> 组件</strong>，而不是手动编写 <code>shouldComponentUpdate()</code>。<code>PureComponent</code> 会对 props 和 state 进行浅层比较，并减少了跳过必要更新的可能性。</p><p>如果你一定要手动编写此函数，可以将 <code>this.props</code> 与 <code>nextProps</code> 以及 <code>this.state</code> 与<code>nextState</code> 进行比较，并返回 <code>false</code> 以告知 React 可以跳过更新。请注意，返回 <code>false</code> 并不会阻止子组件在 state 更改时重新渲染。</p><p>不建议在 <code>shouldComponentUpdate()</code> 中进行深层比较或使用 <code>JSON.stringify()</code>。这样非常影响效率，且会损害性能。</p><p>目前，如果 <code>shouldComponentUpdate()</code> 返回 <code>false</code>，则不会调用 <code>UNSAFE_componentWillUpdate()</code>，<code>render()</code> 和 <code>componentDidUpdate()</code>。后续版本，React 可能会将 <code>shouldComponentUpdate</code> 视为提示而不是严格的指令，并且，当返回 <code>false</code> 时，仍可能导致组件重新渲染。</p><h3 id="static-getDerivedStateFromProps"><a href="#static-getDerivedStateFromProps" class="headerlink" title="static getDerivedStateFromProps()"></a>static getDerivedStateFromProps()</h3><pre><code class="hljs jsx"><span class="hljs-keyword">static</span> getDerivedStateFromProps(props, state)</code></pre><p><code>getDerivedStateFromProps</code> 会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。</p><p>它应返回一个对象来更新 state，如果返回 <code>null</code> 则不更新任何内容。</p><p>此方法适用于罕见的用例，即 state 的值在任何时候都取决于 props。例如，实现 <code>&lt;Transition&gt;</code> 组件可能很方便，该组件会比较当前组件与下一组件，以决定针对哪些组件进行转场动画。</p><blockquote><p>什么时候使用派生 state ?</p><p><code>getDerivedStateFromProps</code> 的存在只有一个目的：让组件在 <strong>props 变化</strong>时更新 state。</p></blockquote><p>派生状态会导致代码冗余，并使组件难以维护。</p><p>请注意，不管原因是什么，都会在<em>每次</em>渲染前触发此方法。这与 <code>UNSAFE_componentWillReceiveProps</code> 形成对比，后者仅在父组件重新渲染时触发，而不是在内部调用 <code>setState</code> 时。</p><h3 id="getSnapshotBeforeUpdate-处理滚动位置的聊天线程"><a href="#getSnapshotBeforeUpdate-处理滚动位置的聊天线程" class="headerlink" title="getSnapshotBeforeUpdate() 处理滚动位置的聊天线程"></a>getSnapshotBeforeUpdate() 处理滚动位置的聊天线程</h3><pre><code class="hljs jsx">getSnapshotBeforeUpdate(prevProps, prevState)</code></pre><p><code>getSnapshotBeforeUpdate()</code> 在最近一次渲染输出（提交到 DOM 节点）之前调用。</p><p>它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。</p><p>此生命周期的任何返回值将作为参数传递给 <code>componentDidUpdate()</code>。</p><p>此用法并不常见，但它可能出现在 UI 处理中，如需要以特殊方式处理滚动位置的聊天线程等。</p><p>应返回 snapshot 的值（或 <code>null</code>）。</p><p>例如：</p><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScrollingList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;  <span class="hljs-keyword">constructor</span>(props) &#123;    <span class="hljs-built_in">super</span>(props);    <span class="hljs-built_in">this</span>.listRef = React.createRef();  &#125;  getSnapshotBeforeUpdate(prevProps, prevState) &#123;    <span class="hljs-comment">// 我们是否在 list 中添加新的 items ？</span>    <span class="hljs-comment">// 捕获滚动位置以便我们稍后调整滚动位置。</span>    <span class="hljs-keyword">if</span> (prevProps.list.length &lt; <span class="hljs-built_in">this</span>.props.list.length) &#123;      <span class="hljs-keyword">const</span> list = <span class="hljs-built_in">this</span>.listRef.current;      <span class="hljs-keyword">return</span> list.scrollHeight - list.scrollTop;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;  componentDidUpdate(prevProps, prevState, snapshot) &#123;    <span class="hljs-comment">// 如果我们 snapshot 有值，说明我们刚刚添加了新的 items，</span>    <span class="hljs-comment">// 调整滚动位置使得这些新 items 不会将旧的 items 推出视图。</span>    <span class="hljs-comment">//（这里的 snapshot 是 getSnapshotBeforeUpdate 的返回值）</span>    <span class="hljs-keyword">if</span> (snapshot !== <span class="hljs-literal">null</span>) &#123;      <span class="hljs-keyword">const</span> list = <span class="hljs-built_in">this</span>.listRef.current;      list.scrollTop = list.scrollHeight - snapshot;    &#125;  &#125;  render() &#123;    <span class="hljs-keyword">return</span> (      &lt;div ref=&#123;<span class="hljs-built_in">this</span>.listRef&#125;&gt;&#123;<span class="hljs-comment">/* ...contents... */</span>&#125;&lt;/div&gt;    );  &#125;&#125;</code></pre><p>在上述示例中，重点是从 <code>getSnapshotBeforeUpdate</code> 读取 <code>scrollHeight</code> 属性，因为 “render” 阶段生命周期（如 <code>render</code>）和 “commit” 阶段生命周期（如 <code>getSnapshotBeforeUpdate</code> 和 <code>componentDidUpdate</code>）之间可能存在延迟。</p><h3 id="Error-boundaries"><a href="#Error-boundaries" class="headerlink" title="Error boundaries"></a>Error boundaries</h3><p>Error boundaries（错误边界） 是 React 组件，它会在其子组件树中的任何位置捕获 JavaScript 错误，并记录这些错误，展示降级 UI 而不是崩溃的组件树。</p><p>Error boundaries 组件会捕获在渲染期间，在生命周期方法以及其整个树的构造函数中发生的错误。</p><p>如果 class 组件定义了生命周期方法:</p><ul><li><p><code>static getDerivedStateFromError()</code> </p></li><li><p><code>componentDidCatch()</code> </p></li></ul><p>中的任何一个（或两者），它就成为了 Error boundaries。</p><p>通过生命周期更新 state 可让组件捕获树中未处理的 JavaScript 错误并展示降级 UI。</p><p>仅使用 Error boundaries 组件来从意外异常中恢复的情况；<strong>不要将它们用于流程控制。</strong></p><blockquote><p>注意:</p><p>Error boundaries 仅捕获组件树中<strong>以下</strong>组件中的错误。但它本身的错误无法捕获。</p></blockquote><h3 id="static-getDerivedStateFromError-处理降级渲染"><a href="#static-getDerivedStateFromError-处理降级渲染" class="headerlink" title="static getDerivedStateFromError() 处理降级渲染"></a>static getDerivedStateFromError() 处理降级渲染</h3><pre><code class="hljs jsx"><span class="hljs-keyword">static</span> getDerivedStateFromError(error)</code></pre><p>此生命周期会在<strong>「后代组件」</strong>抛出错误后被调用。 它将抛出的错误作为参数，并返回一个值以更新 state</p><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorBoundary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;  <span class="hljs-keyword">constructor</span>(props) &#123;    <span class="hljs-built_in">super</span>(props);    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span> &#125;;  &#125;  <span class="hljs-keyword">static</span> getDerivedStateFromError(error) &#123;    <span class="hljs-comment">// 更新 state 使下一次渲染可以显降级 UI</span>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span> &#125;;  &#125;  render() &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.state.hasError) &#123;      <span class="hljs-comment">// 你可以渲染任何自定义的降级  UI</span>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Something went wrong.<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.props.children;  &#125;&#125;</code></pre><blockquote><p>注意</p><p><code>getDerivedStateFromError()</code> 会在<code>渲染</code>阶段调用，因此不允许出现副作用。 </p><p>如遇此类情况，请改用 <code>componentDidCatch()</code>。</p></blockquote><h3 id="componentDidCatch"><a href="#componentDidCatch" class="headerlink" title="componentDidCatch()"></a>componentDidCatch()</h3><pre><code class="hljs jsx">componentDidCatch(error, info)</code></pre><p>此生命周期在<strong>「后代组件」</strong>抛出错误后被调用。 它接收两个参数：</p><ol><li><code>error</code> —— 抛出的错误。</li><li><code>info</code> —— 带有 <code>componentStack</code> key 的对象，其中包含有关组件引发错误的栈信息。</li></ol><p><code>componentDidCatch()</code> 会在“提交”阶段被调用，因此允许执行副作用。 它应该用于记录错误之类的情况：</p><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorBoundary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;  <span class="hljs-keyword">constructor</span>(props) &#123;    <span class="hljs-built_in">super</span>(props);    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span> &#125;;  &#125;  <span class="hljs-keyword">static</span> getDerivedStateFromError(error) &#123;    <span class="hljs-comment">// 更新 state 使下一次渲染可以显示降级 UI</span>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span> &#125;;  &#125;  componentDidCatch(error, info) &#123;    <span class="hljs-comment">// &quot;组件堆栈&quot; 例子:</span>    <span class="hljs-comment">//   in ComponentThatThrows (created by App)</span>    <span class="hljs-comment">//   in ErrorBoundary (created by App)</span>    <span class="hljs-comment">//   in div (created by App)</span>    <span class="hljs-comment">//   in App</span>    logComponentStackToMyService(info.componentStack);  &#125;  render() &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.state.hasError) &#123;      <span class="hljs-comment">// 你可以渲染任何自定义的降级 UI</span>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Something went wrong.<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.props.children;  &#125;&#125;</code></pre><p>React 的开发和生产构建版本在 <code>componentDidCatch()</code> 的方式上有轻微差别。</p><p>在开发模式下，错误会冒泡至 <code>window</code>，这意味着任何 <code>window.onerror</code> 或 <code>window.addEventListener(&#39;error&#39;, callback)</code> 会中断这些已经被 <code>componentDidCatch()</code> 捕获的错误。</p><p>相反，在开发模式下，错误不会冒泡，这意味着任何根错误处理器只会接受那些没有显式地被 <code>componentDidCatch()</code> 捕获的错误。</p><blockquote><p>注意:</p><p>如果发生错误，你可以通过调用 <code>setState</code> 使用 <code>componentDidCatch()</code> 渲染降级 UI，但在未来的版本中将不推荐这样做。 可以使用静态 <code>getDerivedStateFromError()</code> 来处理降级渲染。</p></blockquote><h2 id="setState-和-forceUpdate"><a href="#setState-和-forceUpdate" class="headerlink" title="setState() 和 forceUpdate()"></a>setState() 和 forceUpdate()</h2><p>不同于生命周期方法（React 主动调用），以下是手动可以在组件中调用的方法。</p><p>只有两个方法：<code>setState()</code> 和 <code>forceUpdate()</code>。</p><h3 id="setState"><a href="#setState" class="headerlink" title="setState()"></a>setState()</h3><pre><code class="hljs jsx">setState(updater, [callback])</code></pre><p><code>setState()</code> 将对组件 state 的更改排入队列，并通知 React 需要使用更新后的 state 重新渲染此组件及其子组件。</p><p>这是用于更新用户界面以响应事件处理器和处理服务器数据的主要方式</p><p>将 <code>setState()</code> 视为 <em>请求</em> 而不是立即更新组件的命令。</p><p>为了更好的感知性能，React 会延迟调用它，然后通过一次传递更新多个组件。React 并不会保证 state 的变更会立即生效。</p><p><code>setState()</code> 并不总是立即更新组件。它会批量推迟更新。这使得在调用 <code>setState()</code> 后立即读取 <code>this.state</code> 成为了隐患。</p><p>为了消除隐患，请使用 <code>componentDidUpdate</code> 或者 <code>setState</code> 的回调函数（<code>setState(updater, callback)</code>），这两种方式都可以保证在应用更新后触发。</p><p>如需基于之前的 state 来设置当前的 state：</p><p>除非 <code>shouldComponentUpdate()</code> 返回 <code>false</code>，否则 <code>setState()</code> 将始终执行重新渲染操作。</p><p>如果可变对象被使用，且无法在 <code>shouldComponentUpdate()</code> 中实现条件渲染，那么仅在新旧状态不一时调用 <code>setState()</code>可以避免不必要的重新渲染</p><p>参数一为带有形式参数的 <code>updater</code> 函数：</p><pre><code class="hljs jsx">(state, props) =&gt; stateChange</code></pre><p><code>state</code> 是对应用变化时组件状态的引用。</p><p>当然，它不应直接被修改。你应该使用基于 <code>state</code> 和 <code>props</code> 构建的新对象来表示变化。例如，假设我们想根据 <code>props.step</code> 来增加 state：</p><pre><code class="hljs jsx"><span class="hljs-built_in">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">state, props</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">counter</span>: state.counter + props.step&#125;;&#125;);</code></pre><p>updater 函数中接收的 <code>state</code> 和 <code>props</code> 都保证为最新。updater 的返回值会与 <code>state</code> 进行浅合并。</p><p><code>setState()</code> 的第二个参数为可选的回调函数，它将在 <code>setState</code> 完成合并并重新渲染组件后执行。通常，我们建议使用 <code>componentDidUpdate()</code> 来代替此方式。</p><p><code>setState()</code> 的第一个参数除了接受函数外，还可以接受对象类型：</p><pre><code class="hljs jsx">setState(stateChange[, callback])</code></pre><p><code>stateChange</code> 会将传入的对象浅层合并到新的 state 中，例如，调整购物车商品数：</p><pre><code class="hljs jsx"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span>&#125;)</code></pre><p>这种形式的 <code>setState()</code> 也是异步的，并且在同一周期内会对多个 <code>setState</code> 进行批处理。</p><p>例如，如果在同一周期内多次设置商品数量增加，则相当于：</p><pre><code class="hljs jsx"><span class="hljs-built_in">Object</span>.assign(  previousState,  &#123;<span class="hljs-attr">quantity</span>: state.quantity + <span class="hljs-number">1</span>&#125;,  &#123;<span class="hljs-attr">quantity</span>: state.quantity + <span class="hljs-number">1</span>&#125;,  ...)</code></pre><p>后调用的 <code>setState()</code> 将覆盖同一周期内先调用 <code>setState</code> 的值，因此商品数仅增加一次。</p><p>如果后续状态取决于当前状态，我们建议使用 updater 函数的形式代替：</p><pre><code class="hljs jsx"><span class="hljs-built_in">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">quantity</span>: state.quantity + <span class="hljs-number">1</span>&#125;;&#125;);</code></pre><h3 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate()"></a>forceUpdate()</h3><pre><code class="hljs jsx">component.forceUpdate(callback)</code></pre><p>默认情况下，当组件的 state 或 props 发生变化时，组件将重新渲染。</p><p>如果 <code>render()</code> 方法依赖于其他数据，则可以调用 <code>forceUpdate()</code> 强制让组件重新渲染。</p><p>调用 <code>forceUpdate()</code> 将致使组件调用 <code>render()</code> 方法，此操作会跳过该组件的 <code>shouldComponentUpdate()</code>。</p><p>但其子组件会触发正常的生命周期方法，包括 <code>shouldComponentUpdate()</code> 方法。如果标记发生变化，React 仍将只更新 DOM。</p><p>通常你应该避免使用 <code>forceUpdate()</code>，尽量在 <code>render()</code> 中使用 <code>this.props</code> 和 <code>this.state</code>。</p><h2 id="Class-属性"><a href="#Class-属性" class="headerlink" title="Class 属性"></a>Class 属性</h2><h3 id="defaultProps"><a href="#defaultProps" class="headerlink" title="defaultProps"></a>defaultProps</h3><p><code>defaultProps</code> 可以为 Class 组件添加默认 props。</p><p>这一般用于 props 未赋值，但又不能为 <code>null</code> 的情况。例如：</p><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;  <span class="hljs-comment">// ...</span>&#125;CustomButton.defaultProps = &#123;  color: <span class="hljs-string">&#x27;blue&#x27;</span>&#125;;</code></pre><p>如果未提供 <code>props.color</code>，则默认设置为 <code>&#39;blue&#39;</code></p><pre><code class="hljs jsx">render() &#123;  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">CustomButton</span> /&gt;</span></span> ; <span class="hljs-comment">// props.color 将设置为 &#x27;blue&#x27;</span>&#125;</code></pre><p>如果 <code>props.color</code> 被设置为 <code>null</code>，则它将保持为 <code>null</code></p><pre><code class="hljs jsx">render() &#123;  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">CustomButton</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;null&#125;</span> /&gt;</span></span> ; <span class="hljs-comment">// props.color 将保持是 null</span>&#125;</code></pre><h3 id="displayName"><a href="#displayName" class="headerlink" title="displayName"></a>displayName</h3><p><code>displayName</code> 字符串多用于调试消息。</p><p>通常，你不需要设置它，因为它可以根据函数组件或 class 组件的名称推断出来。</p><h2 id="实例属性-1"><a href="#实例属性-1" class="headerlink" title="实例属性"></a>实例属性</h2><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p><code>this.props</code> 包括被该组件调用者定义的 props。</p><p>需特别注意，<code>this.props.children</code> 是一个特殊的 prop，通常由 JSX 表达式中的子组件组成，而非组件本身定义。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>组件中的 state 包含了随时可能发生变化的数据。state 由用户自定义，它是一个普通 JavaScript 对象。</p><p>如果某些值未用于渲染或数据流（例如，计时器 ID），则不必将其设置为 state。此类值可以在组件实例上定义。</p><p>永远不要直接改变 <code>this.state</code>，因为后续调用的 <code>setState()</code> 可能会替换掉你的改变。请把 <code>this.state</code> 看作是不可变的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写原生方法</title>
    <link href="/2020/12/09/%E6%89%8B%E5%86%99%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95/"/>
    <url>/2020/12/09/%E6%89%8B%E5%86%99%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="手写原生方法"><a href="#手写原生方法" class="headerlink" title="手写原生方法"></a>手写原生方法</h1><blockquote><p>代码实现 JavaScript 系列</p></blockquote><h1 id="手写实现-call"><a href="#手写实现-call" class="headerlink" title="手写实现 call"></a>手写实现 call</h1><blockquote><p><code>call</code> 主要都做了些什么？</p></blockquote><p><code>call()</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><p>分析：</p><ol><li>更改 <code>this</code> 指向</li><li>函数立刻执行</li></ol><pre><code class="hljs js"><span class="hljs-keyword">function</span>.call(thisArg, arg1, arg2, ...)</code></pre><p>参数:</p><ul><li><p><code>thisArg</code></p><p>可选的。在 <em><code>function</code></em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p></li><li><p><code>arg1, arg2, ...</code></p><p>指定的参数列表。</p></li></ul><p>返回值:</p><p>使用调用者提供的 <code>this</code> 值和参数调用该函数的返回值。若该方法没有返回值，则返回 <code>undefined</code>。</p><p>代码实现：</p><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.myCall = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;  <span class="hljs-comment">// 判断有没有传入要绑定的对象，没有默认是window</span>  <span class="hljs-comment">// 如果是基本类型的话通过Object()方法进行转换</span>  <span class="hljs-comment">// 使用 var 重新定义函数局部变量  </span>  <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">Object</span>(context) || <span class="hljs-built_in">window</span>  context.fn = <span class="hljs-built_in">this</span>  <span class="hljs-comment">// 保存返回值</span>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">// 取出传递的参数 第一个参数是this， 下面是三种截取除第一个参数之外剩余参数的方法</span>  <span class="hljs-comment">// 通过...展开运算符将伪数组 argument是转换伪数组，使用数组方法返回参数数组</span>  <span class="hljs-keyword">const</span> args = [...arguments].slice(<span class="hljs-number">1</span>)  <span class="hljs-comment">// 执行方法</span>  result = context.fn(...args)  <span class="hljs-comment">// 删除绑定，不删除会一直绑fn</span>  <span class="hljs-keyword">delete</span> context.fn  <span class="hljs-comment">// 返回函数执行结果</span>  <span class="hljs-keyword">return</span> result&#125;<span class="hljs-comment">//test</span><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(a))<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.myCall(a))</code></pre><h1 id="手写实现-apply"><a href="#手写实现-apply" class="headerlink" title="手写实现 apply"></a>手写实现 apply</h1><blockquote><p>实现了call 其实也就间接实现了apply，只不过就是传递的参数不同</p></blockquote><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.myApply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context, args</span>) </span>&#123;  <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">Object</span>(context) || <span class="hljs-built_in">window</span>  context.fn = <span class="hljs-built_in">this</span>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">// 判断有没有传入 args</span>  <span class="hljs-keyword">if</span> (!args) &#123;    result = context.fn()  &#125; <span class="hljs-keyword">else</span> &#123;    result = context.fn(...args)  &#125;  <span class="hljs-keyword">delete</span> context.fn  <span class="hljs-keyword">return</span> result&#125;</code></pre><h1 id="手写实现-bind"><a href="#手写实现-bind" class="headerlink" title="手写实现 bind"></a>手写实现 bind</h1><p><code>bind</code> 特性：</p><ul><li>指定this</li><li>返回一个函数</li><li>传递参数并柯里化</li></ul><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.myBind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ctx, ...args</span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...innerArgs</span>) =&gt;</span> <span class="hljs-built_in">this</span>.call(ctx, ...args, ...innerArgs);  &#125;;</code></pre><h1 id="手写实现-Promise"><a href="#手写实现-Promise" class="headerlink" title="手写实现 Promise"></a>手写实现 Promise</h1><p>简单实现一个 Promise 类</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyPromise</span>(<span class="hljs-params">executor</span>) </span>&#123;  <span class="hljs-comment">// 初始化 state 为等待态</span>  <span class="hljs-built_in">this</span>.state = <span class="hljs-string">&#x27;peding&#x27;</span>  <span class="hljs-comment">// 成功的值</span>  <span class="hljs-built_in">this</span>.value = <span class="hljs-literal">undefined</span>  <span class="hljs-comment">// 失败的原因</span>  <span class="hljs-built_in">this</span>.reason = <span class="hljs-literal">undefined</span>  <span class="hljs-keyword">let</span> resolve = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.state === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;      <span class="hljs-comment">// resolve调用后，state转化为成功态</span>      <span class="hljs-built_in">this</span>.state = <span class="hljs-string">&#x27;fulfilled&#x27;</span>      <span class="hljs-comment">// 储存成功的值</span>      <span class="hljs-built_in">this</span>.value = value    &#125;  &#125;  <span class="hljs-keyword">let</span> reject = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;    <span class="hljs-comment">// state改变,reject调用就会失败</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.state === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;      <span class="hljs-comment">// reject调用后，state转化为失败态</span>      <span class="hljs-built_in">this</span>.state = <span class="hljs-string">&#x27;rejected&#x27;</span>      <span class="hljs-comment">// 储存失败的原因</span>      <span class="hljs-built_in">this</span>.reason = reason    &#125;  &#125;  <span class="hljs-keyword">try</span> &#123;    executor(resolve, reject)  &#125; <span class="hljs-keyword">catch</span> (error) &#123;    reject(error)  &#125;&#125;</code></pre><h1 id="Promise-all-方法"><a href="#Promise-all-方法" class="headerlink" title="Promise all 方法"></a>Promise all 方法</h1><pre><code class="hljs js"><span class="hljs-comment">// Promise.all</span><span class="hljs-comment">// Promise.all 需要等到所有的 promise 的状态都变成 fulfilled 之后才 resolve, 但只要有一个 promise 失败即返回失败的结果。</span>MyPromise.all = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arr</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`argument must be a array`</span>)    &#125;    <span class="hljs-keyword">let</span> dataArr = []    <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;      <span class="hljs-keyword">let</span> p = arr[i]      p.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;        dataArr.push(data)        num++        <span class="hljs-keyword">if</span> (num === arr.length) &#123;          <span class="hljs-keyword">return</span> resolve(data)        &#125;      &#125;).catch(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;        <span class="hljs-keyword">return</span> reject(e)      &#125;)    &#125;  &#125;)&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《温故而知新》Vue</title>
    <link href="/2020/12/05/%E3%80%8A%E6%B8%A9Vue%E8%80%8C%E7%9F%A5%E6%96%B0%E3%80%8B/"/>
    <url>/2020/12/05/%E3%80%8A%E6%B8%A9Vue%E8%80%8C%E7%9F%A5%E6%96%B0%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="库和框架的区别"><a href="#库和框架的区别" class="headerlink" title="库和框架的区别"></a>库和框架的区别</h1><p>库是功能函数的集合，每一次调用库内的函数实现一个特定的功能，使用库就是为了使用其中的功能，需要自己编写代码控制逻辑。</p><p>框架是一整套的解决方法，框架为了我们项目实现了大部分的功能，我们在开发的时候只需要按照框架的规则书写代码即可，不需要自己编写控制代码的执行逻辑。</p><p>库对项目的注入低依赖轻，更换别的库相对简单，开销小。</p><p>框架对项目的注意高，项目高度依赖框架，如果要更换框架无异于重写项目，开销大。</p><h1 id="MVC-和-MVVM-的区别"><a href="#MVC-和-MVVM-的区别" class="headerlink" title="MVC 和 MVVM 的区别"></a>MVC 和 MVVM 的区别</h1><p>MVVM：模型-视图-视图模型</p><ul><li>M： Model 模型 指的是数据层</li><li>V： View  视图 指的是用户页面</li><li>VM： ViewModel  视图模型 </li></ul><p>视图模型是 <strong>MVVM</strong> 模式的核心，它是连接 <strong>view</strong> 和 <strong>model</strong> 的桥梁，<strong>MVVM</strong> 实现了 <strong>view</strong> 和<strong>model</strong> 的自动同步，当 <strong>model</strong> 属性改变时，我们不用自己手动操作 DOM 元素，来改变 <strong>view</strong> 的显示，反之亦然。以上，我们称之为数据的双向绑定。</p><p>MVC：模型-视图-控制器</p><ul><li>M：Model 模型 指的是数据层</li><li>V：View 视图 指的是用户页面</li><li>C：Controller 控制器指的是页面业务逻辑</li></ul><p><strong>view</strong> 传送指令给 <strong>controller</strong>，<strong>controller</strong> 完成业务逻辑后，要求 <strong>model</strong> 改变状态，<strong>model</strong> 将新的数据发送给 <strong>view</strong>，用户就得到了的反馈,所有通信都是单向的。</p><h1 id="v-if-和-v-show-的区别，适合场景"><a href="#v-if-和-v-show-的区别，适合场景" class="headerlink" title="v-if 和 v-show 的区别，适合场景"></a>v-if 和 v-show 的区别，适合场景</h1><p><code>v-if</code>是通过创建和删除 <strong>DOM</strong> 元素来控制元素的显示和隐藏，适用于不需要频繁切换元素显示和隐藏的场景。</p><p><code>v-show</code>是通过操作 <strong>CSS</strong> 的 <code>display:block</code>和 <code>display:none</code> 来控制元素的显示和隐藏，适用于需要频繁切换元素的显示和隐藏的场景。</p><h1 id="v-for-和-v-if-的优先级那个更高"><a href="#v-for-和-v-if-的优先级那个更高" class="headerlink" title="v-for 和 v-if 的优先级那个更高"></a>v-for 和 v-if 的优先级那个更高</h1><p><code>v-for</code> 的优先级要高于 <code>v-if</code></p><p>如果同时出现 <code>v-for</code> 和 <code>v-if</code>，无论判断条件是否成立，都会执行一遍 <code>v-for</code> 循环。这样使用浪费性能，所以要尽可能避免两者一起使用。</p><h1 id="Vue-中的事件修饰符有哪些，分别作用是什么"><a href="#Vue-中的事件修饰符有哪些，分别作用是什么" class="headerlink" title="Vue 中的事件修饰符有哪些，分别作用是什么"></a>Vue 中的事件修饰符有哪些，分别作用是什么</h1><p><code>.prevent</code>： 阻止事件默认行为</p><p><code>.stop</code>： 阻止事件冒泡</p><p><code>.capture</code>： 设置事件捕获机制</p><p><code>.self</code>： 只有点击元素自身才能触发事件</p><p><code>.once</code>： 事件只触发一次</p><h1 id="v-model-的修饰符有哪些，分别作用是什么"><a href="#v-model-的修饰符有哪些，分别作用是什么" class="headerlink" title="v-model 的修饰符有哪些，分别作用是什么"></a>v-model 的修饰符有哪些，分别作用是什么</h1><p><code>.trim</code> ：去除首尾空格</p><p><code>.lazy</code> ：只有输入框失去焦点或按回车键时更新内容,不是实时更新</p><p><code>.number</code> ：将数据转换成number类型 (原本是字符串类型)</p><h1 id="Vue-中的按键修饰符有哪些"><a href="#Vue-中的按键修饰符有哪些" class="headerlink" title="Vue 中的按键修饰符有哪些"></a>Vue 中的按键修饰符有哪些</h1><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.esc</code></li><li><code>.delete</code> (捕获”删除”和”空格”键)</li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><h1 id="computed-和-watch-的区别"><a href="#computed-和-watch-的区别" class="headerlink" title="computed 和 watch 的区别"></a>computed 和 watch 的区别</h1><p>概念上:</p><p> <code>computed</code> 是计算属性，它会根据所依赖的数据动态显示新的计算结果，通过计算出来的属性不需要调用，可以直接在 DOM 中使用。</p><p><code>watch</code> 是监视对象，对象的键是 <strong>data</strong> 对应的数据，值是对应的回调函数，或者对象。</p><p>当 <strong>data</strong> 的数据发生变化，会执行对应的回调函数。</p><p>函数有两个参数：<code>val</code> (更新后的data数据)，<code>oldval</code>(原来的data数据)，<code>deep</code> 属性可以实现深度监听。</p><p>缓存上：</p><p><code>computed</code> 具有缓存属性，只有依赖的数据发生变化，才会重新计算，否则直接调用缓存。    </p><p><code>watch</code> 每次监听的值发生变化，都会执行回调。</p><p>使用场景上：</p><p><code>computed</code> 当一个属性受多个属性影响的时候，使用 <code>computed</code> 比如: 购物车商品结算。</p><p><code>watch</code> 当一条数据影响多条数据的时候，使用 <code>watch</code> 比如: 贷款金额的判断。</p><h1 id="v-for-中为什么要加-key，原理是什么"><a href="#v-for-中为什么要加-key，原理是什么" class="headerlink" title="v-for 中为什么要加 key，原理是什么"></a>v-for 中为什么要加 key，原理是什么</h1><p>原理:</p><ol><li>Vue 实现了一套虚拟 DOM，使我们可以不直接操作 DOM 元素，只操作数据就可以重新渲染页面。而隐藏在背后的原理是高效的 Diff算法。</li><li>当页面数据发生改变,Diff 算法只会比较同一层级的节点。<ol><li>如果节点类型不相同,直接干掉前面的节点,再创建并添加新的节点,不会再比较这个节点后面的子节点。</li><li>如果节点类型相同，则会重新设置该节点的属性，从而实现节点的更新。</li></ol></li><li>使用key给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点，”就地更新”找到正确的位置区插入新的节点。</li></ol><p>作用:</p><ol><li><p>高效的更新虚拟DOM，提高渲染的性能。</p></li><li><p>避免数据混乱的情况出现。</p></li></ol><h1 id="怎么理解-Vue-的生命周期"><a href="#怎么理解-Vue-的生命周期" class="headerlink" title="怎么理解 Vue 的生命周期"></a>怎么理解 Vue 的生命周期</h1><p>Vue 生命周期指的是：Vue 实例从创建到销毁的全过程，这个过程可以分为3个阶段：</p><ul><li>第一阶段: 初始化阶段，创建 Vue实例、准备数据、准备模板、渲染视图。</li><li>第二阶段: 数据更新阶段，当数据变化时，会进行新旧 DOM 的对比。对比出差异的部分，进行差异化更新。</li><li>第三阶段: 实例销毁阶段，当 <code>vm.$destroy()</code> 被调用时，Vue 实例就会被销毁，释放相关资源。此时在更新数据，视图不会再更新了。</li></ul><h1 id="Vue-钩子函数有哪些，有哪些使用的场景"><a href="#Vue-钩子函数有哪些，有哪些使用的场景" class="headerlink" title="Vue 钩子函数有哪些，有哪些使用的场景"></a>Vue 钩子函数有哪些，有哪些使用的场景</h1><p>初始化阶段：</p><ul><li><p><code>beforeCreate</code> 在 data 数据注入到 vm实例之前，此时 vm 身上没有数据。</p></li><li><p><code>created</code>  在 data 数据注入到 vm实例之前，此时 vm身上有数据。</p><blockquote><p>一般在此发生 ajax 获取服务器返回数据，用于渲染页面</p></blockquote></li><li><p><code>beforeMount</code> 在生成的结构替换视图之前，此时 DOM 还未更新。</p></li><li><p><code>mount</code>在生成的结构替换视图之前，此时 DOM 已经更新完成。</p><blockquote><p>此时，DOM 已经生成，在此进行 DOM 相关操作，例如：echarts 生成图表</p></blockquote></li></ul><p>数据更新阶段：</p><ul><li><code>beforeUpdate</code> 数据变化了，但是页面 DOM 还未更新，发生在 DOM 更新之前。</li><li><code>update</code> 数据变化了，页面 DOM 也更新了。</li></ul><p>实例销毁阶段：</p><ul><li><p><code>beforeDestroy</code> 实例销毁，释放资源之前。此时实例上的数据还可以拿到</p></li><li><p><code>destroy</code> 实例销毁，释放资源之后。</p><p>常用的钩子函数使用场景：</p></li><li><p><code>beforeCreate</code> 做 loading 的一些渲染</p></li><li><p><code>created</code>  结束 loading，发送数据的请求,拿数据</p></li><li><p><code>mounted</code>  可以操作 DOM 数据</p></li><li><p><code>updated </code> 监视数据的更新</p></li><li><p><code>beforeDestroy</code> 销毁非 Vue 资源，防止内存泄漏。例如：清除定时器，关闭 WebSocket 连接。</p></li></ul><h1 id="Vue-组件中-data-为什么必须是一个函数"><a href="#Vue-组件中-data-为什么必须是一个函数" class="headerlink" title="Vue 组件中 data 为什么必须是一个函数"></a>Vue 组件中 data 为什么必须是一个函数</h1><p>Vue 组件是可复用的 Vue 实例。</p><p>组件中的 data 写成一个函数，并且以函数返回值的形式定义。函数形成局部作用域，这样每次复用组件，就会返回一个新的 data。确保 data 数据的独立性，各个组件之间修改数据不会相互影响。</p><p>如果 data 使用对象，对象是引用类型。会导致复用组件中的 data 都指向了同一块内存，那么各组件的数据就会相互影响，不能保持独立性了。</p><h1 id="组件化和模块化的区别"><a href="#组件化和模块化的区别" class="headerlink" title="组件化和模块化的区别"></a>组件化和模块化的区别</h1><p>组件化: 主要是界面上的划分，是一个对于结构样式行为的整体拆分，方便调用和复用。</p><p>模块化: 主要从代码逻辑的角度进行划分，对 JS 功能的拆分和封装，方便代码分层开发。保证每个功能模块职责单一</p><p>组件化模块化优点：开发调试效率高、可维护性强、避免阻断、版本管理更容易。</p><h1 id="nextTick-的原理和使用的场景"><a href="#nextTick-的原理和使用的场景" class="headerlink" title="$nextTick 的原理和使用的场景"></a>$nextTick 的原理和使用的场景</h1><p>原理：</p><p>Vue 是异步执行 DOM 更新的，一旦观察到数据变化，Vue 就会开启一个队列。然后把在同一事件循环当中观察到数据变化的 watcher 推送进这个队列。</p><p>如果这个 watcher 被触发多次，只会被推送到队列一次，这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和 DOM 操作，这样可以提高渲染效率。</p><p>如果要获取更新后的 DOM 元素，可以使用 Vue 内置的 <code>$nextTick</code> 方法，参数是一个函数。</p><p>它的作用类似 <code>setTimeout</code>，进行执行异步的操作。</p><p>应用：</p><p>Vue 中的 <code>$nextTick</code>主要用于处理数据动态变化后，DOM 还未及时更新的问题，用 <code>$nextTick</code>可以获取数据更新后最新 DOM 的变化。</p><p>方法使用场景：</p><ol><li>第三方插件，在 Vue 生成的某些 DOM 动态发生变化时重新应用该插件。</li><li>视图更新之后，基于新的视图进行操作。</li></ol><h1 id="Vue-中组件通信的方式有哪些"><a href="#Vue-中组件通信的方式有哪些" class="headerlink" title="Vue 中组件通信的方式有哪些"></a>Vue 中组件通信的方式有哪些</h1><h2 id="一、props-emit"><a href="#一、props-emit" class="headerlink" title="一、props / $emit"></a>一、<code>props</code> / <code>$emit</code></h2><blockquote><p>父组件通过props的方式向子组件传递数据，而通过$emit 子组件可以向父组件通信。</p></blockquote><h3 id="父组件到子组件的通信-props"><a href="#父组件到子组件的通信-props" class="headerlink" title="父组件到子组件的通信 props"></a>父组件到子组件的通信 props</h3><blockquote><p>目的：将父组件中的 data 属性值传递给子组件使用</p><p>关键：通过 props 机制给子组件传值</p></blockquote><p>总结: props 只可以从上一级组件传递到下一级组件（父子组件），即所谓的单向数据流。而且 props 只读，不可被修改，所有修改都会失效并警告。</p><p><strong>子组件中，==data== 中的数据和 ==props== 中的数据的==区别==：</strong></p><ul><li>子组件中的 data 数据，并不是通过 父组件传递过来的，而是子组件自身私有的，比如： 子组件通过 Ajax ，请求回来的数据，都可以放到 data 身上。props 中的数据，都是通过 父组件传递给子组件的。</li></ul><ul><li>data中的数据是可读可写的；props中的属性只是可读的，无法重新赋值，重新赋值会报错（也就是说，子组件不要直接去修改父组件中的数据）。</li></ul><h3 id="子组件到父组件的通信-emit"><a href="#子组件到父组件的通信-emit" class="headerlink" title="子组件到父组件的通信 $emit"></a>子组件到父组件的通信 $emit</h3><blockquote><p>$emit 绑定一个自定义事件, 当这个语句被执行时, 就会将参数 arg 传递给父组件,父组件通过 v-on 监听并接收参数。 </p></blockquote><h2 id="二、-children-parent"><a href="#二、-children-parent" class="headerlink" title="二、 $children / $parent"></a>二、 <code>$children</code> / <code>$parent</code></h2><p>类型：<code>Vue instance</code></p><p>详细：</p><p>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 <code>this.$parent</code> 访问父实例，子实例被推入父实例的 <code>$children</code> 数组中。</p><blockquote><p>节制地使用 <code>$parent</code> 和 <code>$children</code> - 它们的主要目的是作为访问组件的应急方法。更推荐用 props 和 events 实现父子组件通信</p></blockquote><p>通过 <code>$parent</code> 和 <code>$children</code> 就可以访问组件的实例，拿到实例就可以访问此组件的所有方法和 data。</p><blockquote><p>要注意边界情况，如在 <code>#app</code> 上拿 <code>$parent</code> 得到的是 <code>new Vue()</code> 的实例，在这实例上再拿 <code>$parent</code> 得到的是 <code>undefined</code>，而在最底层的子组件拿 <code>$children</code> 是个空数组。也要注意得到 <code>$parent</code> 和 <code>$children</code> 的值不一样，<code>$children</code> 的值是数组，而 <code>$parent</code> 是个对象</p></blockquote><h2 id="三、provide-inject"><a href="#三、provide-inject" class="headerlink" title="三、provide / inject"></a>三、<code>provide</code> / <code>inject</code></h2><p><code>provide</code> / <code>inject</code> 是 Vue2.2.0 新增的 API, 简单来说就是父组件中通过 <code>provide</code> 来提供变量, 然后再子组件中通过 <code>inject</code> 来注入变量。</p><blockquote><p>注意: 这里不论子组件嵌套有多深, 只要调用了 <code>inject</code> 那么就可以注入 <code>provide</code> 中的数据，而不局限于只能从当前父组件的 <code>props</code> 属性中回去数据</p></blockquote><h2 id="四、ref-refs"><a href="#四、ref-refs" class="headerlink" title="四、ref / refs"></a>四、<code>ref</code> / <code>refs</code></h2><blockquote><p><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；</p><p><code>ref</code>：如果用在子组件上，引用就指向组件实例。</p><p>可以通过实例直接调用组件的方法或访问数据。</p></blockquote><p>尽管存在 prop 和事件，有的时候你仍可能需要在 JavaScript 里直接访问一个子组件。为了达到这个目的，你可以通过 <code>ref</code> 这个 attribute 为子组件赋予一个 ID 引用。例如：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;usernameInput&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base-input</span>&gt;</span></code></pre><p>现在在你已经定义了这个 <code>ref</code> 的组件里，你可以使用：</p><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$refs.usernameInput</code></pre><p>来访问这个 <code>&lt;base-input&gt;</code> 实例，以便不时之需。</p><p>比如程序化地从一个父级组件聚焦这个输入框。在刚才那个例子中，该 <code>&lt;base-input&gt;</code> 组件也可以使用一个类似的 <code>ref</code> 提供对内部这个指定元素的访问，例如：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span></code></pre><p>甚至可以通过其父级组件定义方法：</p><pre><code class="hljs js">methods: &#123;  <span class="hljs-comment">// 用来从父级组件聚焦输入框</span>  focus: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">this</span>.$refs.input.focus()  &#125;&#125;</code></pre><p>这样就允许父级组件通过下面的代码聚焦 <code>&lt;base-input&gt;</code> 里的输入框：</p><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$refs.usernameInput.focus()</code></pre><p>当 <code>ref</code> 和 <code>v-for</code> 一起使用的时候，你得到的 ref 将会是一个包含了对应数据源的这些子组件的数组。</p><blockquote><p><code>$refs</code> 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 <code>$refs</code>。</p></blockquote><h2 id="五、eventBus：-emit-on"><a href="#五、eventBus：-emit-on" class="headerlink" title="五、eventBus：$emit/$on"></a>五、eventBus：<code>$emit</code>/<code>$on</code></h2><p>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件,巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。</p><p>当我们的项目比较大时，可以选择更好的状态管理解决方案 vuex。</p><h2 id="六、Vuex"><a href="#六、Vuex" class="headerlink" title="六、Vuex"></a>六、Vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</p><p>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化.</p><p>Vuex 解决了多个视图依赖于同一状态和来自不同视图的行为需要变更同一状态的问题，将开发者的精力聚焦于数据的更新而不是数据在组件之间的传递上</p><p>Vuex 各个模块</p><ul><li>state：用于数据的存储，是store中的唯一数据源</li><li>getters：如vue中的计算属性一样，基于state数据的二次包装，常用于数据的筛选和多个数据的相关性计算</li><li>mutations：类似函数，改变state数据的唯一途径，且不能用于处理异步事件</li><li>actions：类似于mutation，用于提交mutation来改变状态，而不直接变更状态，可以包含任意异步操作</li><li>modules：类似于命名空间，用于项目中将各个模块的状态分开定义和操作，便于维护</li></ul><h2 id="七、localStorage-sessionStorage"><a href="#七、localStorage-sessionStorage" class="headerlink" title="七、localStorage / sessionStorage"></a>七、<code>localStorage</code> / <code>sessionStorage</code></h2><p>通过 <code>window.localStorage.getItem(key)</code> 获取数据 通过 <code>window.localStorage.setItem(key,value)</code> 存储数据</p><blockquote><p>注意用 <code>JSON.parse()</code> / <code>JSON.stringify()</code> 做数据格式转换<code>localStorage</code> / <code>sessionStorage</code>可以结合vuex, 实现数据的持久保存,同时使用vuex解决数据和状态混乱问题.</p></blockquote><h2 id="八、-attrs-listeners"><a href="#八、-attrs-listeners" class="headerlink" title="八、 $attrs / $listeners"></a>八、 <code>$attrs</code> / <code>$listeners</code></h2><blockquote><p>假如：A 组件与 D 组件是隔代关系，那它们之前进行通信有哪些方式呢？</p></blockquote><ol><li>使用<code>props</code>绑定来进行一级一级的信息传递, 如果 D 组件中状态改变需要传递数据给 A, 使用事件系统一级级往上传递</li><li>使用 eventBus ,这种情况下还是比较适合使用, 但是碰到多人合作开发时, 代码维护性较低, 可读性也低</li><li>使用 Vuex 来进行数据管理, 但是如果仅仅是传递数据, 而不做中间处理,使用 Vuex 处理感觉有点大材小用了</li></ol><p>在 vue2 .4中，为了解决该需求，引入了 <code>$attrs</code> 和 <code>$listeners</code> ， 新增了<code>inheritAttrs</code> 选项。 在版本 2.4 以前，默认情况下,父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)，将会“回退”且作为普通的HTML特性应用在子组件的根元素上。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>常见使用场景可以分为三类:</p><ul><li>父子组件通信: <code>props</code> ; <code>$parent</code> / <code>$children</code>; <code>provide</code> / <code>inject</code> ; <code>ref </code>; <code>$attrs</code> / <code>$listeners</code></li><li>兄弟组件通信: eventBus ; Vuex</li><li>跨级通信: eventBus; Vuex; <code>provide</code> / <code>inject</code> 、<code>$attrs</code> / <code>$listeners</code></li></ul><h1 id="怎么理解-Vue-中的虚拟-DOM"><a href="#怎么理解-Vue-中的虚拟-DOM" class="headerlink" title="怎么理解 Vue 中的虚拟 DOM"></a>怎么理解 Vue 中的虚拟 DOM</h1><p>虚拟 DOM 其实就是一颗以 JavaScript 对象(VNode)作为基础的树，用对象属性来描述阶段。</p><p>实际上它只是一层对真实 DOM 的抽象，最终可以通过一系列操作使这棵树映射到真实环境上。</p><p>简单理解可以把虚拟 DOM 理解为一个简单的 JS对象，并且最少包含标签名(tag)、属性(attrs)和子元素对象(children)三个属性。</p><p>不同的框架对这三个属性的命名会有点差别。Vue的虚拟 DOM 是将多次 DOM 操作保存在一个 JS对象(虚拟DOM对象)中，然后用这个 JS对象一次性的去更新 DOM 操作，这样就避免了很多无效的计算。</p><h1 id="vue-loader-是做什么的"><a href="#vue-loader-是做什么的" class="headerlink" title="vue-loader 是做什么的"></a>vue-loader 是做什么的</h1><p>概念：vue-loader是基于webpack 的一个loader，解析和转换.vue文件。</p><p>提取出其中的逻辑代码script，样式代码style，以及HTML模板template，再分别把他们交给对应的loader去处理。</p><p>用途：js可以写es6、style样式可以是less或scss等</p><h1 id="Vue-中怎么操作-dom"><a href="#Vue-中怎么操作-dom" class="headerlink" title="Vue 中怎么操作 dom"></a>Vue 中怎么操作 dom</h1><p>要在 <code>mounted</code> 中使用，在执行 <code>mounted</code> 的时候，Vue 已经渲染了 DOM 节点，可以获取 DOM 节点。</p><p>方法：</p><ol><li>在标签中添加<code>&lt;tag ref=&quot;name&quot;&gt;&lt;/tag&gt;</code></li><li>在方法中用<code>this.$refs.name</code>拿到这个元素</li></ol><h1 id="router-和-route-的区别"><a href="#router-和-route-的区别" class="headerlink" title="router 和 route 的区别"></a>router 和 route 的区别</h1><p>router 是VueRouter的实例，是一个全局的路由对象，它包含了所有的路由和许多关键的对象和属性。</p><p>route 是当前正在跳转的路由对象，是一个局部路由对象。里面包含当前路由的信息，比如：name、path、params、query 等</p><h1 id="路由传参的方式和区别"><a href="#路由传参的方式和区别" class="headerlink" title="路由传参的方式和区别"></a>路由传参的方式和区别</h1><p>方式：params 和 query</p><p>区别：</p><p>params 用的是 name，传递的参数在地址栏不会显示，类似于post</p><p>query 用的是 path，传递的参数会在地址栏显示出来，类似于get</p><h1 id="导航钩子有几种（导航守卫）具体怎么用的"><a href="#导航钩子有几种（导航守卫）具体怎么用的" class="headerlink" title="导航钩子有几种（导航守卫）具体怎么用的"></a>导航钩子有几种（导航守卫）具体怎么用的</h1><p>1、全局守卫： router.beforeEach</p><p>2、全局解析守卫： router.beforeResolve</p><p>3、全局后置钩子： router.afterEach</p><p>4、路由独享的守卫： beforeEnter</p><p>5、组件内的守卫： beforeRouteEnter、beforeRouteUpdate (2.2 新增)、beforeRouteLeave</p><p>使用：</p><p>1、全局守卫： router.beforeEach</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123; ... &#125;)router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<span class="hljs-comment">// ...</span>&#125;)</code></pre><p>2、全局解析守卫：</p><pre><code class="hljs js">router.beforeResolve(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<span class="hljs-comment">// ...</span>&#125;)</code></pre><p> 可以用 router.beforeResolve 注册一个全局守卫。这和 router.beforeEach 类似，区别是：在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。</p><p>3、全局后置钩子：router.afterEach</p><pre><code class="hljs js">router.afterEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<span class="hljs-comment">// ...</span>&#125;)</code></pre><p>4、路由独享的守卫：beforeEnter</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;routes: [    &#123;      path: <span class="hljs-string">&#x27;/foo&#x27;</span>,      component: Foo,      beforeEnter: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;        <span class="hljs-comment">// ...</span>      &#125;    &#125;]&#125;)</code></pre><p>5、组件内的守卫：</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> Foo = &#123;  template: <span class="hljs-string">`...`</span>,  beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;    <span class="hljs-comment">// 在渲染该组件的对应路由被 confirm 前调用</span>    <span class="hljs-comment">// 不能获取组件实例 this</span>    <span class="hljs-comment">// 因为当守卫执行前，组件实例还没被创建</span>  &#125;,  beforeRouteUpdate (to, <span class="hljs-keyword">from</span>, next) &#123;    <span class="hljs-comment">// 在当前路由改变，但是该组件被复用时调用</span>    <span class="hljs-comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>    <span class="hljs-comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>    <span class="hljs-comment">// 可以访问组件实例 this</span>  &#125;,  beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;    <span class="hljs-comment">// 导航离开该组件的对应路由时调用</span>    <span class="hljs-comment">// 可以访问组件实例 this</span>  &#125;&#125;</code></pre><h1 id="active-class-是哪个组件的属性？"><a href="#active-class-是哪个组件的属性？" class="headerlink" title="active-class 是哪个组件的属性？"></a>active-class 是哪个组件的属性？</h1><p>active-class 属于vue-router的样式方法，当 router-link 标签被点击时将会应用这个样式</p><p>active-class 是 vue-router 模块的 router-link 组件中的属性，用来做选中样式的切换；</p><p>在 vue-router 中要使用 active-class 有两种方法：</p><ol><li>直接在路由 js 文件中配置 linkActiveClass</li></ol><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;linkActiveClass: ‘active’,&#125;)</code></pre><ol start="2"><li>在 router-link 中写入active-class</li></ol><h1 id="keep-alive-的理解"><a href="#keep-alive-的理解" class="headerlink" title="keep-alive 的理解"></a>keep-alive 的理解</h1><p>1、keep-alive 是 Vue 的一个内置组件。Vue2.0 提供了一个 keep-alive 组件用来缓存组件，避免多次加载相应的组件，减少性能消耗。</p><p>2、它有两个生命周期：</p><p>activated: keep-alive 组件激活时调用。</p><p>deactivated: keep-alive 组件停用时调用。</p><p>它提供了 include 与 exclude 两个属性，允许组件有条件地进行缓存。</p><p>原理：<br>Vue 内部将 DOM 节点抽象成了一个个的 VNode(虚拟DOM)节点。所以，keep-alive 的缓存也是基于 VNode 节点的而不是直接存储DOM结构。</p><p>其实就是将需要缓存的 VNode 节点保存在 this.cache 中，在 render 时,如果 VNode 的 name 符合在缓存条件（可以用 include 以及 exclude 控制），则会从 this.cache 中取出之前缓存的 VNode 实例进行渲染。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《温故而知新》JavaScript</title>
    <link href="/2020/12/05/%E3%80%8A%E6%B8%A9JS%E7%9F%A5%E6%96%B0%E3%80%8B/"/>
    <url>/2020/12/05/%E3%80%8A%E6%B8%A9JS%E7%9F%A5%E6%96%B0%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-细枝末节的知识"><a href="#JavaScript-细枝末节的知识" class="headerlink" title="JavaScript 细枝末节的知识"></a>JavaScript 细枝末节的知识</h1><blockquote><p>总结细小的 JavaScript 知识、以回答面试题的形式巩固</p></blockquote><h1 id="伪数组和真数组的区别"><a href="#伪数组和真数组的区别" class="headerlink" title="伪数组和真数组的区别"></a>伪数组和真数组的区别</h1><p>伪数组：</p><ol><li>拥有 <code>length</code> 属性</li><li>不具有数组的方法</li><li>伪数组是一个 <strong>Object</strong>，真数组是 <strong>Array</strong></li><li>伪数组的长度不可变，真数组的长度是可变的</li></ol><blockquote><p>只有数组属性，但没有数组方法</p></blockquote><h1 id="哪些情况会得到伪数组"><a href="#哪些情况会得到伪数组" class="headerlink" title="哪些情况会得到伪数组"></a>哪些情况会得到伪数组</h1><ol><li>函数参数对象 <code>arguments</code></li><li><strong>DOM</strong> 对象列表（比如通过<code>document.getElementsByTags</code> 得到的列表）、<code>childNodes</code> 也是伪数组</li><li><strong>jQuery</strong> 对象（比如 <code>$(&#39;div&#39;)</code>）</li></ol><h1 id="伪数组怎么转换为真数组"><a href="#伪数组怎么转换为真数组" class="headerlink" title="伪数组怎么转换为真数组"></a>伪数组怎么转换为真数组</h1><ol><li>通过 <code>Array.prototype.slice.call()</code> 方法</li><li>使用 ES6 的新方法：<code>Array.from()</code></li><li>通过 ES6 的新语法扩展运算符：<code>[...伪数组]</code></li></ol><h1 id="let、const、var的区别"><a href="#let、const、var的区别" class="headerlink" title="let、const、var的区别"></a>let、const、var的区别</h1><ol><li><code>var</code> 声明变量存在提升（提升当前作用域最顶端），<code>let</code> 和 <code>const</code> 是不存在变量提升的情况</li><li><code>var</code> 没有块级作用，<code>let</code> 和 <code>const</code> 存在块级作用域</li><li><code>var</code> 允许重复声明，<code>let</code> 和 <code>const</code> 在同一作用域不允许重复声明</li><li><code>var</code> 和 <code>let</code> 声明变量可以修改，<code>const</code> 是常量不能改变</li></ol><h1 id="异步函数有哪些"><a href="#异步函数有哪些" class="headerlink" title="异步函数有哪些?"></a>异步函数有哪些?</h1><p>JavaScript 中常见的异步函数有：定时器(<code>setTimeout</code> 、<code>setInterval</code>)，事件和 ajax 等</p><h1 id="什么是-Promise，特点是什么"><a href="#什么是-Promise，特点是什么" class="headerlink" title="什么是 Promise，特点是什么?"></a>什么是 Promise，特点是什么?</h1><p><strong>Promise</strong> 是 JavaScript ES5 提出的解决异步任务的新方案。</p><p>它是一个对象，它其他 JavaScript 对象的用法，没有什么两样；其次，它起到代理作用（proxy），充当异步操作与回调函数之间的中介。它使得异步操作具备同步操作的效果，使得程序具备正常的同步运行的流程，回调函数不必再一层层嵌套。</p><p>简单说，它的思想是，每一个异步任务立刻返回一个 <strong>Promise</strong> 对象，由于是立刻返回，所以可以采用同步操作的流程。这个 <strong>Promise</strong> 对象有一个 <strong>then</strong> 方法，允许指定回调函数，在异步任务完成后调用。</p><p>特点：</p><ol><li><p>Promise 对象只有三种状态。</p><ol><li><p>异步操作“未完成”（<strong>pending</strong>）</p></li><li><p>异步操作“已完成”（<strong>resolved</strong>，又称 <strong>fulfilled</strong>）</p></li><li><p>异步操作“失败”（<strong>rejected</strong>）</p></li></ol><blockquote><p>异步操作成功，Promise对象传回一个值，状态变为resolved。</p></blockquote><blockquote><p>异步操作失败，Promise对象抛出一个错误，状态变为rejected。</p></blockquote></li><li><p>Promise 的回调是同步的，then 是异步的</p></li><li><p>可以链式调用</p></li></ol><h1 id="Promise-的方法有哪些，能说明其作用"><a href="#Promise-的方法有哪些，能说明其作用" class="headerlink" title="Promise 的方法有哪些，能说明其作用"></a>Promise 的方法有哪些，能说明其作用</h1><p>原型方法：</p><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.then()</code></pre><p>作用:</p><ol><li><p>为 <strong>Promise</strong> 实例添加状态改变时的回调函数。接受两个回调函数作为参数。第一个回调函数是 <strong>Promise</strong> 对象的状态变为 <code>resolved</code> 时调用，第二个回调函数是 <strong>Promise</strong> 对象的状态变为 <code>rejected</code> 时调用。其中，第二个函数是可选的，不一定要提供。</p></li><li><p>返回的是另一个 <strong>Promise</strong> 对象，后面还可以接着调用 <code>then</code> 方法。</p></li></ol><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.catch()</code></pre><p>作用:</p><ol><li>用于指定发生错误时的回调函数。</li><li>返回的也是一个 <strong>Promise</strong> 对象，因此还可以接着调用 <code>then</code> 方法</li></ol><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.prototype.finally()</code></pre><p>作用:</p><ol><li><code>finally</code> 方法用于指定不管 <strong>Promise</strong> 对象最后状态如何，都会执行的回调函数。</li><li><code>finally</code> 方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 <strong>Promise</strong> 状态到底是 <code>fulfilled</code> 还是 <code>rejected</code>。</li></ol><p>实例方法：</p><pre><code class="hljs js">promise.resolve()</code></pre><p>作用：</p><ol><li>不带参数传递，返回一个新的状态为 <code>resolve</code> 的 <strong>Promise</strong> 对象</li><li>参数是一个 <strong>Promise</strong> 实例，返回当前的 <strong>promise</strong> 实例</li></ol><pre><code class="hljs js">promise.reject()</code></pre><p>作用：</p><ol><li>返回的是一个值</li><li>返回的值会传递到下一个 <code>then</code> 的 <code>resolve</code> 方法参数中</li></ol><pre><code class="hljs js">promise.all()</code></pre><ol><li>并行执行异步操作的能力</li><li>所有异步操作执行完后才执行回调</li></ol><pre><code class="hljs js">promise.race()</code></pre><p>作用：</p><ol><li>哪个结果最先返回来的，最后就是那个结果，不管结果是成功还是失败</li></ol><h1 id="async-和-await-是干什么的"><a href="#async-和-await-是干什么的" class="headerlink" title="async 和 await 是干什么的"></a>async 和 await 是干什么的</h1><p>async、await 是异步的终极解决方案</p><p>async/await 就是一个<strong>自执行</strong>的 <em>generator</em>  函数。利用 <em>generator</em>  函数的特性把异步的代码写成“同步”的形式。</p><p><strong>生成器函数</strong>在执行时能暂停，后面又能从暂停处继续执行。</p><p>调用一个<strong>生成器函数</strong>并不会马上执行它里面的语句，而是返回一个这个生成器的 <strong>迭代器</strong> <strong>（ iterator）对象</strong>。当这个迭代器的 <code>next() </code>方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现<code>yield</code>的位置为止，<code>yield</code>后紧跟迭代器要返回的值。或者如果用的是 <code>yield*</code>)（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。</p><p><strong>优点是：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题。async 相比于 Generator内置了执行器，拥有更好的语义化</strong> </p><p><strong>缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。</strong></p><h1 id="typeof-返回的数据类型"><a href="#typeof-返回的数据类型" class="headerlink" title="typeof 返回的数据类型"></a>typeof 返回的数据类型</h1><pre><code class="hljs js"><span class="hljs-comment">//1.number</span><span class="hljs-keyword">typeof</span>(<span class="hljs-number">10</span>);<span class="hljs-keyword">typeof</span>(<span class="hljs-literal">NaN</span>);<span class="hljs-comment">//NaN在JavaScript中代表的是特殊非数字值,它本身是一个数字类型。</span><span class="hljs-keyword">typeof</span>(<span class="hljs-literal">Infinity</span>);<span class="hljs-comment">//2.boolean</span><span class="hljs-keyword">typeof</span>(<span class="hljs-literal">true</span>);<span class="hljs-keyword">typeof</span>(<span class="hljs-literal">false</span>);<span class="hljs-comment">//3.string</span><span class="hljs-keyword">typeof</span>(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">//4.undefined</span><span class="hljs-keyword">typeof</span>(<span class="hljs-literal">undefined</span>);<span class="hljs-keyword">typeof</span>(a);<span class="hljs-comment">//不存在的变量</span><span class="hljs-comment">//5.object</span><span class="hljs-comment">//对象，数组，null返回object</span><span class="hljs-keyword">typeof</span>(<span class="hljs-literal">null</span>);<span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">window</span>);<span class="hljs-comment">//6.function</span><span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">Array</span>);<span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">Date</span>);<span class="hljs-comment">//7.symbol</span><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>() <span class="hljs-comment">// ES6提供的新的类型</span></code></pre><h1 id="返回-false-的情况有哪些"><a href="#返回-false-的情况有哪些" class="headerlink" title="返回 false 的情况有哪些"></a>返回 false 的情况有哪些</h1><pre><code class="hljs js"><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">//空字符</span><span class="hljs-number">0</span><span class="hljs-literal">NaN</span>underfind<span class="hljs-literal">null</span><span class="hljs-literal">false</span></code></pre><p>还有表达式不成立的情况</p><h1 id="对-this-的理解"><a href="#对-this-的理解" class="headerlink" title="对 this 的理解"></a>对 this 的理解</h1><p><strong>「<code>this</code> 是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。」</strong></p><p><code>this</code> 指的是，<strong>调用函数的那个对象(执行上下文)</strong> 。<code>this</code> 永远指向函数运行时所在的对象。</p><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是 <code>this</code>。</p><p>根据函数的调用方式的不同，<code>this</code> 会指向不同的对象：</p><ul><li><p>以函数的形式调用时，<code>this</code> 永远都是 <strong>window</strong>。比如：<code>fun()</code> 相当于  <code>window.fun()</code></p></li><li><p>以方法的形式调用时，<code>this</code> 是调用方法的那个对象。</p></li><li><p>以构造函数的形式调用时，<code>this</code> 是新创建的那个对象。</p></li><li><p>使用 <code>call</code> 和 <code>apply</code> 调用时，<code>this</code> 是指定的那个对象。</p></li></ul><p>需要特别提醒的是：<code>this</code> 的指向在函数定义时无法确认，只有函数执行时才能确定。</p><p><code>this</code> 的几种场景：</p><ul><li>作为「构造函数」执行</li><li>作为「对象的属性」执行</li><li>作为「普通函数」执行</li><li><code>call</code>、<code>apply</code>、<code>bind</code></li></ul><h1 id="new-操作符做了什么"><a href="#new-操作符做了什么" class="headerlink" title="new 操作符做了什么"></a>new 操作符做了什么</h1><ol><li>在创建一个新对象出来 (开辟一块新内存)<ol start="2"><li><code>this</code> 指向这个新对象</li><li>执行构造函数的代码（给 <code>this</code> 添加属性）</li><li>会返回这个新对象</li></ol></li></ol><h1 id="什么是深拷贝什么是浅拷贝"><a href="#什么是深拷贝什么是浅拷贝" class="headerlink" title="什么是深拷贝什么是浅拷贝"></a>什么是深拷贝什么是浅拷贝</h1><p>浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><p>深拷贝是将一个对象从内存中完整的拷贝一份出来，从堆内存中开辟一个新的区域存放新对象，且修改新对象不会影响原对象。</p><h1 id="对闭包的理解？并能举出闭包的例子"><a href="#对闭包的理解？并能举出闭包的例子" class="headerlink" title="对闭包的理解？并能举出闭包的例子"></a>对闭包的理解？并能举出闭包的例子</h1><p>闭包（closure）：指有权<strong>访问</strong>另一个函数作用域中<strong>变量</strong>的<strong>函数</strong>。</p><p>简单理解就是：如果<strong>这个作用域可以访问另外一个函数内部的局部变量</strong>，那就产生了闭包;而另外那个作用域所在的函数称之为<strong>闭包函数</strong>。</p><p>注意，这里强调的是访问<strong>局部变量</strong>。</p><p>闭包的形成条件: 至少两个函数，并且是嵌套关系。而且内部函数需要访问外部函数的局部变量。</p><p>闭包的作用：</p><ol><li>保护数据（私有变量）的安全</li><li>持久化维持数据</li><li>实现模块化</li></ol><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(a);    &#125;    <span class="hljs-keyword">return</span> fn2;&#125;<span class="hljs-keyword">const</span> foo = fn1(); <span class="hljs-comment">// 执行 fn1() 之后，会得到一个返回值。foo 代表的就是 fn2 函数</span>foo();</code></pre><p>一般来说，在 fn1 函数执行完毕后，它里面的变量 a 会立即销毁。</p><p>但此时由于产生了闭包，所以 <strong>fn1 函数中的变量 a 不会立即销毁，因为 fn2 函数还要继续调用变量 a</strong>。只有等所有函数把变量 a 调用完了，变量 a 才会销毁。</p><h1 id="什么是原型和原型链"><a href="#什么是原型和原型链" class="headerlink" title="什么是原型和原型链?"></a>什么是原型和原型链?</h1><p>JavaScript 只有一种结构：对象。</p><p>每个实例对象（ object ）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的构造函数的原型对象（<code>prototype</code>）。</p><p>该原型对象也有一个自己的原型对象( <code>__proto__</code> ) ，层层向上直到一个对象的原型对象为 <code>null</code>。</p><p>根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p><p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 <code>Object</code> 的实例。</p><h1 id="什么是事件流"><a href="#什么是事件流" class="headerlink" title="什么是事件流"></a>什么是事件流</h1><p><strong>事件流</strong><br>当一个 HTML 元素产生一个事件时，该事件会在元素节点与根结点之间的路径传播，路径所经过的结点都会收到该事件，这个传播过程可称为DOM事件流。</p><p>简单地说：事件流就是描述页面中接收事件的顺序。其包含三个阶段：</p><ul><li>事件捕获：事件从 Document 节点自上而下向目标节点传播的阶段；</li><li>目标阶段：真正的目标节点正在处理事件的阶段；</li><li>事件冒泡：事件从目标节点自下而上向 Document 节点传播的阶段。</li></ul><p>在整个事件流的任何位置通过调用事件对象的 <code>stopPropagation()</code> 方法可以停止事件的传播过程。</p><p>DOM 同时支持两种事件模型：</p><p>捕获型事件(事件句柄在捕获阶段执行) 和 冒泡型事件(事件句柄在冒泡阶段执行) 。现在主流的是冒泡事件。</p><h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><p><strong>防抖</strong> （debounce）：防抖，顾名思义，防止抖动，以免把一次事件误认为多次，敲键盘就是一个每天都会接触到的防抖操作。</p><p>防抖适用场景：</p><ol><li>登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li><li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li><li>文本编辑器实时保存，当无任何更改操作一秒后进行保存</li></ol><p>可以看出来<strong>防抖重在清零 <code>clearTimeout(timer)</code></strong></p><p>代码：</p><pre><code class="hljs js"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> <span class="hljs-variable">fn</span></span></span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> <span class="hljs-variable">wait</span></span></span><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;Function&#125;</span></span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;    <span class="hljs-keyword">let</span> timer;    <span class="hljs-comment">// 箭头函数始终指向上一层 this</span>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;        <span class="hljs-comment">// 使用闭包 timer持久化</span>        <span class="hljs-built_in">clearTimeout</span>(timer);        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;            fn(...args);        &#125;, wait);    &#125;;&#125;</code></pre><p><strong>节流</strong>（throttle）：节流，顾名思义，控制水的流量。控制事件发生的频率，如控制为1s发生一次，甚至1分钟发生一次。与服务端(server)及网关(gateway)控制的限流 (Rate Limit) 类似。</p><p>节流适用场景：</p><ol><li><code>scroll</code> 事件，每隔一秒计算一次位置信息等</li><li>浏览器播放事件，每个一秒计算一次进度信息等</li><li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求 (也可做防抖)</li></ol><p>可以看出来<strong>节流重在加锁 <code>timer=timeout</code></strong></p><p>代码：</p><pre><code class="hljs js"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> <span class="hljs-variable">fn</span></span></span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> <span class="hljs-variable">wait</span></span></span><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;Function&#125;</span> </span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;    <span class="hljs-keyword">let</span> timer;    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (timer) <span class="hljs-keyword">return</span>;        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;            fn(...args);            timer = <span class="hljs-literal">null</span>;        &#125;,wait);    &#125;;&#125;</code></pre><h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p><strong>浅拷贝:</strong></p><p>拷贝对象的一层属性，如果对象里面还有对象，拷贝的是地址，两者之间修改会有影响，适用于对象里面属性的值是简单数据类型的。</p><p><strong>深拷贝:</strong></p><p>拷贝对象的多层属性，如果对象里面还有对象，会继续拷贝并创建一个一摸一样的对象，不共享内存，修改新对象，旧对象保持不变。</p><h2 id="深拷贝和浅拷贝的区别："><a href="#深拷贝和浅拷贝的区别：" class="headerlink" title="深拷贝和浅拷贝的区别："></a>深拷贝和浅拷贝的区别：</h2><p>浅拷贝（shallow copy）：只复制指向某个对象的指针，而不复制对象本身，新旧对象共享一块内存；   </p><p>深拷贝（deep copy）：复制并创建一个一摸一样的对象，不共享内存，修改新对象，旧对象保持不变.</p><h2 id="浅拷贝实现："><a href="#浅拷贝实现：" class="headerlink" title="浅拷贝实现："></a>浅拷贝实现：</h2><h3 id="1、使用-赋值"><a href="#1、使用-赋值" class="headerlink" title="1、使用 = 赋值"></a>1、使用 <code>=</code> 赋值</h3><pre><code class="hljs js"><span class="hljs-comment">//浅拷贝: </span><span class="hljs-keyword">var</span> obj = &#123;    class: &#x27;UI&#x27;,    age: <span class="hljs-number">20</span>,    love: <span class="hljs-string">&#x27;eat&#x27;</span>,&#125;;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getObj</span>(<span class="hljs-params">obj</span>) </span>&#123;    <span class="hljs-keyword">var</span> newObj = &#123;&#125;;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj) &#123;        newObj[k] = obj[k];    &#125;    <span class="hljs-keyword">return</span> newObj;&#125;<span class="hljs-keyword">var</span> obj2 = getObj(obj);<span class="hljs-built_in">console</span>.log(obj2);</code></pre><h3 id="2、Object-assign-target-sources"><a href="#2、Object-assign-target-sources" class="headerlink" title="2、Object.assign(target,...sources)"></a>2、<code>Object.assign(target,...sources)</code></h3><blockquote><p>Object.assign是ES6的新函数。</p></blockquote><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p><p>但是 Object.assign() 进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。</p><p>参数：</p><ul><li>target：目标对象。</li><li>sources：任意多个源对象。</li><li>返回值：目标对象会被返回。</li></ul><p>需要注意的是：<br><code>Object.assign()</code>可以处理一层的深度拷贝，如下：</p><blockquote><p>其实是简单类型存储的是具体的数值，本方法还是只拷贝了一层数据</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">30</span> &#125;;<span class="hljs-keyword">var</span> obj2 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj1);obj2.b = <span class="hljs-number">100</span>;<span class="hljs-built_in">console</span>.log(obj1);<span class="hljs-comment">// &#123; a: 10, b: 20, c: 30 &#125; &lt;-- 沒被改到</span><span class="hljs-built_in">console</span>.log(obj2);<span class="hljs-comment">// &#123; a: 10, b: 100, c: 30 &#125;</span></code></pre><h2 id="深拷贝实现："><a href="#深拷贝实现：" class="headerlink" title="深拷贝实现："></a>深拷贝实现：</h2><h3 id="1、手动复制"><a href="#1、手动复制" class="headerlink" title="1、手动复制"></a>1、手动复制</h3><blockquote><p>笨、效率低下，某些情况下可以，如：临时需要、只需要一个副本，拷贝的对象属性不多</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">30</span> &#125;;<span class="hljs-keyword">var</span> obj2 = &#123; <span class="hljs-attr">a</span>: obj1.a, <span class="hljs-attr">b</span>: obj1.b, <span class="hljs-attr">c</span>: obj1.c &#125;;obj2.b = <span class="hljs-number">100</span>;<span class="hljs-built_in">console</span>.log(obj1);<span class="hljs-comment">// &#123; a: 10, b: 20, c: 30 &#125; &lt;-- 沒被改到</span><span class="hljs-built_in">console</span>.log(obj2);<span class="hljs-comment">// &#123; a: 10, b: 100, c: 30 &#125;</span></code></pre><h2 id="2、JSON-做字符串转换"><a href="#2、JSON-做字符串转换" class="headerlink" title="2、JSON 做字符串转换"></a>2、JSON 做字符串转换</h2><blockquote><p>用<code>JSON.stringify()</code>把对象转成字符串，再用<code>JSON.parse()</code>把字符串转成新的对象。</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123; <span class="hljs-attr">body</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span> &#125; &#125;;<span class="hljs-keyword">var</span> obj2 = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj1));obj2.body.a = <span class="hljs-number">20</span>;<span class="hljs-built_in">console</span>.log(obj1);<span class="hljs-comment">// &#123; body: &#123; a: 10 &#125; &#125; &lt;-- 沒被改到</span><span class="hljs-built_in">console</span>.log(obj2);<span class="hljs-comment">// &#123; body: &#123; a: 20 &#125; &#125;</span><span class="hljs-built_in">console</span>.log(obj1 === obj2);<span class="hljs-comment">// false</span><span class="hljs-built_in">console</span>.log(obj1.body === obj2.body);<span class="hljs-comment">// false</span></code></pre><p>这样做是真正的Deep Copy，这种方法简单易用。</p><p>但是这种方法也有很多的缺点：</p><ol><li>它会抛弃对象的 <code>constructor</code>，深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成<code>Object</code>。</li><li>只能正确处理 <code>Number</code>, <code>String</code> , <code>Boolean</code> , <code>Array</code> , 扁平对象，即那些能够被 JSON直接表示的数据结构。<code>RegExp</code> 对象是无法通过这种方式深拷贝，只有可以转成 JSON 格式的对象才可以这样用，像 <code>function</code>没办法转成 JSON</li></ol><h2 id="3、递归拷贝"><a href="#3、递归拷贝" class="headerlink" title="3、递归拷贝"></a>3、递归拷贝</h2><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">initalObj, finalObj=&#123;&#125;</span>) </span>&#123;      <span class="hljs-keyword">var</span> obj = finalObj;      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> initalObj) &#123;            <span class="hljs-keyword">var</span> prop = initalObj[i];        <span class="hljs-comment">// 避免相互引用对象导致死循环，如initalObj.a = initalObj的情况</span>    <span class="hljs-keyword">if</span>(prop === obj) &#123;                  <span class="hljs-keyword">continue</span>;    &#125;            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> prop === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;      obj[i] = (prop.constructor === <span class="hljs-built_in">Array</span>) ? [] : &#123;&#125;;                  <span class="hljs-built_in">arguments</span>.callee(prop, obj[i]);    &#125; <span class="hljs-keyword">else</span> &#123;      obj[i] = prop;    &#125;  &#125;      <span class="hljs-keyword">return</span> obj;&#125;<span class="hljs-keyword">var</span> str = &#123;&#125;;<span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">a</span>: &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">21</span>&#125; &#125;;deepClone(obj, str);<span class="hljs-built_in">console</span>.log(str.a);</code></pre><h2 id="4、使用Object-create-方法"><a href="#4、使用Object-create-方法" class="headerlink" title="4、使用Object.create()方法"></a>4、使用<code>Object.create()</code>方法</h2><p>直接使用<code>var newObj = Object.create(oldObj)</code>，可以达到深拷贝的效果。</p><h2 id="5、jquery"><a href="#5、jquery" class="headerlink" title="5、jquery"></a>5、jquery</h2><blockquote><p>jquery 有提供一个$.extend可以用来做 Deep Copy。</p></blockquote><h2 id="6、第三方函数"><a href="#6、第三方函数" class="headerlink" title="6、第三方函数"></a>6、第三方函数</h2><blockquote><p>还有一些其它的第三方函数库有深拷贝function，如lodash。</p></blockquote><h1 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h1><ul><li>后退按钮/刷新<ul><li>GET 不会重新提交是无害</li><li>POST 数据会被重新提交</li></ul></li><li>书签<ul><li>GET请求 可以被收藏为书简</li><li>POST请求 不可以被收藏为书签</li></ul></li><li>缓存<ul><li>GET 请求能被缓存</li><li>POST 请求不能缓存</li></ul></li><li>编码类型<ul><li>GET 只支持application/x-www-form-urlencoded</li><li>POST 不光支持查询字符串的编码还支持 二进制数据 FormDate的编码</li></ul></li><li>历史<ul><li>GET 参数会被保存在浏览器历史中</li><li>POST 参数不会被保存在浏览器历史中</li></ul></li><li>对数据长度限制<ul><li>GET方法向URL添加数据，URL长度是受限制的，为2048个字符</li><li>POST没有限制</li></ul></li><li>对数据类型限制<ul><li>GET 只允许 ASCII 字符。</li><li>POST 没有限制，也允许二进制数据</li></ul></li><li>安全性<ul><li>GET安全性差 数据在URL可见</li><li>POST安全性比GET好</li></ul></li></ul><p>从标准上来看，GET 和 POST 的区别如下：</p><ul><li>GET 用于获取信息，是无副作用的，是幂等的，且可缓存</li><li>POST 用于修改服务器上的数据，有副作用，非幂等，不可缓存</li></ul><h1 id="HTTP-的状态码有哪些"><a href="#HTTP-的状态码有哪些" class="headerlink" title="HTTP 的状态码有哪些"></a>HTTP 的状态码有哪些</h1><p>常见的HTTP状态码:</p><ul><li>200 - 请求成功</li><li>301 - 永久重定向</li><li>404 - 客户端请求的语法错误，服务器无法理解</li><li>500 - 服务器端在执行时发生错误，无法完成请求</li></ul><h1 id="JSONP-的原理？以及优缺点"><a href="#JSONP-的原理？以及优缺点" class="headerlink" title="JSONP 的原理？以及优缺点"></a>JSONP 的原理？以及优缺点</h1><p>JSONP 的原理</p><p>由于同源策略不会阻止动态脚本的插入到文档中去</p><p>JSONP（即 json + padding）动态创建 script 标签利用 script 标签的 src 属性可以获取任何域下的 JS 脚本，通过这个特性服务器端不在返回 json 格式，而是返回一段调用某个函数的 JS 代码，在 src 中进行了调用，这样实现了跨域。</p><p>JSONP 优点:</p><p>由于JSONP对于老浏览器兼容性方面比较良好，因此，对于那些对IE8以下仍然需要支持的网站来说，仍然被广泛应用。不过，针对高级浏览器，建议还是用CORS 方法。</p><p>JSONP缺点:</p><ol><li><p>首先，它没有关于 JSONP 调用的错误处理，一旦回调函数调用失败，浏览器会以静默失败的方式处理。</p></li><li><p>其次，它只支持 GET 请求，这是由于该技术本身的特性所决定的。因此，对于一些需要对安全性有要求的跨域请求，JSONP 的使用需要谨慎一点了。</p></li><li><p>JSONP 不支持用 <code>async:false</code> 的方法设置同步。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 双向数据绑定</title>
    <link href="/2020/11/30/Vue%20%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <url>/2020/11/30/Vue%20%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h1><p>Vue 在3.0版本之前是利用了 JavaScript ES5 提供的元编程接口 <code>Object.defineProperty</code>进行数据劫持，从而将数据变成了「响应式」的。</p><p>基于「响应式数据」实现了<code>MVVM</code> 数据双向绑定，所谓<code>MVVM</code> 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。</p><h2 id="Object-defineProperty-的作用"><a href="#Object-defineProperty-的作用" class="headerlink" title="Object.defineProperty 的作用"></a>Object.defineProperty 的作用</h2><p>Vue 2.X 的数据双向绑定都是依据 <code>Object.defineProperty()</code>这一方法来做的</p><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(obj, prop, descriptor)</code></pre><p><code>Object.defineProperty</code> 方法接收三个参数：</p><ul><li><p><strong>obj</strong></p><p>要定义属性的对象。</p></li><li><p><strong>prop</strong></p><p>要定义或修改的属性的名称或 <code>Symbol</code> 。</p></li><li><p><strong>descriptor</strong></p><p>要定义或修改的属性描述符。</p></li></ul><p>返回值：</p><p>被传递给函数的对象。</p><hr><p>通过这个方法我们可以进行，JavaScript 语言级别的编程（即：对 JavaScript 语言进行编程，使其一些原生的操作可以按我们的逻辑进行执行）。</p><p>简单的说就是可以用这个方法，对一个对象的某个属性的描述符进行定义。</p><p>Vue 进行数据劫持将数据变为响应式的就使用到了描述符当中的 <code>getter</code> 和 <code>setter</code>。</p><ul><li><p><code>get</code>: 当查找某个对象属性时，该对象属性将会与被调用函数绑定。</p></li><li><p><code>set</code>: 当试图设置该属性时，对象属性与被调用函数绑定。</p></li></ul><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;  name: <span class="hljs-string">&#x27;playlife&#x27;</span>,  age: <span class="hljs-number">23</span>&#125;obj.age <span class="hljs-comment">//23</span>obj.age = <span class="hljs-number">18</span></code></pre><p>像代码中的两个操作：读取和赋值，就是在访问 <code>obj.age</code> 的 <code>getter</code> 和 <code>setter</code>。</p><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;age&#x27;</span>, &#123;  get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">18</span> <span class="hljs-comment">//永远18岁</span>  &#125;,  set: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newValue</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;不让你设置&#x27;</span>, newValue)  &#125;&#125;)<span class="hljs-built_in">console</span>.log(obj.age)<span class="hljs-comment">//18</span>obj.age = <span class="hljs-number">1</span><span class="hljs-comment">//不让你设置 1</span></code></pre><p><code>getter</code> 和 <code>setter</code> 都是方法函数，所以可以这么写</p><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;age&#x27;</span>, &#123;  get() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">18</span>  &#125;,  set(newValue) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;不让你设置&#x27;</span>, newValue)  &#125;&#125;)</code></pre><p>Vue 的「双向数据绑定」就是根据上面的原理来实现的。</p><p>只要在读取值时收集「观察者」在赋值时触发「观察者的更新函数」就可以实现数据变更，从而实现 DOM 重新渲染。</p><h1 id="Vue-实现双向数据绑定"><a href="#Vue-实现双向数据绑定" class="headerlink" title="Vue 实现双向数据绑定"></a>Vue 实现双向数据绑定</h1><p>在Vue主线里和数据双向绑定有关的有以下几个模块</p><ul><li>Vue 构造函数 <code>new Vue()</code></li><li>观察者 <code>observer</code></li><li>观察者 <code>watcher</code></li><li>指令系统 <code>directive类</code>和<code>directives指令函数</code>集合</li><li>DOM 解析 <code>compile</code></li><li><code>watcher</code> 与 <code>observer</code> 之间的联系者 <code>dep</code></li></ul><p><img src="/images/vue-mvvm.jpg" alt="vue-mvvm"></p><p>结合以上 Vue 源码各模块函数关系图来复述一个 Vue的实现过程：</p><h2 id="实例化之前"><a href="#实例化之前" class="headerlink" title="实例化之前"></a>实例化之前</h2><p>在引入Vue文件时 Vue本身会有几个类函数和一个处理函数集合</p><ul><li>observer</li><li>watcher</li><li>dep</li><li>directive</li><li>directives </li></ul><h2 id="实例化过程"><a href="#实例化过程" class="headerlink" title="实例化过程"></a>实例化过程</h2><p>首先会调用 <code>initData()</code>  <code>initMethods()</code>等一系列方法，将数据挂载到 Vue实例上。这样就可以通过 <code>vm.xxx</code> 或者 <code>vm.$xxx</code>直接读取数据和调用函数。</p><p>接下来会调用<code>observe(data)</code>对数据进行监听。其实就是使用<code>Object.defineProperty()</code>方法，对每一个 <strong>key</strong> 都建立一个 <code>dep</code>实例。</p><p>并且在 <code>getter</code>和<code>setter</code>作了一些设置，当访问这一个 <code>key</code> 的 <code>getter</code>就会触发 <code>getter</code> 函数里的 <code>dep.depend</code>方法收集依赖 (<code>watcher</code>实例)。 </p><p>当对这一个 <strong>key</strong> 赋值时：就会触发<code>setter</code> 里的 <code>dep.notify</code>方法，通知 <code>dep</code> 收集的所有 <code>watcher</code>实例调用<code>update</code>方法进行更新。<code>dep</code> 有一个 <code>watcher</code>实例数组，触发更新遍历这个数组，执行<code>watcher.update()</code>方法。</p><p>上面完成之后就会调用<code>compile</code>函数开始对 DOM 进行解析了。首先会解析节点，然后再解析节点里的<code>&#123;&#123;插值表达式&#125;&#125;</code> 、<code>v-if</code>等指令。</p><p>解析<code>&#123;&#123;插值表达式&#125;&#125;</code> 时会生成一个 <code>text</code> 指令。并把<code>&#123;&#123;插值表达式&#125;&#125;</code> 替换为一个空的文本节点，然后生成一个描述符对象。</p><p>描述符对象收集了后面生成指令实例时所需要的数据、要监听的表达式、对应的文本节点,和指令对应的处理函数。</p><p>然后会将这个描述符当作参数传入<code>directive</code> 类，生成一个指令实例。指令实例执行<code>bind</code>方法，<code>bind</code>方法会将表达式、指令处理函数以及相关的一些参数传给 <code>watcher</code>生成一个<code>watcher</code>实例。</p><p><code>watcher</code> 首次会执行 <code>get</code> 方法对表达式进行求值，然后将得到的值将给 <code>update</code>方法。</p><p><code>update</code> 方法将值传入处理函数对 DOM 进行更新，这样就完成了第一次渲染。</p><h2 id="实例化完成后"><a href="#实例化完成后" class="headerlink" title="实例化完成后"></a>实例化完成后</h2><p>以后每一次更改的数据值，都会触发数据所对应对象属性这个 <strong>key</strong> 的 <code>setter</code> 方法。</p><p><code>setter</code> 方法再触发 <code>dep.notify</code> 通知对应的 <code>watcher</code> 调用<code>update</code>方法进行更新。</p><p><code>update</code>方法再把值传给对应的处理函数，再一次进行 DOM 渲染，如此循环往复。</p><p>其他的指令也是按照这一流程来运行的！</p><p><img src="/images/data.png" alt="data"></p><blockquote><p>此时，看着这张图就不会再一脸懵逼了！</p></blockquote><h1 id="Object-defineProperty-的缺陷"><a href="#Object-defineProperty-的缺陷" class="headerlink" title="Object.defineProperty 的缺陷"></a>Object.defineProperty 的缺陷</h1><blockquote><p>Vue3.0 采用了 Proxy，抛弃了Object.defineProperty？</p></blockquote><ol><li><code>Object.defineProperty</code>无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应；</li><li><code>Object.defineProperty</code>只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍历。<code>Proxy</code>可以劫持整个对象，并返回一个新的对象。</li><li><code>Proxy</code>不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。</li></ol><h2 id="对于数组"><a href="#对于数组" class="headerlink" title="对于数组"></a>对于数组</h2><p><code>Object.defineProperty</code> 无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实时响应。 为了解决这个问题，经过 Vue 内部处理后可以使用以下几种方法来监听数组:</p><pre><code class="hljs js">push()pop()shift()unshift()splice()sort()reverse()</code></pre><blockquote><p>由于只针对了以上八种方法进行了hack处理,所以其他数组的属性也是检测不到的，还是具有一定的局限性。</p></blockquote><h2 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a>对于对象</h2><p><code>Object.defineProperty</code> 还无法监控到对象属性的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。</p><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。</p><p>还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code> 方法的别名</p><h1 id="Proxy-实现的双向绑定的特点"><a href="#Proxy-实现的双向绑定的特点" class="headerlink" title="Proxy 实现的双向绑定的特点"></a>Proxy 实现的双向绑定的特点</h1><p>语法：</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler)</code></pre><ul><li>handler：包含捕捉器（trap）的占位符对象，可译为处理器对象。</li><li>target：被 Proxy 代理的对象。</li></ul><p>Proxy 的优点：</p><p>Proxy 可以直接监听对象而非属性</p><p>Proxy 可以直接监听数组的变化</p><p>Proxy 有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等是<code>Object.defineProperty</code>不具备的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《前端100问》60</title>
    <link href="/2020/11/29/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B60/"/>
    <url>/2020/11/29/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B60/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-的响应式原理中-Object-defineProperty-有什么缺陷？"><a href="#Vue-的响应式原理中-Object-defineProperty-有什么缺陷？" class="headerlink" title="Vue 的响应式原理中 Object.defineProperty 有什么缺陷？"></a>Vue 的响应式原理中 Object.defineProperty 有什么缺陷？</h1><blockquote><p>为什么在 Vue3.0 采用了 Proxy，抛弃了 Object.defineProperty？</p></blockquote><ol><li><code>Object.defineProperty</code> 无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应；</li><li><code>Object.defineProperty</code> 只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍历。</li><li><code>Proxy</code> 可以劫持整个对象，并返回一个新的对象。</li><li><code>Proxy</code> 不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。</li></ol><h1 id="怎么让一个-div-水平垂直居中"><a href="#怎么让一个-div-水平垂直居中" class="headerlink" title="怎么让一个 div 水平垂直居中"></a>怎么让一个 div 水平垂直居中</h1><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><ol><li>flex 布局</li></ol><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.parent</span> &#123;    <span class="hljs-attribute">display</span>: flex;    <span class="hljs-attribute">justify-content</span>: center;    <span class="hljs-attribute">align-items</span>: center;&#125;</code></pre><ol start="2"><li>绝对定位</li></ol><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.parent</span> &#123;    <span class="hljs-attribute">position</span>: relative; &#125;<span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.child</span> &#123;    <span class="hljs-attribute">position</span>: absolute;     <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);  &#125;<span class="hljs-comment">/* 或者 */</span><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.child</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">25px</span>;    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">5px</span>;&#125;<span class="hljs-comment">/* 或 */</span><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.child</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">margin</span>: auto;&#125;</code></pre><ol start="3"><li>使用行内块元素，垂直中线对齐</li></ol><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.parent</span> &#123;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">text-align</span>: center;&#125;<span class="hljs-selector-class">.parent</span><span class="hljs-selector-pseudo">::before</span> &#123;  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">vertical-align</span>: middle;&#125;<span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.child</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">vertical-align</span>: middle;&#125;</code></pre><h1 id="输出以下代码的执行结果并解释为什么"><a href="#输出以下代码的执行结果并解释为什么" class="headerlink" title="输出以下代码的执行结果并解释为什么"></a>输出以下代码的执行结果并解释为什么</h1><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;<span class="hljs-attr">n</span>: <span class="hljs-number">1</span>&#125;;<span class="hljs-keyword">var</span> b = a;a.x = a = &#123;<span class="hljs-attr">n</span>: <span class="hljs-number">2</span>&#125;;<span class="hljs-built_in">console</span>.log(a.x)<span class="hljs-comment">//underfined </span><span class="hljs-built_in">console</span>.log(b.x)<span class="hljs-comment">//&#123;n:2&#125;</span></code></pre><ol><li>执行 <code>var a = &#123;n: 1&#125;;</code> 在堆内存中开辟 a 对象的地址空间</li><li>执行 <code>var b = a;</code> 将 a 指向的地址空间赋值给 b，此时 a 与 b 执行同一块地址空间</li><li>当执行到 <code>a.x = a = &#123;n: 2&#125;;</code> 时，<code>.</code> 运算符优先级高于 <code>=</code> 赋值，先为先前生成的对象添加属性<code>&#123;n:1 x:underfined&#125;</code> ，并赋值 <code>a=&#123;n:2&#125;</code></li><li>然后再执行 <code>=</code> 右边的内容 <code>a = &#123;n: 2&#125;;</code>  此时，重新开辟了一块堆内存地址空间存储 <code>&#123;n:2&#125;</code> ，a 重新指向新的地址空间，旧的地址空间因为有 b 的引用所以不会消失。</li><li>此时进行打印 <code>console.log(a.x)</code> a 指向的是新地址空间</li><li><code>console.log(b.x)</code> b 指向的是旧地址空间</li></ol><h1 id="冒泡排序如何实现，时间复杂度是多少，-还可以如何改进？"><a href="#冒泡排序如何实现，时间复杂度是多少，-还可以如何改进？" class="headerlink" title="冒泡排序如何实现，时间复杂度是多少， 还可以如何改进？"></a>冒泡排序如何实现，时间复杂度是多少， 还可以如何改进？</h1><p>进行判断是否进行的元素交换，如果没有进行元素交换说明，数组以及排序完成，后面的遍历没有进行的必要，最好的情况即为 O(n)</p><pre><code class="hljs js"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 冒牌排序学习:</span><span class="hljs-comment"> * 使用es6语法,优化冒泡轮数</span><span class="hljs-comment"> * 冒泡思路:</span><span class="hljs-comment"> * (X,X,X,X,X,X) 6个元素,两两相比较:第一个跟第二个比较,符合就交换,然后第二个跟第三个比较,依次类推……</span><span class="hljs-comment"> * 第一轮冒泡: X X X X X X  6个元素,比较5次得出最大值</span><span class="hljs-comment"> * 第二轮冒泡: X X X X X    5个元素,比较4次得出次大值</span><span class="hljs-comment"> * 第三轮冒泡: X X X X      4个元素,比较3次得出次大值</span><span class="hljs-comment"> * 第四轮冒泡: X X X        3个元素,比较2次得出次大值</span><span class="hljs-comment"> * 第五轮冒泡: X X          2个元素,比较1次得出次大值</span><span class="hljs-comment"> * 第六轮冒泡: X            1个元素,不用比较了</span><span class="hljs-comment"> * 总结规律:n个元素,进行n-1次比较,冒泡一次得出来一个最大值</span><span class="hljs-comment"> * 比较过程中:元素两两比较,只需要进行(n-冒泡次数)次比较,就能得出最大元素</span><span class="hljs-comment"> */</span><span class="hljs-keyword">const</span> bubbleSort = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> &#123;  <span class="hljs-comment">//冒泡轮数循环变量控制</span>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;    <span class="hljs-comment">//设置变量exchange = flase</span>    <span class="hljs-comment">//每一轮都将变量重置</span>    <span class="hljs-comment">//当本轮比较没有发生元素移动,说明数组已经排序完成,后续比较不需要再进行下去</span>    <span class="hljs-comment">//利用变量退出循环</span>    <span class="hljs-keyword">let</span> exchange = <span class="hljs-literal">false</span>    <span class="hljs-comment">//规律:n个元素比较n-1次,得出最大值</span>    <span class="hljs-comment">//冒泡过程中:元素两两比较,只需要进行(n-轮数)次比较,就能得出最大元素</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i; j++) &#123;      <span class="hljs-comment">//元素两两比较</span>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;        <span class="hljs-comment">//临时变量,交换元素,</span>        <span class="hljs-keyword">let</span> temp = arr[j]        arr[j] = arr[j + <span class="hljs-number">1</span>]        arr[j + <span class="hljs-number">1</span>] = temp        exchange = <span class="hljs-literal">true</span>      &#125;    &#125;    <span class="hljs-comment">//判断是否发生了元素交换,如果没有就退出循环</span>    <span class="hljs-keyword">if</span> (!exchange) <span class="hljs-keyword">break</span>  &#125;  <span class="hljs-keyword">return</span> arr&#125;</code></pre><h1 id="某公司-1-到-12-月份的销售额存在一个对象里面"><a href="#某公司-1-到-12-月份的销售额存在一个对象里面" class="headerlink" title="某公司 1 到 12 月份的销售额存在一个对象里面"></a>某公司 1 到 12 月份的销售额存在一个对象里面</h1><blockquote><p>如下：{1:222, 2:123, 5:888}，请把数据处理为如下结构：[222, 123, null, null, 888, null, null, null, null, null, null, null]。</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;  <span class="hljs-number">1</span>: <span class="hljs-number">222</span>,  <span class="hljs-number">2</span>: <span class="hljs-number">123</span>,  <span class="hljs-number">5</span>: <span class="hljs-number">888</span>&#125;obj.length = <span class="hljs-number">12</span><span class="hljs-keyword">let</span> data = <span class="hljs-built_in">Array</span>.from(obj).slice(<span class="hljs-number">1</span>)<span class="hljs-keyword">let</span> newData = data.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;  <span class="hljs-keyword">if</span> (item === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> item&#125;)newData.push(<span class="hljs-literal">null</span>)<span class="hljs-built_in">console</span>.log(newData)</code></pre><p>利用 <code>length</code> 属性将伪数组转换为数组遍历操作。</p><h1 id="要求设计-LazyMan-类，实现以下功能。"><a href="#要求设计-LazyMan-类，实现以下功能。" class="headerlink" title="要求设计 LazyMan 类，实现以下功能。"></a>要求设计 LazyMan 类，实现以下功能。</h1><pre><code class="hljs js">LazyMan(<span class="hljs-string">&#x27;Tony&#x27;</span>);<span class="hljs-comment">// Hi I am Tony</span>LazyMan(<span class="hljs-string">&#x27;Tony&#x27;</span>).sleep(<span class="hljs-number">10</span>).eat(<span class="hljs-string">&#x27;lunch&#x27;</span>);<span class="hljs-comment">// Hi I am Tony</span><span class="hljs-comment">// 等待了10秒...</span><span class="hljs-comment">// I am eating lunch</span>LazyMan(<span class="hljs-string">&#x27;Tony&#x27;</span>).eat(<span class="hljs-string">&#x27;lunch&#x27;</span>).sleep(<span class="hljs-number">10</span>).eat(<span class="hljs-string">&#x27;dinner&#x27;</span>);<span class="hljs-comment">// Hi I am Tony</span><span class="hljs-comment">// I am eating lunch</span><span class="hljs-comment">// 等待了10秒...</span><span class="hljs-comment">// I am eating diner</span>LazyMan(<span class="hljs-string">&#x27;Tony&#x27;</span>).eat(<span class="hljs-string">&#x27;lunch&#x27;</span>).eat(<span class="hljs-string">&#x27;dinner&#x27;</span>).sleepFirst(<span class="hljs-number">5</span>).sleep(<span class="hljs-number">10</span>).eat(<span class="hljs-string">&#x27;junk food&#x27;</span>);<span class="hljs-comment">// Hi I am Tony</span><span class="hljs-comment">// 等待了5秒...</span><span class="hljs-comment">// I am eating lunch</span><span class="hljs-comment">// I am eating dinner</span><span class="hljs-comment">// 等待了10秒...</span><span class="hljs-comment">// I am eating junk food</span></code></pre><p>回答：</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyManClass</span> </span>&#123;  <span class="hljs-keyword">constructor</span>(name) &#123;    <span class="hljs-comment">// 任务队列</span>    <span class="hljs-built_in">this</span>.taskList = []    <span class="hljs-built_in">this</span>.name = name    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-comment">// body</span>      <span class="hljs-built_in">this</span>.next()    &#125;, <span class="hljs-number">0</span>)    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hi I am <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>)  &#125;  eat(food) &#123;    <span class="hljs-keyword">const</span> fn = <span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`I am eating <span class="hljs-subst">$&#123;food&#125;</span>`</span>)      <span class="hljs-built_in">this</span>.next()    &#125;    <span class="hljs-built_in">this</span>.taskList.push(fn)    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>  &#125;  sleepFirst(time) &#123;    <span class="hljs-keyword">const</span> fn = <span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`等待了<span class="hljs-subst">$&#123;time&#125;</span>秒...`</span>)        <span class="hljs-built_in">this</span>.next()      &#125;, <span class="hljs-number">1000</span> * time)    &#125;    <span class="hljs-built_in">this</span>.taskList.unshift(fn)    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>  &#125;  sleep(time) &#123;    <span class="hljs-keyword">const</span> fn = <span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`等待了<span class="hljs-subst">$&#123;time&#125;</span>秒...`</span>)        <span class="hljs-built_in">this</span>.next()      &#125;, <span class="hljs-number">1000</span> * time)    &#125;    <span class="hljs-built_in">this</span>.taskList.push(fn)    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>  &#125;  next() &#123;    <span class="hljs-keyword">var</span> fn = <span class="hljs-built_in">this</span>.taskList.shift()    fn &amp;&amp; fn()  &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LazyMan</span>(<span class="hljs-params">name</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LazyManClass(name)&#125;<span class="hljs-comment">//LazyMan(&#x27;Tony&#x27;).eat(&#x27;lunch&#x27;).eat(&#x27;dinner&#x27;).sleepFirst(5).sleep(10).eat(&#x27;junk food&#x27;);</span></code></pre><p>思路：</p><p>执行 <code>LazyMan(&#39;Tony&#39;)</code> 方法会 返回一个 new 的 <code>LazyManClass</code> 会执行 <code>constructor</code> 内的代码，同时会创建一个异步宏任务队列执行对象的 <code>next</code>方法</p><p><code>next</code> 方法会返回任务队列第一个任务且执行，在对象每个方法内都创建一个异步任务执行同时在异步任务内调用<code>next</code>方法，不同的是其他任务都是 <code>push</code>到任务队尾，而<code>sleepFirst</code>是插到队列首，在<code>next</code>执行时会先执行。</p><h1 id="分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景。"><a href="#分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景。" class="headerlink" title="分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。"></a>分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。</h1><p><strong>结构：</strong></p><ol><li><code>display: none</code>  不占空间，不能点击。场景：显示出原来这里不存在的结构</li><li><code>visibility: hidden</code>占据空间，不能点击。场景：显示不会导致页面结构发生变动，不会撑开</li><li><code>opacity: 0</code> 占据空间，可以点击。场景：可以跟transition搭配</li></ol><p><strong>继承：</strong></p><ul><li><p><code>opacity:0</code> 和 <code>display:none</code>，是非继承属性。若父节点元素应用了 <code>opacity:0</code> 和 <code>display:none</code>，无论其子孙元素如何挣扎都不会再出现在大众视野；子孙节点消失是由于元素从渲染树消失造成，通过修改子孙节点属性无法显示。</p></li><li><p><code>visibility:hidden</code>，是继承属性。若父节点元素应用了 <code>visibility:hidden</code>，子孙元素应用 <code>visibility:visible</code>，那么其就会显现出来。</p></li></ul><p><strong>性能：</strong></p><p><code>display: none</code> : 修改元素会造成文档回流,读屏器不会读取display: none元素内容，性能消耗较大</p><p><code>visibility: hidden</code>: 修改元素只会造成本元素的重绘,性能消耗较少读屏器读取visibility: hidden元素内容</p><p><code>opacity:0</code> ： 修改元素会造成重绘，性能消耗较少</p><h1 id="箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用-new-生成实例，那么箭头函数可以吗？为什么？"><a href="#箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用-new-生成实例，那么箭头函数可以吗？为什么？" class="headerlink" title="箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用 new 生成实例，那么箭头函数可以吗？为什么？"></a>箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用 new 生成实例，那么箭头函数可以吗？为什么？</h1><p>箭头函数是普通函数的简写，可以更优雅的定义一个函数，和普通函数相比，有以下几点差异：</p><ol><li>箭头函数体内的 <code>this</code> 对象，就是定义时所在的作用域中的 <code>this</code> 值，而不是使用时所在的对象。</li><li>箭头函数不可以使用 <code>arguments</code> 对象。该对象在函数体内不存在。如果使用，可以使用 <code>rest</code> 参数代替。</li><li>箭头函数不可以使用 <code>yield</code> 命令，因此箭头函数不能用作 <code>Generator</code> 函数。</li><li>箭头函数不能使用 <code>new</code> 命令，因为：<ol><li>箭头函数没有自己的 <code>this</code>，无法调用 <code>call</code> 、<code>apply</code>、<code>bind</code></li><li>箭头函数没有 <code>prototype</code> 属性，而 <code>new</code> 命令在执行的时候需要将构造函数的 <code>prototype</code> 赋值给对象的 <code>__proto__</code></li></ol></li></ol><h1 id="给定两个数组，写一个方法来计算它们的交集。"><a href="#给定两个数组，写一个方法来计算它们的交集。" class="headerlink" title="给定两个数组，写一个方法来计算它们的交集。"></a>给定两个数组，写一个方法来计算它们的交集。</h1><blockquote><p>例如：给定 nums1 = [1, 2, 2, 1]，nums2 = [2, 2]，返回 [2, 2]。</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">const</span> getIntersection = <span class="hljs-function">(<span class="hljs-params">arr1, arr2</span>) =&gt;</span> &#123;  <span class="hljs-comment">//应该遍历短数组，判断是否包含在长数组内</span>  <span class="hljs-comment">//应该做一层判断</span>  <span class="hljs-keyword">let</span> s  <span class="hljs-keyword">let</span> l  <span class="hljs-keyword">if</span> (arr1.length &gt; arr2.length) &#123;    l = arr1    s = arr2  &#125; <span class="hljs-keyword">else</span> &#123;    l = arr2    s = arr1  &#125;  <span class="hljs-keyword">const</span> r = s.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;    <span class="hljs-comment">// return arr2.indexOf(item) &gt; -1</span>    <span class="hljs-keyword">return</span> l.includes(item)  &#125;)  <span class="hljs-keyword">return</span> r&#125;</code></pre><p>哈希表：</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> intersect = <span class="hljs-function">(<span class="hljs-params">nums1, nums2</span>) =&gt;</span> &#123;    <span class="hljs-keyword">const</span> map = &#123;&#125;    <span class="hljs-keyword">const</span> res = []    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n <span class="hljs-keyword">of</span> nums1) &#123;      <span class="hljs-keyword">if</span> (map[n]) &#123;        map[n]++      &#125; <span class="hljs-keyword">else</span> &#123;        map[n] = <span class="hljs-number">1</span>      &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n <span class="hljs-keyword">of</span> nums2) &#123;      <span class="hljs-keyword">if</span> (map[n] &gt; <span class="hljs-number">0</span>) &#123;        res.push(n)        map[n]--      &#125;    &#125;    <span class="hljs-keyword">return</span> res  &#125;<span class="hljs-built_in">console</span>.log(intersect(nums2, nums1))</code></pre><p>思路：</p><p>初始化 <code>map</code> 为一个对象，数组1中的每一项都作为 <code>map</code> 的属性，如果存在此属性，则属性值自增1</p><p>不存在则初始化为1</p><p>遍历数组2，数组2中的每一项都作为<code>map</code>的属性去读取，读到值 &gt; 0 说明数组2存在相同项直接存入结果数组，并且<code>map</code>属性值自减1，说明有一项相交，防止重复所以自减1</p><p>返回结果数组</p><h1 id="已知如下代码，如何修改才能让图片宽度为-300px-？注意下面代码不可修改。"><a href="#已知如下代码，如何修改才能让图片宽度为-300px-？注意下面代码不可修改。" class="headerlink" title="已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改。"></a>已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改。</h1><pre><code class="hljs css">&lt;img src=&quot;1.jpg&quot; style=&quot;width:480px!important;”&gt;</code></pre><ol><li>使用 <code>max-width</code></li></ol><pre><code class="hljs css"><span class="hljs-selector-tag">max-width</span>: 300<span class="hljs-selector-tag">px</span>;</code></pre><ol start="2"><li><code>transform: scale(.625,.625);</code> 等比例缩小</li></ol><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">scale</span>(<span class="hljs-selector-class">.625</span>,<span class="hljs-selector-class">.625</span>);<span class="hljs-comment">/* transform-origin: left top; */</span><span class="hljs-comment">/* 默认以图片中心作为起点缩放，位置会与原先位置不同，更改发生起点为左上*/</span></code></pre><ol start="3"><li>盒子自动内减，添加<code>padding</code></li></ol><pre><code class="hljs css"><span class="hljs-selector-tag">box-sizing</span>: <span class="hljs-selector-tag">border-box</span>;<span class="hljs-selector-tag">padding</span>: 0 180<span class="hljs-selector-tag">px</span> 0 0;<span class="hljs-comment">/* 保持位置不变的，只加右边的 padding 就可以 */</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《前端100问》50</title>
    <link href="/2020/11/23/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B50/"/>
    <url>/2020/11/23/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B50/</url>
    
    <content type="html"><![CDATA[<h1 id="41、下面代码输出什么"><a href="#41、下面代码输出什么" class="headerlink" title="41、下面代码输出什么"></a>41、下面代码输出什么</h1><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">//undefined</span>    a = <span class="hljs-number">5</span>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a)<span class="hljs-comment">//10</span>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;    <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">//20</span>&#125;)()</code></pre><p>分别为 <code>undefined</code>　<code>10</code>　<code>20</code>，原因是作用域问题</p><p>在内部声名<code>var a = 20</code>；相当于先声明 <code>var a </code>然后再执行赋值操作，这是在 <strong>IIFE</strong> 内形成的独立作用域。</p><p>如果把 <code>var a=20</code>注释掉，那么 <code>a</code> 只有在外部有声明，显示的就是外部的 <code>a</code> 变量的值了。结果 <code>a</code> 会是 <code>10</code>　<code>5</code>　<code>5</code></p><h1 id="42、实现一个-sleep-函数"><a href="#42、实现一个-sleep-函数" class="headerlink" title="42、实现一个 sleep 函数"></a>42、实现一个 sleep 函数</h1><blockquote><p>比如 sleep(1000) 意味着等待1000毫秒，可从 Promise、Generator、Async/Await 等角度实现</p></blockquote><pre><code class="hljs js"><span class="hljs-comment">// Promise 实现</span><span class="hljs-keyword">const</span> sleep = <span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))sleep(<span class="hljs-number">1000</span>).then(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)&#125;)<span class="hljs-comment">// Generator</span><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">sleepGenerator</span>(<span class="hljs-params">time</span>) </span>&#123;  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))&#125;<span class="hljs-comment">//next() 返回一个由 yield表达式生成的值。value拿到返回值</span>sleepGenerator(<span class="hljs-number">1000</span>)  .next()  .value.then(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)  &#125;)<span class="hljs-comment">//async</span><span class="hljs-keyword">const</span> sleep = <span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">await</span> sleep(<span class="hljs-number">1000</span>)  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)&#125;output()<span class="hljs-comment">// ES5 回调函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">callback, time</span>) </span>&#123;  <span class="hljs-built_in">setTimeout</span>(callback, time)&#125;sleep(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)&#125;, <span class="hljs-number">1000</span>)</code></pre><h1 id="43、使用-sort-进行排序，输出结果"><a href="#43、使用-sort-进行排序，输出结果" class="headerlink" title="43、使用 sort() 进行排序，输出结果"></a>43、使用 sort() 进行排序，输出结果</h1><blockquote><p>使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果</p></blockquote><pre><code class="hljs js">[<span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">29</span>, <span class="hljs-number">102</span>, <span class="hljs-number">22</span>].sort() <span class="hljs-comment">// [ 102, 15, 22, 29, 3, 8 ]</span></code></pre><p>根据MDN上对<code>Array.sort()</code>的解释，默认的排序方法会将数组元素转换为字符串，然后比较字符串中字符的UTF-16编码顺序来进行排序。所以<code>&#39;102&#39;</code> 会排在 <code>&#39;15&#39;</code> 前面。</p><p><strong>Array.prototype.sort()</strong></p><blockquote><p><code>sort()</code> 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</p></blockquote><p>返回值:</p><p>排序后的数组。请注意，数组已原地排序，并且不进行复制。</p><pre><code class="hljs js">[<span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">29</span>, <span class="hljs-number">102</span>, <span class="hljs-number">22</span>].sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>) </span>&#123;<span class="hljs-keyword">return</span> a-b;&#125;)<span class="hljs-comment">//输出： [3, 8, 15, 22, 29, 102]</span></code></pre><h1 id="44、介绍-HTTPS-握手过程"><a href="#44、介绍-HTTPS-握手过程" class="headerlink" title="44、介绍 HTTPS 握手过程"></a>44、介绍 HTTPS 握手过程</h1><h2 id="一、Client-→-Server"><a href="#一、Client-→-Server" class="headerlink" title="一、Client → Server"></a>一、Client → Server</h2><h3 id="Client-Hello"><a href="#Client-Hello" class="headerlink" title="Client Hello"></a>Client Hello</h3><p>握手开始时，总是由先客户端会发送 <code>Client Hello</code> 信息给服务端，主要包含</p><ul><li>Version Number 客户端支持的协议版本</li><li>Randomly Generated Data 32 字节长度的随机值，用于之后生成主密钥。</li><li>Session Identification Session ID，第一次连接时为空。</li><li>Cipher Suite 客户端支持的加密算法列表，按优先级顺序排列。</li></ul><h2 id="二、Server-→-Client"><a href="#二、Server-→-Client" class="headerlink" title="二、Server → Client"></a>二、Server → Client</h2><h3 id="Server-Hello"><a href="#Server-Hello" class="headerlink" title="Server Hello"></a>Server Hello</h3><p>接着，服务端收到客户端发来的消息之后，会返回 <code>Server Hello</code> 信息给客户端，告知客户端接下来使用的一些参数</p><ul><li>Version Number 通信协议版本</li><li>Randomly Generated Data 32 字节长度的随机值，用于之后生成主密钥</li><li>Session Identification Session ID</li><li>Cipher Suite 加密算法</li></ul><h3 id="Server-Certificate-证书"><a href="#Server-Certificate-证书" class="headerlink" title="Server Certificate 证书"></a>Server Certificate 证书</h3><p>服务端还会带上证书返回给客户端。证书中含有服务端的公钥、网站地址、证书的颁发机构等信息。</p><p>客户端收到服务端返回的证书之后，会验证该证书的真实合法性。</p><h3 id="Server-Key-Exchange-额外数据"><a href="#Server-Key-Exchange-额外数据" class="headerlink" title="Server Key Exchange 额外数据"></a>Server Key Exchange 额外数据</h3><p>这个是可选的，取决于使用的加密算法。主要是携带密钥交换的额外数据。</p><h3 id="Server-Hello-Done"><a href="#Server-Hello-Done" class="headerlink" title="Server Hello Done"></a>Server Hello Done</h3><p>表示服务端已经发送完毕，并等待客户端回应。</p><h2 id="三、Client-→-Server"><a href="#三、Client-→-Server" class="headerlink" title="三、Client → Server"></a>三、Client → Server</h2><h3 id="Client-Key-Exchange"><a href="#Client-Key-Exchange" class="headerlink" title="Client Key Exchange"></a>Client Key Exchange</h3><p>客户端使用之前发送给服务端及服务端返回的随机数，生成预主密钥，然后用服务端返回的公钥进行加密。</p><h3 id="Change-Cipher-Spec"><a href="#Change-Cipher-Spec" class="headerlink" title="Change Cipher Spec"></a>Change Cipher Spec</h3><p>告诉服务端，之后的所有信息都会使用协商好的密钥和算法加密</p><h3 id="Client-Finished"><a href="#Client-Finished" class="headerlink" title="Client Finished"></a>Client Finished</h3><p>客户端的握手工作已经完成。这条信息是握手过程中所有消息的散列值。</p><h2 id="四、Server-→-Client"><a href="#四、Server-→-Client" class="headerlink" title="四、Server → Client"></a>四、Server → Client</h2><h3 id="Change-Cipher-Spec-Message"><a href="#Change-Cipher-Spec-Message" class="headerlink" title="Change Cipher Spec Message"></a>Change Cipher Spec Message</h3><p>告知客户端，会使用刚刚协商的密钥来加密信息</p><h3 id="Server-Finished-Message"><a href="#Server-Finished-Message" class="headerlink" title="Server Finished Message"></a>Server Finished Message</h3><p>表示服务端的握手工作已经完成</p><h2 id="数字证书申请流程"><a href="#数字证书申请流程" class="headerlink" title="数字证书申请流程"></a>数字证书申请流程</h2><ol><li>网站提交身份信息给CA机构</li><li>CA机构审核信息的真实性</li><li>对信息进行Hash，计算信息摘要</li><li>CA机构的密钥加密信息摘要，得到数字签名</li></ol><h2 id="浏览器验证证书"><a href="#浏览器验证证书" class="headerlink" title="浏览器验证证书"></a>浏览器验证证书</h2><ol><li>浏览器利用证书的原始信息计算得到信息摘要</li><li>利用CA的公钥解密数字证书中的数字签名，解密出来的数据也是信息摘要</li><li>比较两个摘要是否相等</li></ol><h1 id="45、HTTPS-握手过程中，客户端如何验证证书的合法性"><a href="#45、HTTPS-握手过程中，客户端如何验证证书的合法性" class="headerlink" title="45、HTTPS 握手过程中，客户端如何验证证书的合法性"></a>45、HTTPS 握手过程中，客户端如何验证证书的合法性</h1><ol><li><p>首先浏览器读取证书中的证书所有者、有效期等信息进行校验，校验证书的网站域名是否与证书颁发的域名一致，校验证书是否在有效期内</p></li><li><p>浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发</p></li><li><p>两种情况：</p><ol><li><p>如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的。</p></li><li><p>如果找到，那么浏览器就会从操作系统中取出颁发者CA 的公钥(多数浏览器开发商发布<br>版本时，会事先在内部植入常用认证机关的公开密钥)，然后对服务器发来的证书里面的签名进行解密</p></li></ol></li><li><p>浏览器使用相同的hash算法计算出服务器发来的证书的hash值，将这个计算的hash值与证书中签名做对比</p></li><li><p>对比结果一致，则证明服务器发来的证书合法，没有被冒充</p></li></ol><h1 id="46、输出以下代码执行的结果并解释为什么"><a href="#46、输出以下代码执行的结果并解释为什么" class="headerlink" title="46、输出以下代码执行的结果并解释为什么"></a>46、输出以下代码执行的结果并解释为什么</h1><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">3</span>,    <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">4</span>,    <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">2</span>,    <span class="hljs-string">&#x27;splice&#x27;</span>: <span class="hljs-built_in">Array</span>.prototype.splice,    <span class="hljs-string">&#x27;push&#x27;</span>: <span class="hljs-built_in">Array</span>.prototype.push&#125;obj.push(<span class="hljs-number">1</span>)obj.push(<span class="hljs-number">2</span>)<span class="hljs-built_in">console</span>.log(obj)</code></pre><p>MDN描述：</p><blockquote><p>push方法将值追加到数组中。</p></blockquote><p><code>push</code> 方法具有通用性。该方法和 <code>call()</code> 或 <code>apply()</code> 一起使用时，可应用在类似数组的对象上。</p><p><code>push</code> 方法根据 <code>length</code> 属性来决定从哪里开始插入给定的值。</p><p>如果 <code>length</code> 不能被转成一个数值，则插入的元素索引为 0，包括 <code>length</code> 不存在时。</p><p>当 <code>length</code> 不存在时，将会创建它。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">3</span>,    <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">4</span>,    <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">2</span>,        <span class="hljs-string">&#x27;push&#x27;</span>: <span class="hljs-built_in">Array</span>.prototype.push&#125;obj.push(<span class="hljs-number">1</span>)obj.push(<span class="hljs-number">2</span>)<span class="hljs-built_in">console</span>.log(obj)<span class="hljs-comment">//打印： &#123;2: 1, 3: 2, length: 4, push: ƒ&#125;</span><span class="hljs-keyword">var</span> obj1 = &#123;    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">3</span>,    <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">4</span>,    <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">2</span>,    <span class="hljs-string">&#x27;splice&#x27;</span>: <span class="hljs-built_in">Array</span>.prototype.splice,    <span class="hljs-string">&#x27;push&#x27;</span>: <span class="hljs-built_in">Array</span>.prototype.push&#125;obj1.push(<span class="hljs-number">1</span>)obj1.push(<span class="hljs-number">2</span>)<span class="hljs-built_in">console</span>.log(obj1)<span class="hljs-comment">//Object(4) [empty × 2, 1, 2, splice: ƒ, push: ƒ]</span><span class="hljs-keyword">var</span> obj2 = &#123;  <span class="hljs-number">2</span>: <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>: <span class="hljs-number">4</span>,  push: <span class="hljs-built_in">Array</span>.prototype.push&#125;obj2.push(<span class="hljs-number">1</span>)obj2.push(<span class="hljs-number">2</span>)<span class="hljs-built_in">console</span>.log(obj2)<span class="hljs-comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4, length: 2, push: ƒ&#125;</span></code></pre><p>解释：</p><p><code>push</code> 方法具有通用性，所以可以给类数组使用。具体是根据类数组的 <code>length</code> 属性，将其转换为数值当做<code>对象[数值]</code>来使用，而对象使用<code>对象[数值]</code>时，数值一律当成字符处理也是就是<code>obj[1]</code>和 <code>obj[&#39;1&#39;]</code>是等价的。</p><p>所以<code>push</code>会解析 <code>length</code>的值 往<code>obj[2]</code> push 一个 <code>1</code> ，所以<code>obj</code> 的属性 <code>2</code> 的值会变成 <code>1</code>，此时 <code>obj</code> 并没有数组的独有方法，所以JS解析器还是会打印一个对象。</p><p>而<code>obj1</code>有一个只有数组的才有的 <code>splice</code> 方法，而且 <code>length</code> 为 <code>4</code> 所以 JS解析器会将其当成数组来打印输出，从下标<code>0</code>开始读数据，但是并没有数据会补空最后输出。</p><h1 id="47、双向绑定和-vuex-是否冲突"><a href="#47、双向绑定和-vuex-是否冲突" class="headerlink" title="47、双向绑定和 vuex 是否冲突"></a>47、双向绑定和 vuex 是否冲突</h1><p>在严格模式下直接使用确实会有问题。</p><p>在严格模式中使用Vuex，当用户输入时，v-model 会试图直接修改属性值，但这个修改不是在 mutation中修改的，所以会抛出一个错误。</p><p>处理方法：</p><blockquote><p>来自官网文档：</p></blockquote><p>当在严格模式中使用 Vuex 时，在属于 Vuex 的 state 上使用 <code>v-model</code> 会比较棘手：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;obj.message&quot;</span>&gt;</span></code></pre><p>假设这里的 <code>obj</code> 是在计算属性中返回的一个属于 Vuex store 的对象，在用户输入时，<code>v-model</code> 会试图直接修改 <code>obj.message</code>。在严格模式中，由于这个修改不是在 mutation 函数中执行的, 这里会抛出一个错误。</p><p>方法一：不用<code>v-model</code> 直接绑定<code>value</code>值和监听<code>input</code>事件</p><p>用“Vuex 的思维”去解决这个问题的方法是：给 <code>&lt;input&gt;</code> 中绑定 value，然后侦听 <code>input</code> 或者 <code>change</code> 事件，在事件回调中调用一个方法:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;message&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;updateMessage&quot;</span>&gt;</span></code></pre><pre><code class="hljs js"><span class="hljs-comment">// ...</span>computed: &#123;  ...mapState(&#123;    message: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.obj.message  &#125;)&#125;,methods: &#123;  updateMessage (e) &#123;    <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;updateMessage&#x27;</span>, e.target.value)  &#125;&#125;</code></pre><p>下面是 mutation 函数：</p><pre><code class="hljs js"><span class="hljs-comment">// ...</span>mutations: &#123;  updateMessage (state, message) &#123;    state.obj.message = message  &#125;&#125;</code></pre><p>方法二：双向绑定的计算属性 给计算属性设置<code>getter</code>和<code>setter</code></p><p>必须承认，这样做比简单地使用“<code>v-model</code> + 局部状态”要啰嗦得多，并且也损失了一些 <code>v-model</code> 中很有用的特性。另一个方法是使用带有 setter 的双向绑定计算属性：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></code></pre><pre><code class="hljs js"><span class="hljs-comment">// ...</span>computed: &#123;  message: &#123;    get () &#123;      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.obj.message <span class="hljs-comment">//读 Vuex 数据</span>    &#125;,    set (value) &#123;      <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;updateMessage&#x27;</span>, value)<span class="hljs-comment">//提交 mutation 更改 Vuex 数据</span>    &#125;  &#125;&#125;</code></pre><h1 id="48、call-和-apply-的区别是什么，哪个性能更好一些"><a href="#48、call-和-apply-的区别是什么，哪个性能更好一些" class="headerlink" title="48、call 和 apply 的区别是什么，哪个性能更好一些"></a>48、call 和 apply 的区别是什么，哪个性能更好一些</h1><ol><li><code>Function.prototype.apply</code> 和 <code>Function.prototype.call</code> 的作用是一样的，区别在于传入参数的不同；</li><li>第一个参数都是，指定函数体内 <code>this</code> 的指向；</li><li>第二个参数开始不同，<code>apply</code> 是传入带下标的<strong>集合</strong>，<strong>数组</strong>或者<strong>类数组</strong>，<code>apply</code>把它传给函数作为参数，<code>call</code>从第二个开始传入的参数是不固定的，都会传给函数作为参数。</li><li><code>call</code> 比 <code>apply</code> 的性能要好，平常可以多用 <code>call</code>,<code>call</code> 传入参数的格式正是内部所需要的格式。</li></ol><h1 id="49、为什么通常在发送数据埋点请求的时候使用的是-1x1-像素的透明-gif-图片？"><a href="#49、为什么通常在发送数据埋点请求的时候使用的是-1x1-像素的透明-gif-图片？" class="headerlink" title="49、为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？"></a>49、为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？</h1><p><strong>前端监控的原理</strong></p><p>所谓的前端监控，其实是在满足一定条件后，由Web页面将用户信息（UA/鼠标点击位置/页面报错/停留时长/etc）上报给服务器的过程。一般是将上报数据用url_encode（百度统计/CNZZ）或JSON编码（神策/诸葛io）为字符串，通过url参数传递给服务器，然后在服务器端统一处理。</p><p>这套流程的关键在于：</p><p>1）能够收集到用户信息；</p><p>2）能够将收集到的数据上报给服务器。也就是说，只要能上报数据，无论是请求GIF文件还是请求js文件或者是调用页面接口，服务器端其实并不关心具体的上报方式。</p><p>首先，为什么不能直接用GET/POST/HEAD请求接口进行上报？</p><blockquote><p>一般而言，打点域名都不是当前域名，所以所有的接口请求都会构成跨域。而跨域请求很容易出现由于配置不当被浏览器拦截并报错，这是不能接受的。所以，直接排除。</p></blockquote><p>为什么不能用请求其他的文件资源（js/css/ttf）的方式进行上报？</p><blockquote><p>这和浏览器的特性有关。通常，创建资源节点后只有将对象注入到浏览器DOM树后，浏览器才会实际发送资源请求。反复操作DOM不仅会引发性能问题，而且载入js/css资源还会阻塞页面渲染，影响用户体验。</p><p>但是图片请求例外。构造图片打点不仅不用插入DOM，只要在 JS 中 new 出 Image 对象就能发起请求，而且还没有阻塞问题，在没有 JS 的浏览器环境中也能通过 img标签正常打点，这是其他类型的资源请求所做不到的。</p></blockquote><p>同样都是图片，上报时选用了1x1的透明GIF，而不是其他的PNG/JEPG/BMP文件？</p><blockquote><p>首先，1x1像素是最小的合法图片。</p><p>而且，因为是通过图片打点，所以图片最好是透明的，这样一来不会影响页面本身展示效果，二者表示图片透明只要使用一个二进制位标记图片是透明色即可，不用存储色彩空间数据，可以节约体积。</p><p>因为需要透明色，所以可以直接排除JEPG(BMP32格式可以支持透明色)。</p><p>在体积方面最小的BMP文件需要74个字节，PNG需要67个字节，而合法的GIF，只需要43个字节。</p><p>同样的响应，GIF可以比BMP节约41%的流量，比PNG节约35%的流量。</p></blockquote><p>所以，总结：</p><p>前端监控使用GIF进行上报主要是因为：</p><ul><li>没有跨域问题；</li><li>能够完成整个 HTTP 请求+响应（尽管不需要响应内容）</li><li>触发 GET 请求之后不需要获取和处理数据、服务器也不需要发送数据</li><li>不会阻塞页面加载，影响用户体验</li><li>相比 XMLHttpRequest 对象发送 GET 请求，性能上更好</li><li>在所有图片中体积最小，相较BMP/PNG，可以节约41%/35%的网络资源。</li></ul><h1 id="50、实现-5-add-3-minus-2-功能。"><a href="#50、实现-5-add-3-minus-2-功能。" class="headerlink" title="50、实现 (5).add(3).minus(2) 功能。"></a>50、实现 (5).add(3).minus(2) 功能。</h1><p> JavaScript 的 <code>Number</code> 对象是经过封装的能让你处理数字值的对象。<code>Number</code> 对象由 <code>Number()</code> 构造器创建。</p><p><code>(5)</code> 和 <code>Number(5)</code>完全等价 </p><p><code>Number.isNaN()</code> 确定传递的值是否是 NaN。</p><p><code>Number.prototype.valueOf()</code>  <code>valueOf()</code> 方法返回一个被 <code>Number</code>对象包装的原始值。</p><pre><code class="hljs js"><span class="hljs-built_in">Number</span>.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> n !== <span class="hljs-string">&#x27;number&#x27;</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;请输入数字～&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueOf() + n&#125;<span class="hljs-built_in">Number</span>.prototype.minus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> n !== <span class="hljs-string">&#x27;number&#x27;</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;请输入数字～&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueOf() - n&#125;<span class="hljs-built_in">console</span>.log((<span class="hljs-number">5</span>).add(<span class="hljs-number">3</span>).minus(<span class="hljs-number">2</span>))</code></pre><pre><code class="hljs js"><span class="hljs-built_in">Number</span>.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;  <span class="hljs-keyword">let</span> number = <span class="hljs-built_in">parseFloat</span>(value)  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> number !== <span class="hljs-string">&#x27;number&#x27;</span> || <span class="hljs-built_in">Number</span>.isNaN(number)) &#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;请输入数字或者数字字符串～&#x27;</span>)  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> + number&#125;<span class="hljs-built_in">Number</span>.prototype.minus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;  <span class="hljs-keyword">let</span> number = <span class="hljs-built_in">parseFloat</span>(value)  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> number !== <span class="hljs-string">&#x27;number&#x27;</span> || <span class="hljs-built_in">Number</span>.isNaN(number)) &#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;请输入数字或者数字字符串～&#x27;</span>)  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> - number&#125;<span class="hljs-built_in">console</span>.log((<span class="hljs-number">5</span>).add(<span class="hljs-number">3</span>).minus(<span class="hljs-number">2</span>))<span class="hljs-comment">//更加强壮，排除了NaN 兼容了字符串</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《前端100问》40</title>
    <link href="/2020/11/20/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B40/"/>
    <url>/2020/11/20/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B40/</url>
    
    <content type="html"><![CDATA[<h1 id="31、改造下面的代码，使之输出0-9，写出你能想到的所有解法。"><a href="#31、改造下面的代码，使之输出0-9，写出你能想到的所有解法。" class="headerlink" title="31、改造下面的代码，使之输出0 - 9，写出你能想到的所有解法。"></a>31、改造下面的代码，使之输出0 - 9，写出你能想到的所有解法。</h1><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; i++)&#123;<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-built_in">console</span>.log(i);    &#125;, <span class="hljs-number">1000</span>)&#125;</code></pre><p>思路就是：形成词法环境嵌套，形成闭包，延长变量生命</p><pre><code class="hljs js"><span class="hljs-comment">//let 会形成块级作用域，此时 for 类比于 function 内层函数使用了外层函数的变量 闭包</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(i)  &#125;, <span class="hljs-number">1000</span>)&#125;<span class="hljs-comment">//setTimeout(fucntion,time,...arg) arg为传给 function 的参数</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <span class="hljs-built_in">setTimeout</span>(    i =&gt; &#123;      <span class="hljs-built_in">console</span>.log(i)    &#125;,    <span class="hljs-number">1000</span>,    i  )&#125;<span class="hljs-comment">// 解法二：闭包</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  (<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> &#123;    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-built_in">console</span>.log(i)    &#125;, <span class="hljs-number">1000</span>)  &#125;)(i)&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <span class="hljs-built_in">setTimeout</span>(    (<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> &#123;      <span class="hljs-built_in">console</span>.log(i)    &#125;)(i),    <span class="hljs-number">1000</span>  )&#125;</code></pre><h1 id="32、Virtual-DOM-真的比操作原生-DOM-快吗？谈谈你的想法。"><a href="#32、Virtual-DOM-真的比操作原生-DOM-快吗？谈谈你的想法。" class="headerlink" title="32、Virtual DOM 真的比操作原生 DOM 快吗？谈谈你的想法。"></a>32、Virtual DOM 真的比操作原生 DOM 快吗？谈谈你的想法。</h1><p>Virtual DOM 在某些情况下，并不一定比操作原生 DOM 快，这是一个性能和可维护性的取舍</p><p>没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。</p><p>框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。</p><p><strong>性能比较也要看场合</strong></p><p>在比较性能的时候，要分清楚初始渲染、小量数据更新、大量数据更新这些不同的场合。Virtual DOM、脏检查 MVVM、数据收集 MVVM 在不同场合各有不同的表现和不同的优化需求。</p><ul><li>初始渲染：Virtual DOM &gt; 脏检查 &gt;= 依赖收集</li><li>小量数据更新：依赖收集 &gt;&gt; Virtual DOM + 优化 &gt; 脏检查（无法优化） &gt; Virtual DOM 无优化</li><li>大量数据更新：脏检查 + 优化 &gt;= 依赖收集 + 优化 &gt; Virtual DOM（无法/无需优化）&gt;&gt; MVVM 无优化</li></ul><h1 id="33、下面的代码打印什么内容，为什么？"><a href="#33、下面的代码打印什么内容，为什么？" class="headerlink" title="33、下面的代码打印什么内容，为什么？"></a>33、下面的代码打印什么内容，为什么？</h1><pre><code class="hljs js"><span class="hljs-keyword">var</span> b = <span class="hljs-number">10</span>;(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;    b = <span class="hljs-number">20</span>;    <span class="hljs-built_in">console</span>.log(b); &#125;)();</code></pre><p>打印：</p><pre><code class="hljs txt">function b()&#123;    b = 20;    console.log(b); &#125;</code></pre><p>原因：</p><ol><li>函数表达式与函数声明不同，函数名只在该函数内部有效，并且此绑定是常量绑定。</li><li>对于一个常量进行赋值，在 strict 模式下会报错，非 strict 模式下静默失败。</li><li>IIFE中的函数是函数表达式，而不是函数声明。</li></ol><pre><code class="hljs js">let function_expression = function [name]([param1[, param2[, ..., paramN]]]) &#123;   statements&#125;;<span class="hljs-comment">//函数表达式 函数吗 【name】只在函数体内有效</span></code></pre><p>所以：</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> b = <span class="hljs-number">10</span>;<span class="hljs-comment">//IIFE中的函数是函数表达式，而不是函数声明。</span><span class="hljs-comment">//函数名只在该函数内部有效,而且 b是常量绑定，不可以更改</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">//对于一个常量进行赋值，在 strict 模式下会报错，非 strict 模式下静默失败。</span>    b = <span class="hljs-number">20</span>; <span class="hljs-comment">//非严格模式 b = 20失败</span>    <span class="hljs-built_in">console</span>.log(b); &#125;)();<span class="hljs-comment">//所以此时b = function b()&#123;b=20;console.log(b)&#125;，自然打印出这个</span></code></pre><h1 id="34、简单改造下面的代码，使之分别打印-10-和-20。"><a href="#34、简单改造下面的代码，使之分别打印-10-和-20。" class="headerlink" title="34、简单改造下面的代码，使之分别打印 10 和 20。"></a>34、简单改造下面的代码，使之分别打印 10 和 20。</h1><pre><code class="hljs js"><span class="hljs-keyword">var</span> b = <span class="hljs-number">10</span>;(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;    b = <span class="hljs-number">20</span>;    <span class="hljs-built_in">console</span>.log(b); &#125;)();</code></pre><pre><code class="hljs js"><span class="hljs-comment">//打印20</span><span class="hljs-keyword">var</span> b = <span class="hljs-number">10</span>;<span class="hljs-comment">//去掉函数名</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;    b = <span class="hljs-number">20</span>;    <span class="hljs-built_in">console</span>.log(b); &#125;)();<span class="hljs-comment">//打印10</span><span class="hljs-keyword">var</span> b = <span class="hljs-number">10</span>;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(b); &#125;)();</code></pre><h1 id="35、浏览器缓存读取规则"><a href="#35、浏览器缓存读取规则" class="headerlink" title="35、浏览器缓存读取规则"></a>35、浏览器缓存读取规则</h1><blockquote><p>可以分成 Service Worker、Memory Cache、Disk Cache 和 Push Cache，那请求的时候 from memory cache 和 from disk cache 的依据是什么，哪些数据什么时候存放在 Memory Cache 和 Disk Cache中？</p></blockquote><p>如果 Service Worker 存在，可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件</p><p>如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据</p><p>缓存分为强缓存和协商缓存，如果命中强缓存则</p><p>新开一个以前打开过的页面缓存会从 Disk Cache 中拿</p><p>刷新当前页面时浏览器会根据当前运行环境内存来决定是从 Memory Cache 还是 从Disk Cache中拿</p><p>哪些数据什么时候存放在 Memory Cache 和 Disk Cache中？</p><p>对于大文件来说，大概率是不存储在内存中的，反之优先<br>当前系统内存使用率高的话，文件优先存储进硬盘</p><p>页面上已经下载的样式、脚本、图片等存在 Memory Cache 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</p><p>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</p><p>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</p><ul><li>打开网页，地址栏输入地址： 查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求。</li><li>普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)。其次才是 disk cache。</li><li>强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 Cache-control: no-cache(为了兼容，还带了 Pragma: no-cache),服务器直接返回 200 和最新内容。</li></ul><h1 id="36、使用迭代的方式实现-flatten-函数。"><a href="#36、使用迭代的方式实现-flatten-函数。" class="headerlink" title="36、使用迭代的方式实现 flatten 函数。"></a>36、使用迭代的方式实现 flatten 函数。</h1><blockquote><p>将一个多维数组拍平为一个一维数组</p></blockquote><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">6</span>,[<span class="hljs-number">7</span>,[<span class="hljs-number">8</span>]]]]</code></pre><p>如何判断是否为数组：<br><code>Object.prototype.toString.call()</code> “[object Array]”<br><code>instanceof Array</code><br><code>Array.isArray()</code><br>就性能来说 <code>Array.isArray</code> 的性能最好，<code>instanceof</code> 比 <code>Object.prototype.toString.call()</code> 稍微好了一点点</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> example = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, [<span class="hljs-number">7</span>, [<span class="hljs-number">8</span>]]]]<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123;  <span class="hljs-keyword">let</span> flatArr = []  <span class="hljs-keyword">const</span> walk = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> arr) &#123;      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(item)) &#123;          flatArr.concat(walk(item))      &#125; <span class="hljs-keyword">else</span> &#123;        flatArr.push(item)      &#125;    &#125;  &#125;  walk(arr) <span class="hljs-keyword">return</span> flatArr&#125;<span class="hljs-built_in">console</span>.log(flatten(example))</code></pre><h1 id="37、为什么-Vuex-的-mutation-和-Redux-的-reducer-中不能做异步操作？"><a href="#37、为什么-Vuex-的-mutation-和-Redux-的-reducer-中不能做异步操作？" class="headerlink" title="37、为什么 Vuex 的 mutation 和 Redux 的 reducer 中不能做异步操作？"></a>37、为什么 Vuex 的 mutation 和 Redux 的 reducer 中不能做异步操作？</h1><p>Redux的设计参考了 Flux的模式，作者希望以此来实现时间旅行，保存应用的历史状态，实现应用状态的可预测。所以整个Redux都是函数式编程的范式，要求reducer是纯函数也是自然而然的事情，使用纯函数才能保证相同的输入得到相同的输入，保证状态的可预测。所以Redux有三大原则：</p><ul><li>单一数据源，也就是state</li><li>state 是只读，Redux并没有暴露出直接修改state的接口，必须通过action来触发修改</li><li>使用纯函数来修改state，reducer必须是纯函数</li></ul><p>同步的意义在于这样每一个 mutation 执行完成后都可以对应到一个新的状态（和 reducer 一样），这样 devtools 就可以打个 snapshot 存下来，然后就可以随便 time-travel 了。</p><p>如果你开着 devtool 调用一个异步的 action，你可以清楚地看到它所调用的 mutation 是何时被记录下来的，并且可以立刻查看它们对应的状态。其实我有个点子一直没时间做，那就是把记录下来的 mutations 做成类似 rx-marble 那样的时间线图，对于理解应用的异步状态变化很有帮助</p><p>一句话：为了devtools 开发工具更好的记录追踪 应用状态如何变化，更好的进行 time travel</p><h1 id="38、下面代码中-a-在什么情况下会打印-1？"><a href="#38、下面代码中-a-在什么情况下会打印-1？" class="headerlink" title="38、下面代码中 a 在什么情况下会打印 1？"></a>38、下面代码中 a 在什么情况下会打印 1？</h1><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = ?;<span class="hljs-keyword">if</span>(a == <span class="hljs-number">1</span> &amp;&amp; a == <span class="hljs-number">2</span> &amp;&amp; a == <span class="hljs-number">3</span>)&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);&#125;</code></pre><p><code>==</code>操作会隐式类型转换，即的执行一次<code>toString()</code>方法</p><blockquote><p>引用类型在比较运算符时候，隐式转换会调用本类型 toString 或 valueOf 方法.</p></blockquote><p>改写 a 的 <code>toString()</code>方法</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;  i: <span class="hljs-number">1</span>,  toString() &#123;    <span class="hljs-keyword">return</span> a.i++  &#125;&#125;<span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span> &amp;&amp; a == <span class="hljs-number">2</span> &amp;&amp; a == <span class="hljs-number">3</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)&#125;</code></pre><h1 id="39、介绍下-BFC-及其应用。"><a href="#39、介绍下-BFC-及其应用。" class="headerlink" title="39、介绍下 BFC 及其应用。"></a>39、介绍下 BFC 及其应用。</h1><p>BFC 就是块级格式上下文，是页面盒模型布局中的一种 CSS 渲染模式，相当于一个独立的容器，里面的元素和外部的元素相互不影响。创建 BFC 的方式有：</p><ol><li>html 根元素</li><li>float 浮动</li><li>绝对定位</li><li>overflow 不为 visiable</li><li>display 为表格布局或者弹性布局</li></ol><p>BFC 主要的作用是：</p><ol><li>清除浮动</li><li>防止同一 BFC 容器中的相邻元素间的外边距重叠问题</li></ol><p>BFC特性：</p><ol><li>内部box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定，在一个BFC中，两个相邻的块级盒子的垂直外边距会产生折叠。</li><li>在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）</li><li>形成了BFC的区域不会与float box重叠</li><li>计算BFC高度时，浮动元素也参与计算</li></ol><h1 id="40、在-Vue-中，子组件为何不可以修改父组件传递的-Prop"><a href="#40、在-Vue-中，子组件为何不可以修改父组件传递的-Prop" class="headerlink" title="40、在 Vue 中，子组件为何不可以修改父组件传递的 Prop"></a>40、在 Vue 中，子组件为何不可以修改父组件传递的 Prop</h1><blockquote><p>如果修改了，Vue 是如何监控到属性的修改并给出警告的。</p></blockquote><ol><li>单向数据流，易于监测数据的流动，出现了错误可以更加迅速的定位到错误发生的位置。</li><li>每当父组件属性值修改时，该值都将被覆盖；如果要有不同的改变，可以用基于 prop 的 data 或者 computed</li></ol><p>在 initProps 的时候，在 defineReactive 时通过判断是否在开发环境，如果是开发环境，会在触发 set 的时候判断是否此 key 是否处于 updatingChildren 中被修改，如果不是，说明此修改来自子组件，触发 warning 提示。</p><pre><code class="hljs js"><span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;      <span class="hljs-keyword">var</span> hyphenatedKey = hyphenate(key);      <span class="hljs-keyword">if</span> (isReservedAttribute(hyphenatedKey) ||          config.isReservedAttr(hyphenatedKey)) &#123;        warn(          (<span class="hljs-string">&quot;\&quot;&quot;</span> + hyphenatedKey + <span class="hljs-string">&quot;\&quot; is a reserved attribute and cannot be used as component prop.&quot;</span>),          vm        );      &#125;      defineReactive$$<span class="hljs-number">1</span>(props, key, value, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (!isRoot &amp;&amp; !isUpdatingChildComponent) &#123;          warn(            <span class="hljs-string">&quot;Avoid mutating a prop directly since the value will be &quot;</span> +            <span class="hljs-string">&quot;overwritten whenever the parent component re-renders. &quot;</span> +            <span class="hljs-string">&quot;Instead, use a data or computed property based on the prop&#x27;s &quot;</span> +            <span class="hljs-string">&quot;value. Prop being mutated: \&quot;&quot;</span> + key + <span class="hljs-string">&quot;\&quot;&quot;</span>,            vm          );        &#125;      &#125;);    &#125;</code></pre><p>在组件 <code>initProps</code> 方法的时候，会对 props 进行 defineReactive 操作，传入的第四个参数是自定义的 set 函数，该函数会在触发 props 的 set 方法时执行，当 props 修改了，就会运行这里传入的第四个参数，然后进行判断，如果不是 root 根组件，并且不是更新子组件，那么说明更新的是 props，所以会警告</p><pre><code class="hljs js"><span class="hljs-comment">// src/core/instance/state.js 源码路径</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initProps</span> (<span class="hljs-params">vm: Component, propsOptions: Object</span>) </span>&#123;  <span class="hljs-keyword">const</span> propsData = vm.$options.propsData || &#123;&#125;  <span class="hljs-keyword">const</span> props = vm._props = &#123;&#125;  <span class="hljs-comment">// cache prop keys so that future props updates can iterate using Array</span>  <span class="hljs-comment">// instead of dynamic object key enumeration.</span>  <span class="hljs-keyword">const</span> keys = vm.$options._propKeys = []  <span class="hljs-keyword">const</span> isRoot = !vm.$parent  <span class="hljs-comment">// root instance props should be converted</span>  <span class="hljs-keyword">if</span> (!isRoot) &#123;    toggleObserving(<span class="hljs-literal">false</span>)  &#125;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> propsOptions) &#123;    keys.push(key)    <span class="hljs-keyword">const</span> value = validateProp(key, propsOptions, propsData, vm)    <span class="hljs-comment">/* istanbul ignore else */</span>    <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;      <span class="hljs-keyword">const</span> hyphenatedKey = hyphenate(key)      <span class="hljs-keyword">if</span> (isReservedAttribute(hyphenatedKey) ||          config.isReservedAttr(hyphenatedKey)) &#123;        warn(          <span class="hljs-string">`&quot;<span class="hljs-subst">$&#123;hyphenatedKey&#125;</span>&quot; is a reserved attribute and cannot be used as component prop.`</span>,          vm        )      &#125;      defineReactive(props, key, value, <span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (!isRoot &amp;&amp; !isUpdatingChildComponent) &#123;          warn(            <span class="hljs-string">`Avoid mutating a prop directly since the value will be `</span> +            <span class="hljs-string">`overwritten whenever the parent component re-renders. `</span> +            <span class="hljs-string">`Instead, use a data or computed property based on the prop&#x27;s `</span> +            <span class="hljs-string">`value. Prop being mutated: &quot;<span class="hljs-subst">$&#123;key&#125;</span>&quot;`</span>,            vm          )        &#125;      &#125;)    &#125; <span class="hljs-keyword">else</span> &#123;      defineReactive(props, key, value)    &#125;    <span class="hljs-comment">// static props are already proxied on the component&#x27;s prototype</span>    <span class="hljs-comment">// during Vue.extend(). We only need to proxy props defined at</span>    <span class="hljs-comment">// instantiation here.</span>    <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> vm)) &#123;      proxy(vm, <span class="hljs-string">`_props`</span>, key)    &#125;  &#125;  toggleObserving(<span class="hljs-literal">true</span>)&#125;<span class="hljs-comment">// src/core/observer/index.js</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Define a reactive property on an Object.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span> (<span class="hljs-params"></span></span><span class="hljs-function"><span class="hljs-params">  obj: Object,</span></span><span class="hljs-function"><span class="hljs-params">  key: string,</span></span><span class="hljs-function"><span class="hljs-params">  val: any,</span></span><span class="hljs-function"><span class="hljs-params">  customSetter?: ?Function,</span></span><span class="hljs-function"><span class="hljs-params">  shallow?: boolean</span></span><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> Dep()  <span class="hljs-keyword">const</span> property = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj, key)  <span class="hljs-keyword">if</span> (property &amp;&amp; property.configurable === <span class="hljs-literal">false</span>) &#123;    <span class="hljs-keyword">return</span>  &#125;  <span class="hljs-comment">// cater for pre-defined getter/setters</span>  <span class="hljs-keyword">const</span> getter = property &amp;&amp; property.get  <span class="hljs-keyword">const</span> setter = property &amp;&amp; property.set  <span class="hljs-keyword">if</span> ((!getter || setter) &amp;&amp; <span class="hljs-built_in">arguments</span>.length === <span class="hljs-number">2</span>) &#123;    val = obj[key]  &#125;  <span class="hljs-keyword">let</span> childOb = !shallow &amp;&amp; observe(val)  <span class="hljs-built_in">Object</span>.defineProperty(obj, key, &#123;    enumerable: <span class="hljs-literal">true</span>,    configurable: <span class="hljs-literal">true</span>,    get: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactiveGetter</span> (<span class="hljs-params"></span>) </span>&#123;      <span class="hljs-keyword">const</span> value = getter ? getter.call(obj) : val      <span class="hljs-keyword">if</span> (Dep.target) &#123;        dep.depend()        <span class="hljs-keyword">if</span> (childOb) &#123;          childOb.dep.depend()          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(value)) &#123;            dependArray(value)          &#125;        &#125;      &#125;      <span class="hljs-keyword">return</span> value    &#125;,    set: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactiveSetter</span> (<span class="hljs-params">newVal</span>) </span>&#123;      <span class="hljs-keyword">const</span> value = getter ? getter.call(obj) : val      <span class="hljs-comment">/* eslint-disable no-self-compare */</span>      <span class="hljs-keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;        <span class="hljs-keyword">return</span>      &#125;      <span class="hljs-comment">/* eslint-enable no-self-compare */</span>      <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;        customSetter()      &#125;      <span class="hljs-comment">// #7981: for accessor properties without setter</span>      <span class="hljs-keyword">if</span> (getter &amp;&amp; !setter) <span class="hljs-keyword">return</span>      <span class="hljs-keyword">if</span> (setter) &#123;        setter.call(obj, newVal)      &#125; <span class="hljs-keyword">else</span> &#123;        val = newVal      &#125;      childOb = !shallow &amp;&amp; observe(newVal)      dep.notify()    &#125;</code></pre><p>如果传入的 props 是基本数据类型，子组件修改父组件传的 props 会警告，并且修改不成功，如果传入的是引用数据类型，那么修改改引用数据类型的某个属性值时，对应的 props 也会修改，并且 vue 不会抱警告。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器输入URL发生了什么</title>
    <link href="/2020/11/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <url>/2020/11/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器输入URL发生了什么"><a href="#浏览器输入URL发生了什么" class="headerlink" title="浏览器输入URL发生了什么"></a>浏览器输入URL发生了什么</h1><p>从输入 <code>URL</code> 到页面呈现发生了什么？</p><p>整体过程：</p><p>在用户输入 URL，按下回车之后，走过的步骤：</p><ol><li><code>DNS</code> 解析</li><li><code>TCP</code> 连接</li><li>发送 <code>HTTP</code> 请求</li><li>服务器响应</li><li>浏览器解析渲染页面</li></ol><h1 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h1><blockquote><p><code>DNS</code> 解析过程就是通过网络查找哪台机器有你需要的资源的过程。</p></blockquote><p>浏览器输入 <code>github.com</code> 并不是真正意义上的去查找这个，而是查找这个域名解析到的 <code>IP</code> 地址。</p><p>互联网上每一台计算机的唯一标识是它的 <code>IP</code> 地址，但是 <code>IP</code> 地址并不方便记忆，所以互联网设计者为了方便，才会搞出 <code>github.com</code> 这样的域名。</p><ul><li>DNS 解析过程：</li></ul><ol><li>查询 <code>www.github.com</code></li><li>访问客户端 DNS 缓存：<strong>浏览器缓存</strong> → <strong>系统缓存（host）</strong> →  <strong>路由器缓存</strong></li><li>访问 <strong>ISP DNS 服务器</strong>（ISP，互联网服务提供商），如果本地服务器有，则直接返回；如果没有，让本地 DNS 服务器去咨询查找。</li><li>本地去咨询 <strong>DNS 根服务器</strong>，DNS 根服务器发现是 <code>.com 区域</code> 管理的，告诉本地去咨询它。</li><li>本地去咨询 <strong>.com 顶级域名服务器</strong>，.com 顶级域名服务器不太清楚，告诉本地去咨询 <code>github.com</code> 主区域 的服务器。</li><li>本地去咨询 <strong>github.com 主域名服务器</strong>，baidu.com 域服务器查找到对应的 IP 地址，返回给本地。</li><li>本地服务器通知用户，<code>github.com</code> 对应的 IP 地址，同时缓存这个 IP 地址，下次就直接访问了。</li></ol><h1 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h1><blockquote><p>TCP 连接的内容，详细请看 《TCP 三次握手和四次挥手》</p></blockquote><ul><li>建立连接阶段：3 次握手。建立客户端和服务器之间的连接。</li><li>传输数据阶段</li><li>断开连接阶段：4 次挥手。断开客户端和服务器之间的连接。</li></ul><h1 id="发送-HTTP-请求"><a href="#发送-HTTP-请求" class="headerlink" title="发送 HTTP 请求"></a>发送 HTTP 请求</h1><p>发送 <code>HTTP</code> 请求的过程就是构建 <code>HTTP</code> 请求报文，并通过 <code>TCP</code> 协议发送到服务器指定端口（<code>HTTP</code> 协议默认端口 <code>80/8080</code>，<code>HTTPS</code> 协议默认端口 <code>443</code>）。</p><p><code>HTTP</code> 请求报文由 3 部分组成：<strong>请求行</strong>、<strong>请求报文</strong> 和 <strong>请求正文</strong>。</p><ul><li>请求行：常用方法有：GET、POST、PUT、DELETE、OPTIONS、HEAD。</li><li>请求报头：允许客户端向服务器传递请求的附加信息和客户端自身的信息。</li><li>请求正文：通过 POST、PUT 等方法时，通常需要客户端向服务器传递数据，这些数据就储存在请求正文中。</li></ul><p>当然，<code>HTTP</code> 请求需要注意是否跨域，如何解决跨域问题：</p><ul><li><p>JSONP</p></li><li><p>跨域资源共享（CORS）服务端设置 <code>Access-Control-Allow-Origin</code></p></li><li><p>Nginx 反向代理跨域</p><p>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p></li></ul><h1 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h1><p>服务器处理请求完毕后，会返回 <code>HTTP</code> 报文。</p><p><code>HTTP</code> 响应报文也是由 3 部分组成：<strong>状态码</strong>、<strong>响应报头</strong> 和 <strong>响应报文</strong>。</p><p><strong>状态码</strong>：<code>1xx</code> 指示信息-表示请求已接收；<code>2xx</code> 请求成功-表示请求成功接收并解析；<code>3xx</code> 重定向-表示要完成请求需要更进一步操作；<code>4xx</code> 客户端错误-请求有语法错误或者请求无法实现；<code>5xx</code>：服务端错误-服务端未能实现合法的请求。</p><p><strong>常见状态码</strong>：200（成功）、304（请求内容有缓存，不需要更新）、404（网页或者文件找不到）、500（服务器-后端处理错误）。</p><p><strong>响应报头</strong>：常见的响应报头字段 <code>Server</code>、<code>Connection</code> 等。</p><p><strong>响应报文</strong>：服务器返回给浏览器的文本信息，通常 HTML、CSS、JS、图片等文件就放在这一部分。</p><h1 id="浏览器解析渲染页面"><a href="#浏览器解析渲染页面" class="headerlink" title="浏览器解析渲染页面"></a>浏览器解析渲染页面</h1><p>浏览器的渲染过程为：</p><ol><li>解析 HTML，生成 <code>DOM</code> 树</li><li>解析 CSS，生成 <code>CSS 规则树（CSS Rule Tree）</code></li><li>将 <code>DOM Tree</code> 和 <code>CSS Rule Tree</code> 相结合，生成 <strong>渲染树</strong>（<code>Render Tree</code>）</li><li>从根节点开始，计算每一个元素的大小、位置，给出每个节点所应该出现的屏幕精确坐标，从而得到基于渲染树的 <strong>布局渲染树</strong>（<code>Layout of the render tree</code>）。</li><li>遍历渲染树，将每个节点用 UI 渲染引擎来绘制，从而将整棵树绘制到页面上，这个步骤叫 <strong>绘制渲染树</strong>（<code>Painting the render tree</code>）</li></ol><p>在解析渲染过程中，可能会产生 <strong>回流</strong> 和 <strong>重绘</strong>：</p><ul><li>重绘 (repaint)：当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要 UI 层面的重新像素绘制，因此<strong>损耗较少</strong>。</li><li>回流 (reflow)：又叫重排（<code>layout</code>）。当元素的尺寸、结构或者触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。</li></ul><h2 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a>渲染阻塞</h2><p>JavaScript 的加载、解析和执行会阻塞 DOM 的构建。</p><p>在渲染的过程中，遇到一个 script 标记时，就会停止渲染，去请求脚本文件并执行脚本文件，因为浏览器渲染和 JavaScript 执行共用一个线程，而且这里必须是单线程操作，多线程会产生渲染 DOM 冲突。</p><p>JavaScript 的加载、解析与执行会严重阻塞DOM的构建。只有等到脚本文件执行完毕，才会去继续构建DOM。</p><p>JavaScript 不单会阻塞DOM构建，还会导致 CSSOM 也阻塞 DOM 的构建，如果 JavaScript 脚本还操作了CSSOM，而正好这个 CSSOM 还没有下载和构建，浏览器甚至会延迟脚本执行和构建 DOM，直至完成其 CSSOM的下载和构建，然后再执行 JavaScript，最后在继续构建 DOM。</p><p>因此 script 的位置很重要，在实际使用过程中遵循以下两个原则：</p><p>CSS 优先：引入顺序上，CSS 资源先于 JavaScript 资源。<br>JavaScript 置后：我们通常把JS代码放到页面底部，且 JavaScript 应尽量少影响 DOM 的构建。</p><p>也就是说：首屏渲染越快，就越不应该在首屏的时候加载 JS 文件，这也就是建议将 <code>script</code> 标签放到 <code>body</code> 标签底部，或者给 <code>script</code> 标签添加 <code>defer/async</code> 属性的原因。</p><h2 id="为什么操作-DOM-慢"><a href="#为什么操作-DOM-慢" class="headerlink" title="为什么操作 DOM 慢"></a>为什么操作 DOM 慢</h2><ol><li>涉及 JS 引擎和渲染引擎两个线程间的通信，损耗性能。</li><li>操作 DOM 可能会重复回流，加剧性能损耗。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP 三次握手四次挥手</title>
    <link href="/2020/11/20/TCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <url>/2020/11/20/TCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="TCP-的概述"><a href="#TCP-的概述" class="headerlink" title="TCP 的概述"></a>TCP 的概述</h1><p>TCP 把连接作为最基本的对象，每一条 TCP 连接都有两个端点，这种端点我们叫作套接字（socket），它的定义为端口号拼接到 IP 地址即构成了套接字，例如，若 IP 地址为192.3.4.16 而端口号为 80，那么得到的套接字为192.3.4.16:80。</p><p><strong>常用的熟知端口号</strong></p><table><thead><tr><th align="center">应用程序</th><th align="center">FTP</th><th align="center">TFTP</th><th align="center">TELNET</th><th align="center">SMTP</th><th align="center">DNS</th><th align="center">HTTP/HTTPS</th><th align="center">SSH</th><th align="center">MYSQL</th></tr></thead><tbody><tr><td align="center">熟知端口</td><td align="center">21,20</td><td align="center">69</td><td align="center">23</td><td align="center">25</td><td align="center">53</td><td align="center">80/443</td><td align="center">22</td><td align="center">3306</td></tr><tr><td align="center">传输层协议</td><td align="center">TCP</td><td align="center">UDP</td><td align="center">TCP</td><td align="center">TCP</td><td align="center">UDP</td><td align="center">TCP</td><td align="center">TCP</td><td align="center">TCP</td></tr></tbody></table><h1 id="TCP-的特性"><a href="#TCP-的特性" class="headerlink" title="TCP 的特性"></a>TCP 的特性</h1><ul><li>TCP 提供一种<strong>面向连接的、可靠的</strong>字节流服务</li><li>在一个 TCP 连接中，仅有两方进行彼此通信。广播和多播不能用于 TCP</li><li>TCP 使用校验和，确认和重传机制来保证可靠传输</li><li>TCP 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复</li><li>TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li></ul><p><strong>注意</strong>：TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。TCP 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。</p><h1 id="TCP-报文首部"><a href="#TCP-报文首部" class="headerlink" title="TCP 报文首部"></a>TCP 报文首部</h1><ol><li><p><strong>源端口</strong>和<strong>目的端口</strong>，各占2个字节，分别写入源端口和目的端口；</p></li><li><p><strong>序号</strong>，占4个字节，TCP 连接中传送的字节流中的每个字节都按顺序编号。</p><blockquote><p>例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从 401 开始；</p></blockquote></li><li><p><strong>确认号</strong>，占4个字节，是期望收到对方下一个报文的第一个数据字节的序号。</p><blockquote><p>例如，B 收到了 A 发送过来的报文，其序列号字段是 501，而数据长度是 200字节，这表明 B 正确的收到了 A 发送的到序号 700 为止的数据。因此，B 期望收到 A 的下一个数据序号是 701，于是 B 在发送给A 的确认报文段中把确认号置为 701；</p></blockquote></li><li><p><strong>数据偏移</strong>，占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远；</p></li><li><p><strong>保留</strong>，占6位，保留今后使用，但目前应都位0；</p></li><li><p>紧急<code>URG</code>，当 <code>URG=1</code>，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；</p></li><li><p>确认<code>ACK</code>，仅当<code>ACK=1</code>时，确认号字段才有效。TCP 规定，在连接建立后所有报文的传输都必须把 <code>ACK</code> 置1；</p></li><li><p>推送<code>PSH</code>，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将 <code>PSH=1</code>；</p></li><li><p>复位<code>RST</code>，当 <code>RST=1</code>，表明 TCP 连接中出现严重差错，必须释放连接，然后再重新建立连接；</p></li><li><p>同步<code>SYN</code>，在连接建立时用来同步序号。</p><blockquote><p>当 <code>SYN=1</code>，<code>ACK=0</code>，表明是连接请求报文，若同意连接，则响应报文中应该使 <code>SYN=1</code>，<code>ACK=1</code>；</p></blockquote></li><li><p>终止<code>FIN</code>，用来释放连接。</p><blockquote><p>当 <code>FIN=1</code>，表明此报文的发送方的数据已经发送完毕，并且要求释放；</p></blockquote></li><li><p><strong>窗口</strong>，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；</p></li><li><p><strong>检验和</strong>，占2字节，校验首部和数据这两部分；</p></li><li><p><strong>紧急指针</strong>，占2字节，指出本报文段中的紧急数据的字节数；</p></li><li><p><strong>选项</strong>，长度可变，定义一些其他的可选的参数。</p></li></ol><h1 id="TCP-三次握手和四次挥手"><a href="#TCP-三次握手和四次挥手" class="headerlink" title="TCP 三次握手和四次挥手"></a>TCP 三次握手和四次挥手</h1><blockquote><p>拟人化场景解释 TCP 三次握手和四次挥手：</p></blockquote><p>三次握手：</p><p>Browser：先告诉服务器 “我要开始发起请求了，你那边可以吗？”<br>Server：服务器回复浏览器 “没问题，你发吧！”<br>Browser：告诉服务器 “好的，那我开始发了。”</p><p>四次挥手：</p><p>Browser：先告诉服务器 “我数据都发完了，你可以关闭连接了。”<br>Server：回复浏览器 “我先看看我这边还有没有数据没传完。”<br>Server：确认过以后，再次回复浏览器 “我这边数据传输完成了，你可以关闭连接了。”<br>Browser：告诉服务器 “好的，那我真的关闭了。你不用回复我了。”</p><p>Browser 又等了 2MSL，确认确实没有再收到请求了，才会真的关闭TCP连接。</p><h1 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h1><blockquote><p>最开始的时候客户端和服务器都是处于 CLOSED 状态。主动打开连接的为客户端，被动打开连接的是服务器</p></blockquote><p>所谓三次握手 (Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。</p><p><img src="/images/3handshakes.gif" alt="3handshakes"><br>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。</p><ul><li><p>第一次握手( <code>SYN=1</code>，<code>seq=x</code> ):</p><p>客户端发送一个 TCP 的 <code>SYN</code> 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X，保存在包头的序列号(Sequence Number)字段里。</p><p>发送完毕后，客户端进入 <strong>SYN_SEND</strong> 状态。</p></li><li><p>第二次握手( <code>SYN=1</code>， <code>ACK=1</code>，<code>seq=y</code>， <code>ACKnum=x+1</code> ):</p><p>服务器发回确认包(ACK) 应答。即 <code>SYN</code> 标志位和 <code>ACK</code> 标志位均为 1。服务器端选择自己 <code>ISN</code> 序列号，放到 <code>Seq</code> 域里，同时将确认序号 (Acknowledgement Number) 设置为客户的 <code>ISN</code> 加1，即 X+1。 发送完毕后，服务器端进入 <strong>SYN_RCVD</strong> 状态。</p></li><li><p>第三次握手( <code>ACK=1</code>，<code>ACKnum=y+1</code> )</p><p>客户端再次发送确认包(ACK)，<code>SYN</code> 标志位为 0，<code>ACK</code> 标志位为1，并且把服务器发来 <code>ACK</code> 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写<code>ISN</code>的+1</p><p>发送完毕后，客户端进入 <strong>ESTABLISHED</strong> 状态，当服务器端接收到这个包时，也进入 <strong>ESTABLISHED</strong> 状态，TCP 握手结束。</p></li></ul><h1 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h1><p>TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。</p><p>客户端或服务器均可主动发起挥手动作。</p><p><img src="/images/4handshakes.gif" alt="4handshakes"></p><ul><li><p>第一次挥手( <code>FIN=1</code>，<code>seq=x</code> )</p><p>假设客户端想要关闭连接，客户端发送一个 <code>FIN</code> 标志位置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p><p>发送完毕后，客户端进入 <strong>FIN_WAIT_1</strong> 状态。</p></li><li><p>第二次挥手( <code>ACK=1</code>，<code>ACKnum=x+1</code> )</p><p>服务器端确认客户端的 <code>FIN</code> 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p><p>发送完毕后，服务器端进入 <strong>CLOSE_WAIT</strong> 状态，客户端接收到这个确认包之后，进入 <strong>FIN_WAIT_2</strong> 状态，等待服务器端关闭连接。</p></li><li><p>第三次挥手( <code>FIN=1</code>，<code>seq=y</code> )</p><p>服务器端准备好关闭连接时，向客户端发送结束连接请求，<code>FIN</code> 置为1。</p><p>发送完毕后，服务器端进入 <strong>LAST_ACK</strong> 状态，等待来自客户端的最后一个 <code>ACK</code>。</p></li><li><p>第四次挥手( <code>ACK=1</code>，<code>ACKnum=y+1</code> )</p><p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 <strong>TIME_WAIT</strong> 状态，等待可能出现的要求重传的 <code>ACK</code> 包。</p><p>服务器端接收到这个确认包之后，关闭连接，进入 <strong>CLOSED</strong> 状态。</p></li></ul><p>客户端等待了两个最大段生命周期（2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 <code>ACK</code> ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 <strong>CLOSED</strong> 状态。</p><h1 id="三次握手的过程为什么是三次而不是两次、四次？"><a href="#三次握手的过程为什么是三次而不是两次、四次？" class="headerlink" title="三次握手的过程为什么是三次而不是两次、四次？"></a>三次握手的过程为什么是三次而不是两次、四次？</h1><h2 id="为什么不是两次？"><a href="#为什么不是两次？" class="headerlink" title="为什么不是两次？"></a>为什么不是两次？</h2><blockquote><p>为什么TCP客户端最后还要发送一次确认呢？</p></blockquote><p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p><p>如果使用的是两次握手建立连接，假设有这样一种场景，<strong>客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了</strong>，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。</p><p>此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</p><p>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p><h2 id="为什么不是四次？"><a href="#为什么不是四次？" class="headerlink" title="为什么不是四次？"></a>为什么不是四次？</h2><p>可以是四次，但是三次就可以安全建立连接，四次会浪费资源不必要。</p><h1 id="为什么是四次挥手而不是三次？"><a href="#为什么是四次挥手而不是三次？" class="headerlink" title="为什么是四次挥手而不是三次？"></a>为什么是四次挥手而不是三次？</h1><blockquote><p>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p></blockquote><p>建立连接的时候， 服务器在 <strong>LISTEN</strong> 状态下，收到建立连接请求的 <code>SYN</code> 报文后，把 <code>ACK</code> 和 <code>SYN</code> 放在一个报文里发送给客户端。</p><p>而关闭连接时，服务器收到对方的 <code>FIN</code> 报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送 <code>FIN</code> 报文给对方来表示同意现在关闭连接，因此，己方 <code>ACK</code> 和 <code>FIN</code> 一般都会分开发送，从而导致多了一次。</p><h2 id="为什么客户端最后还要等待2MSL？"><a href="#为什么客户端最后还要等待2MSL？" class="headerlink" title="为什么客户端最后还要等待2MSL？"></a>为什么客户端最后还要等待2MSL？</h2><p>MSL 是 Maximum Segment Lifetime 的英文缩写，可译为“最长报文段寿命”，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。TCP 允许不同的实现可以设置不同的 MSL 值。</p><p>第一，保证客户端发送的最后一个 <code>ACK</code> 报文能够到达服务器，因为这个 <code>ACK</code> 报文可能丢失，<strong>站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次</strong>，而客户端就能在这个 2MSL 时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p><p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个 2MSL 时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p><h1 id="TCP-KeepAlive"><a href="#TCP-KeepAlive" class="headerlink" title="TCP KeepAlive"></a>TCP KeepAlive</h1><p>TCP 的连接，实际上是一种纯软件层面的概念，在物理层面并没有“连接”这种概念。</p><p>TCP 通信双方建立交互的连接，但是并不是一直存在数据交互，有些连接会在数据交互完毕后，主动释放连接，而有些不会。</p><p>在长时间无数据交互的时间段内，交互双方都有可能出现掉电、死机、异常重启等各种意外，当这些意外发生之后，这些 TCP 连接并未来得及正常释放，在软件层面上，连接的另一方并不知道对端的情况，它会一直维护这个连接，长时间的积累会导致非常多的半打开连接，造成端系统资源的消耗和浪费，为了解决这个问题，在传输层可以利用 TCP 的 KeepAlive 机制实现来实现。主流的操作系统基本都在内核里支持了这个特性。</p><p>TCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。</p>]]></content>
    
    
    
    <tags>
      
      <tag>TCP</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 中的继承</title>
    <link href="/2020/11/16/JavaScript%20%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <url>/2020/11/16/JavaScript%20%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-中的继承"><a href="#JavaScript-中的继承" class="headerlink" title="JavaScript 中的继承"></a>JavaScript 中的继承</h1><p>在 JavaScript 中的继承可以以是否使用<code>Object.create</code>大致分为两类：</p><p><img src="/images/js-extends.jpg" alt="js-extends">  </p><p>不使用<code>Object.create</code>：</p><ol><li>原型链继承</li><li>构造函数继承</li><li>组合继承</li></ol><p>使用<code>Object.create</code>：</p><ol start="4"><li>原型式继承</li><li>寄生式继承</li><li>寄生组合继承</li></ol><p>以及ES6 Class 继承</p><h1 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h1><p><code>Object.create()</code> 方法创建一个新对象，使用现有的对象来提供新创建的对象的 <code>__proto__</code>。</p><p>语法：</p><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.create(proto，[propertiesObject])</code></pre><p>参数:</p><ul><li><p><code>proto</code></p><p> 新创建对象的原型对象。</p></li><li><p><code>propertiesObject</code></p><p>可选。需要传入一个对象，该对象的属性类型参照<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties"><code>Object.defineProperties()</code></a>的第二个参数。</p></li></ul><p>返回值:</p><p>一个新对象，带着指定的原型对象和属性。</p><p><code>Object.create()</code>的 Polyfill 方法：</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>)</span>&#123;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;  F.prototype = o  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F()&#125;<span class="hljs-comment">//等价于</span><span class="hljs-built_in">Object</span>.create(o)</code></pre><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>首先，先准备一个父类：</p><pre><code class="hljs js"><span class="hljs-comment">// 定义一个动物类</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span> (<span class="hljs-params">name</span>) </span>&#123;  <span class="hljs-comment">// 属性</span>  <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Animal&#x27;</span>  <span class="hljs-comment">// 实例方法</span>  <span class="hljs-built_in">this</span>.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;正在睡觉！&#x27;</span>)  &#125;&#125;<span class="hljs-comment">// 原型方法</span>Animal.prototype.eat = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">food</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;正在吃：&#x27;</span> + food)&#125;;</code></pre><h1 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h1><blockquote><p>核心： 将父类的实例作为子类的原型</p></blockquote><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params"></span>)</span>&#123; &#125;Cat.prototype = <span class="hljs-keyword">new</span> Animal()Cat.prototype.name = <span class="hljs-string">&#x27;cat&#x27;</span><span class="hljs-comment">//　Test Code</span><span class="hljs-keyword">var</span> cat = <span class="hljs-keyword">new</span> Cat()<span class="hljs-built_in">console</span>.log(cat.name);cat.eat(<span class="hljs-string">&#x27;fish&#x27;</span>)cat.sleep()<span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal) <span class="hljs-comment">//true </span><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat) <span class="hljs-comment">//true </span></code></pre><p>特点：</p><ol><li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li><li>父类新增原型方法/原型属性，子类都能访问到</li><li>简单，易于实现</li></ol><p>缺点：</p><ol><li>要想为子类新增属性和方法，必须要在<code>new Animal()</code>这样的语句之后执行，不能放到构造器中<br>无法实现多继承</li><li>来自原型对象的引用属性是所有实例共享的</li><li>创建子类实例时，无法向父类构造函数传参</li></ol><h1 id="2、构造继承"><a href="#2、构造继承" class="headerlink" title="2、构造继承"></a>2、构造继承</h1><blockquote><p>核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p></blockquote><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name</span>)</span>&#123;  Animal.call(<span class="hljs-built_in">this</span>)  <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Tom&#x27;</span>&#125;<span class="hljs-comment">// Test Code</span><span class="hljs-keyword">var</span> cat = <span class="hljs-keyword">new</span> Cat()<span class="hljs-built_in">console</span>.log(cat.name)cat.sleep()<span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal) <span class="hljs-comment">// false</span><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat) <span class="hljs-comment">// true</span></code></pre><p>特点：</p><ol><li>解决了「原型链继承」中，子类实例共享父类引用属性的问题</li><li>创建子类实例时，可以向父类传递参数</li><li>可以实现多继承（call多个父类对象） </li></ol><p>缺点：</p><ol><li>实例并不是父类的实例，只是子类的实例</li><li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li><li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li></ol><h1 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h1><blockquote><p>核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p></blockquote><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name</span>)</span>&#123;  Animal.call(<span class="hljs-built_in">this</span>)  <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Tom&#x27;</span>&#125;Cat.prototype = <span class="hljs-keyword">new</span> Animal()<span class="hljs-comment">//组合继承也是需要修复构造函数指向的。</span>Cat.prototype.constructor = Cat<span class="hljs-comment">// Test Code</span><span class="hljs-keyword">var</span> cat = <span class="hljs-keyword">new</span> Cat()<span class="hljs-built_in">console</span>.log(cat.name)cat.sleep()<span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal) <span class="hljs-comment">// true</span><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat) <span class="hljs-comment">// true</span></code></pre><p>特点：</p><ol><li>弥补了「构造继承」的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</li><li>既是子类的实例，也是父类的实例</li><li>不存在引用属性共享问题</li><li>可传参</li><li>函数可复用</li></ol><p>缺点：</p><ol><li>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li></ol><h1 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h1><blockquote><p>核心：原型式继承的 object方法 本质上是对参数对象的一个浅复制。</p></blockquote><pre><code class="hljs js"><span class="hljs-comment">//利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。</span><span class="hljs-comment">//就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>)</span>&#123;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;  F.prototype = o  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F()&#125;<span class="hljs-keyword">var</span> person = &#123;  name: <span class="hljs-string">&quot;Nicholas&quot;</span>,  friends: [<span class="hljs-string">&quot;Shelby&quot;</span>, <span class="hljs-string">&quot;Court&quot;</span>, <span class="hljs-string">&quot;Van&quot;</span>]&#125;<span class="hljs-keyword">var</span> anotherPerson = object(person)anotherPerson.name = <span class="hljs-string">&quot;Greg&quot;</span>anotherPerson.friends.push(<span class="hljs-string">&quot;Rob&quot;</span>)<span class="hljs-keyword">var</span> yetAnotherPerson = object(person)yetAnotherPerson.name = <span class="hljs-string">&quot;Linda&quot;</span>yetAnotherPerson.friends.push(<span class="hljs-string">&quot;Barbie&quot;</span>)alert(person.friends);  <span class="hljs-comment">//&quot;Shelby,Court,Van,Rob,Barbie&quot;</span><span class="hljs-comment">//注意：修改anotherPerson.name的值，yetAnotherPerson.name的值并未发生改变，并不是因为anotherPerson 和 yetAnotherPerson 有独立的 name 值，而是因为 anotherPerson.name = &quot;Greg&quot;，给anotherPerson添加了 name 值，并非修改了原型上的 name 值。</span></code></pre><p>缺点：</p><ol><li>包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。</li></ol><h1 id="5、寄生继承"><a href="#5、寄生继承" class="headerlink" title="5、寄生继承"></a>5、寄生继承</h1><blockquote><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。</p></blockquote><pre><code class="hljs js"><span class="hljs-comment">// 寄生继承</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name</span>) </span>&#123;    Animal.call(<span class="hljs-built_in">this</span>)    <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Tom&#x27;</span>&#125;<span class="hljs-comment">// function object(o) &#123;</span><span class="hljs-comment">//     function F()&#123;&#125;</span><span class="hljs-comment">//     F.prototype = o</span><span class="hljs-comment">//     return new F()</span><span class="hljs-comment">// &#125;</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createAnother</span>(<span class="hljs-params">original</span>) </span>&#123;    <span class="hljs-comment">// 通过调用函数创建一个新对象</span>    <span class="hljs-keyword">var</span> clone = <span class="hljs-built_in">Object</span>.create(original)    <span class="hljs-comment">// 以某种方式来增强这个对象</span>    clone.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        alert(<span class="hljs-string">&quot;hi&quot;</span>)    &#125;clone.name = <span class="hljs-string">&#x27;Tom&#x27;</span>    <span class="hljs-keyword">return</span> clone&#125;<span class="hljs-comment">// Test Code</span><span class="hljs-keyword">var</span> cat = createAnother(<span class="hljs-keyword">new</span> Animal())<span class="hljs-built_in">console</span>.log(cat.name)cat.sayHi()<span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal) <span class="hljs-comment">// true</span><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat)</code></pre><p>特点：</p><ol><li>可以增强子例对象功</li><li>例子中使用的 Object.create(original) 函数不是必须的，可以使用任何能够返回新对象的函数都适用于此模式</li></ol><p>缺点：</p><ol><li>不能做到函数复用而降低效率</li><li>只是借用了一个没有属性子类实例作为原型，并没有真正的意义上的子类，constructor 依然指向父类</li></ol><h2 id="6、寄生组合继承"><a href="#6、寄生组合继承" class="headerlink" title="6、寄生组合继承"></a>6、寄生组合继承</h2><blockquote><p>核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p></blockquote><pre><code class="hljs js"><span class="hljs-comment">// 寄生组合继承</span><span class="hljs-comment">// 该实现没有修复constructor</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name</span>) </span>&#123;    Animal.call(<span class="hljs-built_in">this</span>)    <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Tom&#x27;</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Class&#125;</span> </span>Father 父类构造函数</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Class&#125;</span> </span>Son 子类构造函数</span><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;Object&#125;</span> </span>子类实例 </span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parasiteExtend</span>(<span class="hljs-params">Father, Son</span>) </span>&#123;    <span class="hljs-comment">// 没有实例方法的临时类</span>    <span class="hljs-comment">// let Super = function () &#123;&#125;</span>    <span class="hljs-comment">// Super.prototype = Father.prototype</span><span class="hljs-comment">// Son.prototype = new Super()</span>    Son.prototype = <span class="hljs-built_in">Object</span>.create(Father.prototype)    <span class="hljs-comment">// 修复constructor</span>    Son.prototype.constructor = Son    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Son()&#125;<span class="hljs-comment">// Test Code</span><span class="hljs-keyword">var</span> cat = parasiteExtend(Animal,Cat)<span class="hljs-built_in">console</span>.log(cat.name)cat.sleep()<span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal) <span class="hljs-comment">// true</span><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat) <span class="hljs-comment">// true</span></code></pre><p>特点：</p><ol><li>堪称完美</li></ol><p>缺点：</p><ol><li>实现较为复杂</li></ol><h1 id="ES6-Class-extends"><a href="#ES6-Class-extends" class="headerlink" title="ES6 Class extends"></a>ES6 Class extends</h1><blockquote><p>核心： ES6继承的结果和寄生组合继承相似，本质上，ES6继承是一种语法糖。</p></blockquote><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;  <span class="hljs-keyword">constructor</span>(name, gender) &#123;    <span class="hljs-built_in">super</span>(name)    <span class="hljs-built_in">this</span>.gender = gender  &#125;  like() &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;cat like fish&#x27;</span>)  &#125;&#125;<span class="hljs-comment">//　Test Code</span><span class="hljs-keyword">var</span> cat = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-string">&#x27;Man&#x27;</span>)<span class="hljs-built_in">console</span>.log(cat.name)<span class="hljs-comment">//Tom</span><span class="hljs-built_in">console</span>.log(cat.gender)<span class="hljs-comment">//Man</span>cat.eat(<span class="hljs-string">&#x27;fish&#x27;</span>)<span class="hljs-comment">//Tom正在吃fish</span>cat.sleep()<span class="hljs-comment">//我的name是Tom</span>cat.like()<span class="hljs-comment">//cat like fish</span><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal)<span class="hljs-comment">//true</span><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat)<span class="hljs-comment">//true</span></code></pre><p>寄生组合继承是先创建子类实例 this 对象，然后再对其增强；</p><p>而 ES6 先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;  <span class="hljs-keyword">constructor</span>() &#123;    <span class="hljs-built_in">super</span>();  &#125;&#125;</code></pre><p>ES6 实现继承的具体原理：</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;&#125;<span class="hljs-built_in">Object</span>.setPrototypeOf = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj, proto</span>) </span>&#123;  obj.__proto__ = proto;  <span class="hljs-keyword">return</span> obj;&#125;<span class="hljs-comment">// B 的实例继承 A 的实例</span><span class="hljs-built_in">Object</span>.setPrototypeOf(B.prototype, A.prototype);<span class="hljs-comment">// B 继承 A 的静态属性</span><span class="hljs-built_in">Object</span>.setPrototypeOf(B, A);</code></pre><p>ES6 继承与 ES5 继承的异同：<br>相同点：</p><ul><li>本质上ES6继承是ES5继承的语法糖</li></ul><p>不同点：</p><ul><li>ES6 继承中子类的构造函数的原型链指向父类的构造函数，ES5 中使用的是构造函数复制，没有原型链指向。</li><li>ES6 子类实例的构建，基于父类实例，ES5 中不是。</li></ul><h1 id="ES5-ES6-的继承除了写法以外还有什么区别？"><a href="#ES5-ES6-的继承除了写法以外还有什么区别？" class="headerlink" title="ES5/ES6 的继承除了写法以外还有什么区别？"></a>ES5/ES6 的继承除了写法以外还有什么区别？</h1><ol><li><code>class</code> 声明会提升，但不会初始化赋值。<code>Foo</code> 进入暂时性死区，类似于 <code>let</code>、<code>const</code> 声明变量。</li><li><code>class</code> 声明内部会启用严格模式。</li><li><code>class</code> 的所有方法（包括静态方法和实例方法）都是不可枚举的。</li><li><code>class</code> 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有<code>[[construct]]</code>，不能使用 <code>new</code> 来调用。</li><li>必须使用 <code>new</code> 调用 <code>class</code>。</li><li><code>class</code> 内部无法重写类名</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器的渲染机制</title>
    <link href="/2020/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器组成"><a href="#浏览器组成" class="headerlink" title="浏览器组成"></a>浏览器组成</h1><p>浏览器主要由7个部分组成：</p><ul><li>用户界面（User Interface）：定义了一些常用的浏览器组件，比如地址栏，返回、书签等等</li><li>数据持久化（Data Persistence）：指浏览器的 cookie、localStorage 等组件</li><li>浏览器引擎（Browser engine）：平台应用的相关接口，在用户界面和呈现引擎之间传送指令。</li><li>渲染引擎（Rendering engine）：处理 HTML、CSS 的解析与渲染</li><li>JavaScript解释器（JavaScript Interpreter）：解析和执行 JavaScript 代码</li><li>用户界面后端（UI Backend）：指浏览器的的图形库等</li><li>网络（Networking）：用于网络调用，比如 HTTP 请求</li></ul><h1 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h1><p>浏览器内核分为两部分：渲染引擎 (layout engineer 或 Rendering Engine) 和 JavaScript 引擎</p><p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机</p><p>JavaScript 引擎：负责解析和执行 JavaScript 来实现网页的动态效果 浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核，最开始渲染引擎和  JavaScript  引擎并没有区分的很明确，后来 JavaScript 引擎越来越独立，内核就倾向于只指渲染引擎</p><blockquote><p>常见的浏览器内核：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）</p></blockquote><h1 id="渲染引擎简介"><a href="#渲染引擎简介" class="headerlink" title="渲染引擎简介"></a>渲染引擎简介</h1><p>Firefox 使用的是 Gecko，这是 Mozilla 公司“自制”的渲染引擎。而 Safari 和 Chrome(28版本以前) 浏览器使用的都是 Webkit。</p><blockquote><p>2013年7月10日发布的 Chrome 28 版本中，Chrome浏览器开始正式使用 Blink 内核。所以，Webkit 已经成为了Chrome浏览器的前内核。</p></blockquote><h1 id="浏览器渲染页面的过程"><a href="#浏览器渲染页面的过程" class="headerlink" title="浏览器渲染页面的过程"></a>浏览器渲染页面的过程</h1><p>从耗时的角度，浏览器请求、加载、渲染一个页面，时间花在下面五件事情上：</p><ol><li>DNS 查询</li><li>TCP 连接</li><li>HTTP 请求即响应</li><li>服务器响应</li><li>客户端渲染：浏览器对内容的渲染</li></ol><h1 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h1><ol><li>处理 HTML 标记并构建 DOM 树。</li><li>处理 CSS 标记并构建 CSSOM 树。</li><li>将 DOM 与 CSSOM 合并成一个渲染树。</li><li>根据渲染树来布局，以计算每个节点的几何信息。</li><li>将各个节点绘制到屏幕上。</li></ol><h2 id="解析-HTML-成-DOM-树"><a href="#解析-HTML-成-DOM-树" class="headerlink" title="解析 HTML 成 DOM 树"></a>解析 HTML 成 DOM 树</h2><p>这个解析过程大概可以分为几个步骤：</p><blockquote><p>字节（Byte）→ 字符串（Characters）→ Tokens →节点（Nodes）→ DOM</p></blockquote><p>第一步：浏览器从磁盘或网络读取 HTML 的原始字节，也就是传输的 0 和 1这样的字节数据，并根据文件的指定编码（例如 UTF-8）将它们转换成字符串。</p><p>第二步：将字符串转换成 Token。例如：“”、“” 等。Token 中会标识出当前 Token 是“开始标签”或是“结束标签”亦或是“文本”等信息。</p><p>第三步：在每个 Token 被生成后，会立刻消耗这个 Token 创建出节点对象，因此在构建 DOM 的过程中，不是等待所有的 Token 都生成后才去构建 DOM，而是一边生成 Token 一边消耗来生成节点对象。</p><blockquote><p>注意：带有结束标签标识的 Token 不会创建节点对象 </p></blockquote><p>第四步：通过“开始标签”与“结束标签”来识别并关联节点之间的关系。当所有 Token 都生成并消耗完毕后，我们就得到了一颗完整的 DOM 树。</p><h2 id="构建-CSSOM"><a href="#构建-CSSOM" class="headerlink" title="构建 CSSOM"></a>构建 CSSOM</h2><p>解析 CSS 构建 CSSOM 的过程和构建 DOM 的过程非常的相似。当浏览器接收到一段 CSS，浏览器首先要做的是识别出 Token，然后构建节点并生成 CSSOM</p><blockquote><p>字节（Byte）→ 字符串（Characters）→ Tokens →节点（Nodes）→ CSSOM</p></blockquote><p>节点中样式可以通过继承得到，也可以自己设置，因此在构建的过程中浏览器得递归 CSSOM 树，然后确定具体的元素到底是什么样式。</p><p>为了 CSSOM 的完整性，也只有等构建完毕才能进入到下一个阶段，哪怕 DOM 已经构建完，它也得等 CSSOM，然后才能进入下一个阶段。</p><p>CSS 匹配 HTML 元素是一个相当复杂和有性能问题的事情</p><p>所以，DOM 树要小，CSS 尽量用 id 和 class，千万不要过渡层叠下去。所以，CSS 的加载速度与构建 CSSOM 的速度将直接影响首屏渲染速度，因此在默认情况下 CSS 被视为阻塞渲染的资源</p><h2 id="构建渲染树"><a href="#构建渲染树" class="headerlink" title="构建渲染树"></a>构建渲染树</h2><p>当我们生成 DOM 树和 CSSOM 树后，我们需要将这两颗树合并成渲染树，在构建渲染树的过程中浏览器需要做如下工作：</p><ul><li>从 DOM 树的根节点开始遍历每个可见节点。</li><li>有些节点不可见（例如脚本 Token、元 Token等），因为它们不会体现在渲染输出中，所以会被忽略。</li><li>某些节点被 CSS 隐藏，因此在渲染树中也会被忽略。例如某些节点设置了 display: none 属性。</li><li>对于每个可见节点，为其找到适配的 CSSOM 规则并应用它们</li></ul><h2 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a>渲染阻塞</h2><p>在渲染的过程中，遇到一个 script 标记时，就会停止渲染，去请求脚本文件并执行脚本文件，因为浏览器渲染和 JavaScript 执行共用一个线程，而且这里必须是单线程操作，多线程会产生渲染 DOM 冲突。</p><p>JavaScript 的加载、解析与执行会严重阻塞 DOM 的构建。只有等到脚本文件执行完毕，才会去继续构建 DOM。</p><p>JavaScript 不单会阻塞 DOM 构建，还会导致 CSSOM 也阻塞 DOM 的构建，如果 JavaScript 脚本还操作了CSSOM，而正好这个 CSSOM 还没有下载和构建，浏览器甚至会延迟脚本执行和构建 DOM，直至完成其 CSSOM的下载和构建，然后再执行 JavaScript，最后在继续构建 DOM。</p><p>因此 script 的位置很重要，在实际使用过程中遵循以下两个原则：</p><ul><li>CSS 优先：引入顺序上，CSS 资源先于 JavaScript 资源。</li><li>JavaScript 置后：我们通常把 JS代码放到页面底部，且 JavaScript 应尽量少影响 DOM 的构建。</li></ul><h2 id="布局与绘制"><a href="#布局与绘制" class="headerlink" title="布局与绘制"></a>布局与绘制</h2><p>浏览器拿到渲染树后，就会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置，通常这一行为也被称为“自动重排”。</p><p>布局阶段的输出是一个盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小，所有相对测量值都将转换为屏幕上的绝对像素。这一过程也可称为回流</p><p>布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。</p><h1 id="性能优化策略"><a href="#性能优化策略" class="headerlink" title="性能优化策略"></a>性能优化策略</h1><h2 id="回流-reflow-与-重绘-repaint"><a href="#回流-reflow-与-重绘-repaint" class="headerlink" title="回流(reflow) 与 重绘(repaint)"></a>回流(reflow) 与 重绘(repaint)</h2><p>当元素的样式发生变化时，浏览器需要触发更新，重新绘制元素。这个过程中，有两种类型的操作，即重绘与回流。</p><ul><li><p>重绘(repaint): 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此损耗较少</p></li><li><p>回流(reflow): 当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。</p></li></ul><p>会触发回流的操作:</p><ul><li>添加或删除可见的 DOM 元素</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li><li>页面一开始渲染的时候（这肯定避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的</li><li>注意：回流一定会触发重绘，而重绘不一定会回流,重绘的开销较小，回流的代价较高</li></ul><p>因此为了减少性能优化，我们可以尽量避免回流或者重绘操作 CSS</p><ul><li><p>避免使用table布局</p></li><li><p>将动画效果应用到 position 属性为 absolute 或 fixed 的元素上</p></li></ul><p>JavaScript</p><ul><li>避免频繁操作样式，可汇总后统一 一次修改</li><li>尽量使用class进行样式修改</li><li>减少dom的增删次数，可使用 字符串 或者 documentFragment 一次性插入</li><li>极限优化时，修改样式可将其 display: none 后修改</li><li>避免多次触发上面提到的那些会触发回流的方法，可以的话尽量用变量存住</li></ul><h1 id="探讨-requestAnimationFrame"><a href="#探讨-requestAnimationFrame" class="headerlink" title="探讨 requestAnimationFrame"></a>探讨 requestAnimationFrame</h1><p>在 JavaScript 中，我们可以使用 <code>setTimeout</code> 和 <code>setIntarval</code> 实现动画，但是 H5 的出现，让我们又多了两种实现动画的方式，分别是 CSS 动画（<code>transition</code>、<code>animation</code>）和 H5 的<code>canvas</code> 实现。</p><p>由于 JavaScript 是单线程的，所以定时器的实现是在当前任务队列完成后再执行定时器的回调的，假如当前队列任务执行时间大于定时器设置的延迟时间，那么定时器就不是那么可靠了。</p><p>所以，H5 还提供了一个专门用于请求动画的 API，让 DOM 动画、canvas 动画、svg 动画、webGL 动画等有一个专门的刷新机制。</p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>动画是由浏览器按照一定的频率一帧一帧的绘制的，由 CSS 实现的动画的优势就是浏览器知道动画的开始及每一帧的循环间隔，能够在恰当的时间刷新 UI，给用户一种流畅的体验。</p><p>而<code>setInterval</code>或<code>setTimeout</code>实现的 JavaScript 动画就没有这么可靠了，因为浏览器压根就无法保证每一帧渲染的时间间隔。</p><p>一般情况下，每秒平均刷新次数能够达到 60帧，就能够给人流畅的体验，即每过 1000/60 毫秒渲染新一帧即可，这一点单靠定时器是无法保证的。 为此，<code>requestAnimationFrame</code> 应运而生，其作用就是让浏览器流畅的执行动画效果。</p><p>可以将其理解为专门用来实现动画效果的 API，通过这个 API 可以告诉浏览器某个 JavaScript 代码要执行动画，浏览器收到通知后，则会运行这些代码的时候进行优化，实现流畅的效果，而不再需要开发人员烦心刷新频率的问题了。</p><p><code>requestAnimationFrame</code> 方法会告诉浏览器希望执行动画并请求浏览器在下一次重绘之前调用回调函数来更新动画。</p><pre><code class="hljs js"><span class="hljs-built_in">window</span>.requestAnimationFrame(callback)</code></pre><ul><li>callback：下一次重绘之前更新动画帧所调用的函数，<strong>callback仅有一个参数，为DOMHighResTimeStamp参数，表示requestAnimationFrame()开始执行回调函数的时刻。</strong></li><li>返回值：一个 long 类型整数，唯一标志元组在列表中的位置，你可以传这个值给<code>cancelAnimationFrame()</code> 以取消动画。</li></ul><p>在使用和实现上， <code>requestAnimationFrame</code> 与 <code>setTimeout</code> 类似。举个例子：</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<span class="hljs-keyword">let</span> rafId = <span class="hljs-literal">null</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 回调函数</span><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>time requestAnimationFrame 调用该函数时，自动传入的一个时间</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">requestAnimation</span>(<span class="hljs-params">time</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(time); <span class="hljs-comment">// 打印执行requestAnimation函数的时刻</span>  <span class="hljs-comment">// 动画没有执行完，则递归渲染</span>  <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">5</span>) &#123;    count++;    <span class="hljs-comment">// 渲染下一帧</span>    rafId = <span class="hljs-built_in">window</span>.requestAnimationFrame(requestAnimation);  &#125;&#125;<span class="hljs-comment">// 渲染第一帧</span><span class="hljs-built_in">window</span>.requestAnimationFrame(requestAnimation);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器的缓存机制</title>
    <link href="/2020/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h1><blockquote><p>浏览器缓存作为性能优化的重要一环，对于前端而言，重要性不言而喻。</p></blockquote><p>缓存可以说是性能优化中简单高效的一种优化方式了。</p><p>一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。</p><p>对于一个数据请求来说，可以分为：</p><ol><li><p>发起网络请求</p></li><li><p>后端处理</p></li><li><p>浏览器响应</p></li></ol><p>三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。</p><p>比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。</p><h1 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h1><p>从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络。</p><ul><li><code>Service Worker</code> 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能</li><li><code>Memory Cache</code> 是内存中的缓存，主要是页面上已经下载的样式、脚本、图片等已经抓取到的资源。</li><li><code>Disk Cache</code> 是存储在硬盘中的缓存，读取速度相对慢点。</li><li><code>Push Cache</code> 是 <code>HTTP/2</code> 中的内容，当以上 3 种缓存都没有命中的时候，它才会被使用。</li></ul><h1 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h1><p><code>Service Worker</code> 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。</p><p>注意点：</p><ol><li>必须是 <code>HTTPS</code>。因为它涉及请求拦截，所以必须使用 <code>HTTPS</code> 协议来保障安全。</li><li><code>Service Worker</code> 缓存不同于其他机制，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。</li></ol><p>实现：</p><p>Service Worker 实现缓存功能一般分为三个步骤：</p><p>首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</p><p>当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。</p><p>如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</p><h1 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h1><blockquote><p><code>Memory Cache</code>：内存中的缓存，主要是页面上已经下载的样式、脚本、图片等已经抓取到的资源。</p></blockquote><p>注意点：</p><ol><li>读取内存中的数据肯定比磁盘快，读取高效。</li><li>缓存持续性很短，会随着进程的释放而释放。关闭页面内存中的缓存也就释放了。</li></ol><p>当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存</p><p>内存缓存中有一块重要的缓存资源是 <code>preloader</code>相关指令（例如<code>&lt;link rel=&quot;prefetch&quot;&gt;</code>）下载的资源。</p><p><code>preloader</code> 的相关指令已经是页面优化的常见手段之一，它可以一边解析 js/css 文件，一边网络请求下一个资源。</p><p>内存缓存在缓存资源时并不关心返回资源的 HTTP 缓存头 <code>Cache-Control</code> 是什么值，同时资源的匹配也并非仅仅是对 <strong>URL</strong> 做匹配，还可能会对 <strong>Content-Type</strong>，<strong>CORS</strong> 等其他特征做校验。</p><h1 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h1><p><code>Disk Cache</code> 是存储在硬盘中的缓存，读取速度相对慢点。</p><p>注意点：</p><ol><li>比起 <code>Memory Cache</code> 胜在容量和存储时效性上。</li></ol><p>在所有浏览器缓存中，<code>Disk Cache</code> 覆盖面基本是最大的。</p><p>它会根据 HTTP Header 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</p><p>绝大部分的缓存都来自 <code>Disk Cache</code></p><ul><li>对于大文件来说，大概率是不存储在内存中的，反之优先</li><li>当前系统内存使用率高的话，文件优先存储进硬盘</li></ul><h1 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h1><p><code>Push Cache</code>（推送缓存） 是 <code>HTTP/2</code> 中的内容，当以上 3 种缓存都没有命中的时候，它才会被使用。</p><p>注意点：</p><ol><li>它只在会话（<code>Session</code>）中存在，一旦会话结束就被释放，并且缓存也很短暂。</li></ol><p><code>Push Cache</code>是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在 Chrome浏览器中只有 5分钟左右，同时它也并非严格执行 HTTP头中的缓存指令。</p><p>如果以上四种缓存都没有命中的话，那么只能发起请求来获取资源了。</p><p><strong>通常浏览器缓存策略分为两种：强缓存和协商缓存，并且缓存策略都是通过设置 HTTP Header 来实现的。</strong></p><h1 id="缓存过程分析"><a href="#缓存过程分析" class="headerlink" title="缓存过程分析"></a>缓存过程分析</h1><p>浏览器第一次向服务器发起该请求后拿到请求结果后，将请求结果和缓存标识存入浏览器缓存，<strong>浏览器对于缓存的处理是根据第一次请求资源时返回的响应头来确定的</strong>。</p><ul><li><p>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</p></li><li><p>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</p></li></ul><p><img src="/images/brower-cache.jpg" alt="brower-cache">  </p><p>过程：</p><ol><li><strong>浏览器</strong> 发起一次 HTTP 请求</li><li><strong>浏览器缓存</strong> 告诉浏览器这边没有该请求的缓存结果和缓存标识</li><li><strong>浏览器</strong> 向 <strong>服务器</strong> 发起 HTTP 请求</li><li><strong>服务器</strong> 返回该请求结果和缓存规则</li><li><strong>浏览器</strong> 将该请求结果和缓存标识存入浏览器缓存中</li></ol><h1 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h1><p>缓存分为 <strong>强缓存</strong> 和 <strong>协商缓存</strong>。</p><p><strong>强缓存</strong>优先于<strong>协商缓存</strong>进行，若<strong>强制缓存</strong>生效则直接使用缓存，若不生效则进行<strong>协商缓存</strong>。</p><p><strong>协商缓存</strong>由服务器决定是否使用缓存，若<strong>协商缓存</strong>失效，那么该请求的缓存失效，返回 200，重新返回资源和缓存标识，再存入浏览器中；生效则返回 304，继续使用缓存。</p><p>如果强缓存和协商缓存都没有设置，那么浏览器会采用启发式的算法，通常会取响应头中的 <code>Date</code> 减去 <code>Last-Modified</code> 的值的 <code>10%</code> 作为缓存时间。</p><p>当浏览器再次访问一个已经访问过的资源时，它会这样做：</p><ol><li>看看是否命中强缓存，如果命中，就直接使用缓存了；</li><li>如果没有命中强缓存，就发请求到服务器检查是否命中协商缓存；</li><li>如果命中协商缓存，服务器会返回 <code>304</code> 告诉浏览器使用本地缓存；</li><li>否则，返回最新的资源。</li></ol><h1 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h1><p><strong>强缓存</strong>：不会向服务器发送请求，直接从缓存中读取资源。</p><p><strong>强缓存</strong> 判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容（如果需要判断，那就要用 <strong>协商缓存</strong>）。</p><p><strong>强缓存</strong>可以通过设置两种 HTTP请求头实现：<code>Expires</code> 和 <code>Cache-Control</code>。</p><ul><li><strong>表示方式</strong>：在 Chrome 控制台的 Network 选项中可以看到该请求返回 <code>200</code> 状态码，并且 <code>Size</code> 显示为 <code>from disk cache</code> 或者 <code>from memory cache</code>。</li><li><strong>实现方式</strong>：</li></ul><ol><li><code>Expires</code></li><li><code>Cache-Control</code></li></ol><h2 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h2><p>缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。</p><p><code>Expires = max-age + 请求时间</code>，需要和 <code>Last-modified</code> 结合使用。</p><p><code>Expires</code> 是 Web服务器 响应消息头字段，在响应 HTTP请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。</p><p><code>Expires</code> 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。</p><h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><p>在 HTTP/1.1中，<code>Cache-Control</code> 是最重要的规则，主要用于控制网页缓存。</p><p>比如当<code>Cache-Control:max-age=300</code> 时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。</p><p>Cache-Control 可以在请求头或者响应头中设置，并且可以组合使用多种指令：</p><ul><li><p>public：所有内容都将被缓存（客户端和代理服务器都可缓存）。</p></li><li><p>private：所有内容只有客户端可以缓存，Cache-Control的默认取值。</p></li><li><p>no-cache：客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定。</p><blockquote><p>设置了no-cache之后，并不是说浏览器就不再缓存数据，只是浏览器在使用缓存数据时，需要先确认一下数据是否还跟服务器保持一致。</p></blockquote></li><li><p>no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</p></li><li><p>max-age：max-age=xxx (xxx is numeric)表示缓存内容将在xxx秒后失效</p></li><li><p>s-maxage（单位为s)：同max-age作用一样，只在代理服务器中生效（比如CDN缓存）。</p></li><li><p>max-stale：能容忍的最大过期时间。</p></li><li><p>min-fresh：能够容忍的最小新鲜度。</p></li></ul><h2 id="Expires和Cache-Control两者对比"><a href="#Expires和Cache-Control两者对比" class="headerlink" title="Expires和Cache-Control两者对比"></a>Expires和Cache-Control两者对比</h2><p>区别就在于 <code>Expires</code> 是 http1.0的产物，<code>Cache-Control</code> 是 HTTP1.1的产物。</p><p>两者同时存在的话，<code>Cache-Control</code> 优先级高于 <code>Expires</code>；</p><p>在某些不支持 HTTP1.1的环境下，<code>Expires</code> 就会发挥用处。所以 <code>Expires</code> 其实是过时的产物，现阶段它的存在只是一种兼容性的写法。</p><h1 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h1><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p><p>主要有以下两种情况：</p><ul><li>协商缓存生效，返回304和Not Modified</li></ul><p><img src="/images/consult-cache-1.jpg" alt="consult-cache-1">  </p><ol><li><strong>浏览器</strong> 发起 HTTP 请求，先经过 <strong>浏览器缓存</strong></li><li><strong>浏览器缓存</strong> 判断该请求的缓存结果，返回缓存标识</li><li><strong>浏览器</strong> 携带该标识，向 <strong>服务器</strong> 发起 HTTP 请求</li><li><strong>服务器</strong> 返回 304 告诉 <strong>浏览器</strong> 资源没有更新</li><li><strong>浏览器</strong> 再次请求这个缓存结果</li><li><strong>浏览器缓存</strong> 返回该请求的缓存结果</li></ol><ul><li>协商缓存失效，返回200和请求结果</li></ul><p><img src="/images/consult-cache-2.jpg" alt="consult-cache-2">  </p><ol><li><strong>浏览器</strong> 发起 HTTP 请求，先经过 <strong>浏览器缓存</strong></li><li><strong>浏览器缓存</strong> 判断该请求的缓存结果失效，返回缓存标识</li><li><strong>浏览器</strong> 携带该标识，向 <strong>服务器</strong> 发起 HTTP 请求</li><li><strong>服务器</strong> 返回 200 告诉 <strong>浏览器</strong> 资源可以更新了</li><li><strong>浏览器</strong> 读取并将请求结果和缓存标识存入 <strong>浏览器缓存</strong> 中</li></ol><h2 id="Last-Modified-和-If-Modified-Since"><a href="#Last-Modified-和-If-Modified-Since" class="headerlink" title="Last-Modified 和 If-Modified-Since"></a>Last-Modified 和 If-Modified-Since</h2><p>浏览器第一次请求资源的时候，服务器返回的响应头上会带有一个 <code>Last-Modified</code> 字段，表示资源<strong>最后修改</strong>的时间。</p><pre><code class="hljs http"><span class="hljs-attribute">Last-Modified</span>: Fri, 27 Oct 2017 07:55:30 GMT</code></pre><p>当浏览器再次请求该资源时，请求头中会带有一个 <code>If-Modified-Since</code> 字段，这个值是第一次请求返回的 <code>Last-Modified</code> 的值。</p><p>服务器收到这个请求后，将 <code>If-Modified-Since</code> 和当前的 <code>Last-Modified</code> 进行对比。</p><p>如果相等，则说明资源未修改，返回 <code>304</code>，浏览器使用本地缓存。</p><p>这个方法也是有缺点的：</p><ul><li>最小单位是秒。也就是说如果我短时间内资源发生了改变，<code>Last-Modified</code> 并不会发生变化；</li><li>周期性变化。如果这个资源在一个周期内修改回原来的样子了，我们认为是可以使用缓存的，但是 <code>Last-Modified</code> 可不这样认为。</li></ul><p>所以，后来又引入一个 <code>Etag</code>。</p><h2 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h2><p><code>Etag</code> 一般是由文件内容 <code>hash</code> 生成的，也就是说它可以保证资源的唯一性，资源发生改变就会导致 <code>Etag</code> 发生改变。</p><p>同样地，在浏览器第一次请求资源时，服务器会返回一个 <code>Etag</code> 标识。</p><p>当再次请求该资源时， 会通过 <code>If-no-match</code> 字段将 <code>Etag</code> 发送回服务器，然后服务器进行比较，如果相等，则返回 <code>304</code> 表示未修改。</p><p><code>Last-Modified</code> 和 <code>Etag</code> 是可以同时设置的，服务器会优先校验 <code>Etag</code>，如果 <code>Etag</code> 相等就会继续比对 <code>Last-Modified</code>，最后才会决定是否返回 <code>304</code>。</p><h1 id="实际场景应用缓存策略"><a href="#实际场景应用缓存策略" class="headerlink" title="实际场景应用缓存策略"></a>实际场景应用缓存策略</h1><ol><li>频繁变动的资源</li></ol><blockquote><p><code>Cache-Control: no-cache</code></p></blockquote><p>对于频繁变动的资源，首先需要使用 <code>Cache-Control: no-cache</code> 使浏览器每次都请求服务器，然后配合 <code>ETag</code>或者 <code>Last-Modified</code> 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><ol start="2"><li>不常变化的资源</li></ol><blockquote><p><code>Cache-Control: max-age=31536000</code></p></blockquote><p>通常在处理这类资源时，给它们的 <code>Cache-Control</code> 配置一个很大的 <code>max-age=31536000</code> (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。</p><p>而为了解决更新的问题，就需要在文件名(或者路径) 中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。</p><p>在线提供的类库 (如 <code>jquery-3.3.1.min.js</code>, <code>lodash.min.js</code> 等) 均采用这个模式。</p><h1 id="用户行为对浏览器缓存的影响"><a href="#用户行为对浏览器缓存的影响" class="headerlink" title="用户行为对浏览器缓存的影响"></a>用户行为对浏览器缓存的影响</h1><p>用户在浏览器如何操作时，会触发 3种缓存策略 ：</p><ul><li>打开网页，地址栏输入地址： 查找 <strong>disk cache</strong> 中是否有匹配。如有则使用；如没有则发送网络请求。</li><li>普通刷新 (F5)：因为 TAB 并没有关闭，因此 <strong>memory cache</strong> 是可用的，会被优先使用(如果匹配的话)。其次才是 <strong>disk cache</strong>。</li><li>强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 <code>Cache-control: no-cache</code> (为了兼容，还带了 <code>Pragma: no-cache</code>),服务器直接返回 200 和最新内容。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈 HTTP协议</title>
    <link href="/2020/11/08/%E6%B5%85%E8%B0%88%20HTTP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2020/11/08/%E6%B5%85%E8%B0%88%20HTTP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><blockquote><p>HTTP（超文本传输协议，HyperText Transfer Protocol) 是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。</p></blockquote><p>设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。是用于从 WWW 服务器传输超文本到本地浏览器的传输协议。</p><p>默认使用 80 端口，HTTP 客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的 TCP 连接。</p><p>HTTP协议和 TCP协议是不冲突的，HTTP 定义在七层协议中的应用层，TCP 解决的是传输层的逻辑。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>HTTP1.0 是第一个在通讯中指定版本号的 HTTP 协议版本，至今仍被广泛采用，特别是在代理服务器中。</p><p>HTTP1.1是当前版本，持久连接被默认采用，并能很好地配合代理服务器工作，还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。</p><p>HTTP2.0 在 HTTP1.x 的基础上，大幅度的提高了 Web 性能，减少了网络延迟。</p><p>HTTP1.0 和 1.1 在之后很长的一段时间内会一直并存，这是由于网络基础设施更新缓慢所决定的。</p><h2 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h2><p>HTTP1.0 是 HTTP 协议老的标准，其为了提高系统系统的效率，规定浏览器与服务器只保持短暂的连接，浏览器每一次请求都需要与服务器建立一个 TCP 连接。</p><p>TCP 协议提供传输控制，按顺序组织数据，和错误纠正。HTTP 协议的瓶颈和优化都是基于 TCP 协议本身的。如 TCP 建立连接时需要三次握手，三次握手有 1.5 个 RTT（Round-Trip-Time）的延迟，TCP 在建立初期还有慢启动（Slow Start）的特性，所有连接的重用总是比新建连接性能要好。</p><p>HTTP1.0 支持长连接，需要设置 <code>Connection: keep-alive</code>参数来告诉服务器端要建立一个长连接。</p><p>HTTP1.0 在请求方式新增了POST，DELETE，PUT，HEADER等方式</p><p>增添了请求头和响应头的概念，在通信中指定了 HTTP 协议版本号，以及其他的一些元信息 (比如: 状态码、权限、缓存、内容编码)</p><p>扩充了传输内容格式，图片、音视频资源、二进制等都可以进行传输</p><p>在这个版本主要的就是对请求和响应的元信息进行了扩展，客户端和服务端有更多的获取当前请求的所有信息，进而更好更快的处理请求相关内容。</p><p>HTTP 1.0 特性：</p><ul><li>无状态：服务器不跟踪不记录请求过程的状态</li><li>无连接：浏览器每次请求都需要建立 TCP 连接</li></ul><p>对于「无状态」的特性可以借助 cookie/session 机制来做身认证和状态记录</p><p>无连接则导致性能缺陷：</p><ol><li><p>无法复用连接</p><blockquote><p>每次发送请求都需要一次 TCP 连接 （3次握手，4次挥手），使网路的传输效率非常低</p></blockquote></li><li><p>队头堵塞</p><blockquote><p>HTTP1.0 规定在前一个请求响应到达之后，下一个请求才能发送。如果前一个阻塞，后面的请求也阻塞</p></blockquote></li></ol><h2 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h2><p>1.1 是 1.0 发布之后半年就推出的版本。为了解决传输效率的问题，1.1完善 1.0 版本。</p><p>HTTP 1.1 默认支持长连接（持久连接）无需手动设置 <code>Connection: keep-alive</code>，在一个 TCP 连接上可以传送多个 HTTP 请求和响应，减少了建立和关闭连接的消耗和延迟。</p><p>基于上面的长连接基础，HTTP1.1 还引入了管道机制（Pipelining）。管道化可以不等第一个请求响应继续发送后面的请求，但响应的顺序还是按照请求的顺序返回</p><p>HTTP1.1 的默认模式是使用管道机制的长连接。</p><p>在 HTTP1.1 中默认允许<code>Connection: keep-alive</code>  但是在一个 TCP 连接里面数据通信是按次序进行的，服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为”队头堵塞”（Head-of-line blocking）。</p><p>HTTP1.1 特性：</p><ul><li><p>基于管道化的长连接</p><blockquote><p>默认支持管道化的长连接，无需设置请求头<code>Connection: keep-alive</code> 。可以不等第一请求响应，继续发送请求。但是响应的顺序还是按照请求的顺序返回，第一个响应如果阻塞后面请求的响应也一样阻塞。队头堵塞的问题依然没有得到解决</p></blockquote></li><li><p>缓存处理</p><blockquote><p>新增加字段 <code>cache-control</code></p><p>当浏览器请求资源时，先看是否有缓存的资源，如果有缓存，直接取，不会再发请求，如果没有缓存，则发送请求。</p></blockquote></li><li><p>支持断点续传</p><blockquote><p>在上传/下载资源时，如果资源过大，将其分割为多个部分，分别上传/下载，如果遇到网络故障，可以从已经上传/下载好的地方继续请求，不用从头开始，提高效率</p></blockquote></li></ul><h2 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a>HTTP 2.0</h2><blockquote><p>HTTP2.0 比之前的协议在性能上有很大的提升。</p></blockquote><p><strong>HTTP2.0 协议拥有了新的特性：</strong></p><p><strong>多路复用 (Multiplexing)</strong></p><p>多路复用允许同时通过单一的 HTTP2.0 连接发起多重的 <em>请求-响应</em> 消息。</p><p>在 HTTP1.1 协议中浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。</p><p>HTTP2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。</p><p>帧（frame）和流（stream）是 HTTP2.0 中两个很重要的概念：</p><p>帧代表着最小的数据单位，每个帧都会标识出该帧属于哪个流，流就是由多个帧组成的数据流。</p><p>多路复用，也就是在一个 TCP 连接中可以存在多条流，就是我们所说的可以发送多个请求，对端可以通过帧的标示知道，该帧属于哪个流（请求），通过这个技术及意义避免 HTTP 1.x 中的队头阻塞问题，极大的提高传输性能。</p><p><strong>二进制分帧</strong></p><p>HTTP1.x 的解析是基于文本，HTTP2.0 之后将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，提高传输效率</p><p>HTTP2.0 在 应用层 (HTTP2.0) 和传输层 (TCP or UDP) 之间增加一个二进制分帧层。在不改动 HTTP1.x 的语义、方法、状态码、URI 以及首部字段的情况下, 解决了HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。</p><p>HTTP2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。</p><p><strong>首部压缩（Header Compression）</strong></p><p>由于 HTTP 是无状态的，每一个请求都需要头部信息标识这次请求相关信息，所以会造成传输很多重复的信息，当请求数量增大的时候，消耗的资源就会慢慢积累上去。</p><p>HTTP1.1并不支持 HTTP 首部压缩， HTTP2.0 使用了专门为首部压缩而设计的 HPACK 算法。</p><p>HTTP2.0 可以维护一个头部信息字典，差量进行更新头信息，减少头部信息传输占用的资源</p><p><strong>服务端推送（Server Push）</strong></p><p>HTTP2.0 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送</p><blockquote><p>服务端推送是一种在客户端请求之前发送数据的机制。</p></blockquote><p>在 HTTP2.0 中，服务器可以对客户端的一个请求发送多个响应。服务器可以额外的向客户端推送资源，而无需客户端明确的请求</p><p>当我们对支持 HTTP2.0 的服务器请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源。</p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>HTTP 协议传输的数据都是未加密的，也就是明文的，因此使用 HTTP 协议传输隐私信息非常不安全。</p><p>为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对 HTTP 协议传输的数据进行加密，从而就诞生了HTTPS。</p><p>HTTPS 在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。</p><p>TLS/SSL 协议不仅仅是一套加密传输的协议，TLS/SSL 中使用了非对称加密，对称加密以及 HASH 算法。</p><p>握手过程的简单描述如下：</p><ol><li><p>浏览器将自己支持的一套加密规则发送给网站。</p></li><li><p>网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。</p><blockquote><p>证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息</p></blockquote></li><li><p>获得网站证书之后浏览器要做以下工作：</p><ol><li>验证证书的合法性</li><li>如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密</li><li>使用约定好的HASH计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站</li></ol></li><li><p>网站接收浏览器发来的数据之后要做以下的操作：</p><ol><li>使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证 HASH 是否与浏览器发来的一致</li><li>使用密码加密一段握手消息，发送给浏览器</li></ol></li><li><p>浏览器解密并计算握手消息的 HASH，如果与服务端发来的 HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</p></li></ol><p>这里浏览器与网站互相发送加密的握手消息并验证，目的是为了保证双方都获得了一致的密码，并且可以正常的加密解密数据。</p><p>TLS 握手过程中如果有任何错误，都会使加密连接断开，从而阻止了隐私信息的传输。</p><p>正是由于 HTTPS 非常的安全，攻击者无法从中找到下手的地方，于是更多的是采用了假证书的手法来欺骗客户端，从而获取明文的信息。默认 HTTP 的端口号为 80，HTTPS 的端口号为 443。</p><h2 id="HTTPS-和-HTTP-对比"><a href="#HTTPS-和-HTTP-对比" class="headerlink" title="HTTPS 和 HTTP 对比"></a>HTTPS 和 HTTP 对比</h2><ul><li>HTTPS 协议需要申请证书</li><li>HTTP 和 HTTPS 使用端口不一样，前者是80，后者是443</li><li>HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，HTTPS 行在 SSL/TLS 之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的</li><li>HTTPS 可以有效的防止运营商劫持</li></ul><h2 id="HTTPS-握手过程"><a href="#HTTPS-握手过程" class="headerlink" title="HTTPS 握手过程"></a>HTTPS 握手过程</h2><h3 id="一、Client-→-Server"><a href="#一、Client-→-Server" class="headerlink" title="一、Client → Server"></a>一、Client → Server</h3><h4 id="Client-Hello"><a href="#Client-Hello" class="headerlink" title="Client Hello"></a>Client Hello</h4><p>握手开始时，总是由先客户端会发送 <code>Client Hello</code> 信息给服务端，主要包含</p><ul><li>Version Number 客户端支持的协议版本</li><li>Randomly Generated Data 32 字节长度的随机值，用于之后生成主密钥。</li><li>Session Identification Session ID，第一次连接时为空。</li><li>Cipher Suite 客户端支持的加密算法列表，按优先级顺序排列。</li></ul><h3 id="二、Server-→-Client"><a href="#二、Server-→-Client" class="headerlink" title="二、Server → Client"></a>二、Server → Client</h3><h4 id="Server-Hello"><a href="#Server-Hello" class="headerlink" title="Server Hello"></a>Server Hello</h4><p>接着，服务端收到客户端发来的消息之后，会返回 <code>Server Hello</code> 信息给客户端，告知客户端接下来使用的一些参数</p><ul><li>Version Number 通信协议版本</li><li>Randomly Generated Data 32 字节长度的随机值，用于之后生成主密钥</li><li>Session Identification Session ID</li><li>Cipher Suite 加密算法</li></ul><h4 id="Server-Certificate-证书"><a href="#Server-Certificate-证书" class="headerlink" title="Server Certificate 证书"></a>Server Certificate 证书</h4><p>服务端还会带上证书返回给客户端。证书中含有服务端的公钥、网站地址、证书的颁发机构等信息。</p><p>客户端收到服务端返回的证书之后，会验证该证书的真实合法性。</p><h4 id="Server-Key-Exchange-额外数据"><a href="#Server-Key-Exchange-额外数据" class="headerlink" title="Server Key Exchange 额外数据"></a>Server Key Exchange 额外数据</h4><p>这个是可选的，取决于使用的加密算法。主要是携带密钥交换的额外数据。</p><h4 id="Server-Hello-Done"><a href="#Server-Hello-Done" class="headerlink" title="Server Hello Done"></a>Server Hello Done</h4><p>表示服务端已经发送完毕，并等待客户端回应。</p><h3 id="三、Client-→-Server"><a href="#三、Client-→-Server" class="headerlink" title="三、Client → Server"></a>三、Client → Server</h3><h4 id="Client-Key-Exchange"><a href="#Client-Key-Exchange" class="headerlink" title="Client Key Exchange"></a>Client Key Exchange</h4><p>客户端使用之前发送给服务端及服务端返回的随机数，生成预主密钥，然后用服务端返回的公钥进行加密。</p><h4 id="Change-Cipher-Spec"><a href="#Change-Cipher-Spec" class="headerlink" title="Change Cipher Spec"></a>Change Cipher Spec</h4><p>告诉服务端，之后的所有信息都会使用协商好的密钥和算法加密</p><h4 id="Client-Finished"><a href="#Client-Finished" class="headerlink" title="Client Finished"></a>Client Finished</h4><p>客户端的握手工作已经完成。这条信息是握手过程中所有消息的散列值。</p><h3 id="四、Server-→-Client"><a href="#四、Server-→-Client" class="headerlink" title="四、Server → Client"></a>四、Server → Client</h3><h4 id="Change-Cipher-Spec-Message"><a href="#Change-Cipher-Spec-Message" class="headerlink" title="Change Cipher Spec Message"></a>Change Cipher Spec Message</h4><p>告知客户端，会使用刚刚协商的密钥来加密信息</p><h4 id="Server-Finished-Message"><a href="#Server-Finished-Message" class="headerlink" title="Server Finished Message"></a>Server Finished Message</h4><p>表示服务端的握手工作已经完成</p><h2 id="数字证书申请流程"><a href="#数字证书申请流程" class="headerlink" title="数字证书申请流程"></a>数字证书申请流程</h2><ol><li>网站提交身份信息给CA机构</li><li>CA机构审核信息的真实性</li><li>对信息进行Hash，计算信息摘要</li><li>CA机构的密钥加密信息摘要，得到数字签名</li></ol><h2 id="浏览器验证证书"><a href="#浏览器验证证书" class="headerlink" title="浏览器验证证书"></a>浏览器验证证书</h2><ol><li>浏览器利用证书的原始信息计算得到信息摘要</li><li>利用CA的公钥解密数字证书中的数字签名，解密出来的数据也是信息摘要</li><li>比较两个摘要是否相等</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《前端100问》30</title>
    <link href="/2020/11/06/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B30/"/>
    <url>/2020/11/06/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B30/</url>
    
    <content type="html"><![CDATA[<h1 id="21、有以下-3-个判断数组的方法，请分别介绍它们之间的区别和优劣"><a href="#21、有以下-3-个判断数组的方法，请分别介绍它们之间的区别和优劣" class="headerlink" title="21、有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣"></a>21、有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣</h1><blockquote><p>Object.prototype.toString.call() 、 instanceof 以及 Array.isArray()</p></blockquote><h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h2><p>每一个继承 Object 的对象都有 <code>toString</code> 方法，如果 <code>toString</code> 方法没有重写的话，会返回 <code>[Object type]</code>，其中 type 为对象的类型。</p><p>但当除了 Object 类型的对象外，其他类型直接使用 <code>toString</code> 方法时，会直接返回都是内容的字符串，所以我们需要使用 call 或者 apply 方法来改变 toString 方法的执行上下文。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> an = [<span class="hljs-string">&#x27;Hello&#x27;</span>,<span class="hljs-string">&#x27;An&#x27;</span>];an.toString(); <span class="hljs-comment">// &quot;Hello,An&quot;</span><span class="hljs-built_in">Object</span>.prototype.toString.call(an); <span class="hljs-comment">// &quot;[object Array]&quot;</span></code></pre><p>这种方法对于所有基本的数据类型都能进行判断，即使是 null 和 undefined 。</p><p><code>Object.prototype.toString.call()</code> 常用于判断浏览器内置对象时。</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p><code>instanceof</code> 的内部机制是通过判断对象的原型链中是不是能找到类型的 <code>prototype</code>。</p><p>使用 <code>instanceof</code>判断一个对象是否为数组，<code>instanceof</code> 会判断这个对象的原型链上是否会找到对应的 <code>Array</code> 的原型，找到返回 <code>true</code>，否则返回 <code>false</code>。</p><p>但 <code>instanceof</code> 只能用来判断对象类型，原始类型不可以。并且所有对象类型 instanceof Object 都是 true。</p><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><p>功能：用来判断对象是否为数组</p><ul><li>instanceof 与 isArray</li></ul><p>当检测Array实例时，<code>Array.isArray</code> 优于 <code>instanceof</code> ，因为 <code>Array.isArray</code> 可以检测出 <code>iframes</code></p><ul><li><code>Array.isArray()</code> 与 <code>Object.prototype.toString.call()</code></li></ul><p><code>Array.isArray()</code>是ES5新增的方法，当不存在 <code>Array.isArray()</code> ，可以用 <code>Object.prototype.toString.call()</code> 实现。</p><p>就性能来说 Array.isArray 的性能最好，instanceof 比 toString.call 稍微好了一点点</p><p><strong>补充：</strong></p><p>typeof 不能校验 object 的其他类型，引用类型除了 function 都不能区分</p><p>instanceof 不能校验原始值类型</p><p>Object.prototype.toString.call() 不能校验自定义类型</p><h1 id="22、介绍下重绘和回流（Repaint-amp-Reflow），以及如何进行优化"><a href="#22、介绍下重绘和回流（Repaint-amp-Reflow），以及如何进行优化" class="headerlink" title="22、介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化"></a>22、介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化</h1><ol><li>浏览器渲染机制</li></ol><ul><li>浏览器采用流式布局模型（<code>Flow Based Layout</code>）</li><li>浏览器会把<code>HTML</code>解析成<code>DOM</code>，把<code>CSS</code>解析成<code>CSSOM</code>，<code>DOM</code>和<code>CSSOM</code>合并就产生了渲染树（<code>Render Tree</code>）。</li><li>有了<code>RenderTree</code>，我们就知道了所有节点的样式，然后计算他们在页面 上的大小和位置，最后把节点绘制到页面上。</li><li>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，<strong>但<code>table</code>及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用<code>table</code>布局的原因之一</strong>。</li></ul><ol start="2"><li>重绘</li></ol><p>由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如<code>outline</code>, <code>visibility</code>, <code>color</code>、<code>background-color</code>等，重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性。</p><ol start="3"><li>回流</li></ol><p>回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及 DOM 中紧随其后的节点、祖先节点元素的随后的回流。</p><p><strong>大部分的回流将导致页面的重新渲染，回流必定会发生重绘，重绘不一定会引发回流。</strong></p><ol start="4"><li>浏览器优化</li></ol><p>现代浏览器大多都是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，至少一个浏览器刷新（即16.6ms）才会清空队列，但当你<strong>获取布局信息的时候，队列中可能有会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流与重绘来确保返回正确的值</strong>。</p><p>主要包括以下属性或方法：</p><ul><li><code>offsetTop</code>、<code>offsetLeft</code>、<code>offsetWidth</code>、<code>offsetHeight</code></li><li><code>scrollTop</code>、<code>scrollLeft</code>、<code>scrollWidth</code>、<code>scrollHeight</code></li><li><code>clientTop</code>、<code>clientLeft</code>、<code>clientWidth</code>、<code>clientHeight</code></li><li><code>width</code>、<code>height</code></li><li><code>getComputedStyle()</code></li><li><code>getBoundingClientRect()</code></li></ul><p>所以，我们应该避免频繁的使用上述的属性，他们都会强制渲染刷新队列。</p><ol start="5"><li>减少重绘与回流</li></ol><p><strong>CSS</strong></p><ul><li><p><strong>使用</strong> <code>transform</code> <strong>替代</strong> <code>top</code></p></li><li><p><strong>使用</strong> <code>visibility</code> <strong>替换</strong> <code>display: none</code> ，<strong>因为前者只会引起重绘，后者会引发回流（改变了布局）</strong></p></li><li><p><strong>避免使用<code>table</code>布局</strong>，可能很小的一个小改动会造成整个 <code>table</code> 的重新布局。</p></li><li><p><strong>尽可能在</strong><code>DOM</code><strong>树的最末端改变</strong><code>class</code>，回流是不可避免的，但可以减少其影响。尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。</p></li><li><p><strong>避免设置多层内联样式</strong>，CSS 选择符<strong>从右往左</strong>匹配查找，避免节点层级过多。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>  span &#123;    color: red;  &#125;  div &gt; a &gt; span &#123;    color: red;  &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 <code>span</code> 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 <code>span</code> 标签，然后找到 <code>span</code> 标签上的 <code>a</code> 标签，最后再去找到 <code>div</code> 标签，然后给符合这种条件的 <code>span</code> 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写<strong>过于具体</strong>的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证<strong>层级扁平</strong>。</p></li><li><p><strong>将动画效果应用到<code>position</code>属性为<code>absolute</code>或<code>fixed</code>的元素上</strong>，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 <code>requestAnimationFrame</code>，详见<a href="https://github.com/LuNaHaiJiao/blog/issues/30">探讨 requestAnimationFrame</a>。</p></li><li><p><strong>避免使用</strong> <code>CSS</code> <strong>表达式</strong>，可能会引发回流。</p></li><li><p><strong>将频繁重绘或者回流的节点设置为图层</strong>，图层能够阻止该节点的渲染行为影响别的节点，例如<code>will-change</code>、<code>video</code>、<code>iframe</code>等标签，浏览器会自动将该节点变为图层。</p></li><li><p><strong>CSS3 硬件加速（GPU加速）</strong>，使用 CSS3 硬件加速，可以让<code>transform</code>、<code>opacity</code>、<code>filters</code>这些动画不会引起回流重绘 。但是对于动画的其它属性，比如<code>background-color</code>这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</p></li></ul><p><strong>JavaScript</strong></p><ul><li><strong>避免频繁操作样式</strong>，最好一次性重写<code>style</code>属性，或者将样式列表定义为<code>class</code>并一次性更改<code>class</code>属性。</li><li><strong>避免频繁操作</strong><code>DOM</code>，创建一个<code>documentFragment</code>，在它上面应用所有<code>DOM操作</code>，最后再把它添加到文档中。</li><li><strong>避免频繁读取会引发回流/重绘的属性</strong>，如果确实需要多次使用，就用一个变量缓存起来。</li><li><strong>对具有复杂动画的元素使用绝对定位</strong>，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</li></ul><h1 id="23、介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景"><a href="#23、介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景" class="headerlink" title="23、介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景"></a>23、介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景</h1><p>观察者模式中主体和观察者是互相感知的，发布-订阅模式是借助第三方来实现调度的，发布者和订阅者之间互不感知</p><p>观察者模式 在软件设计中是一个对象，维护一个依赖列表，当任何状态发生改变自动通知它们。</p><p>在发布-订阅模式，消息的发送方，叫做发布者（publishers），消息不会直接发送给特定的接收者，叫做订阅者。</p><p>意思就是发布者和订阅者不知道对方的存在。需要一个第三方组件，叫做信息中介，它将订阅者和发布者串联起来，它过滤和分配所有输入的消息。换句话说，发布-订阅模式用来处理不同系统组件的信息交流，即使这些组件不知道对方的存在。</p><ul><li>在观察者模式中，观察者是知道 Subject 的，Subject 一直保持对观察者进行记录。然而，在发布订阅模式中，发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。</li><li>在发布订阅模式中，组件是松散耦合的，正好和观察者模式相反。</li><li>观察者模式大多数时候是同步的，比如当事件触发，Subject 就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）。</li><li>观察者 模式需要在单个应用程序地址空间中实现，而发布-订阅更像交叉应用模式。</li></ul><h1 id="24、聊聊-Redux-和-Vuex-的设计思想"><a href="#24、聊聊-Redux-和-Vuex-的设计思想" class="headerlink" title="24、聊聊 Redux 和 Vuex 的设计思想"></a>24、聊聊 Redux 和 Vuex 的设计思想</h1><p>不管是Vue，还是 React，都需要管理状态（state），比如组件之间都有共享状态的需要。如果不对状态进行有效的管理，状态在什么时候，由于什么原因，如何变化就会不受控制，就很难跟踪和测试了。</p><p>对于状态管理的解决思路就是：把组件之间需要共享的状态抽取出来，遵循特定的约定，统一来管理，让状态的变化可以预测。</p><p>最简单的处理就是把状态存到一个外部变量里面，比如：this.$root.$data，当然也可以是一个全局变量。但是这样有一个问题，就是数据改变后，不会留下变更过的记录，这样不利于调试。</p><p>所以我们稍微搞得复杂一点，用一个简单的 Store 模式：</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> store = &#123;  state: &#123;    message: <span class="hljs-string">&#x27;Hello!&#x27;</span>  &#125;,  setMessageAction (newValue) &#123;    <span class="hljs-comment">// 发生改变记录点日志啥的</span>    <span class="hljs-built_in">this</span>.state.message = newValue  &#125;,  clearMessageAction () &#123;    <span class="hljs-built_in">this</span>.state.message = <span class="hljs-string">&#x27;&#x27;</span>  &#125;&#125;</code></pre><p>store 的 state 来存数据，store 里面有一堆的 action，这些 action 来控制 state 的改变，也就是不直接去对 state 做改变，而是通过 action 来改变，因为都走 action，我们就可以知道到底改变（mutation）是如何被触发的，出现错误，也可以记录记录日志啥的。</p><p>组件不允许直接修改属于 store 实例的 state，组件必须通过 action 来改变 state，也就是说，组件里面应该执行 action 来分发 (dispatch) 事件通知 store 去改变。</p><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux 里面只有一个 Store，整个应用的数据都在这个大 Store 里面。Store 的 State 不能直接修改，每次只能返回一个新的 State。Redux 整了一个 createStore 函数来生成 Store。</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>;<span class="hljs-keyword">const</span> store = createStore(fn);</code></pre><p>Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。这样不管 View 是用什么实现的，只要把 View 的更新函数 subscribe 一下，就可以实现 State 变化之后，View 自动渲染了。比如在 React 里，把组件的render方法或setState方法订阅进去就行。</p><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>每一个 Vuex 里面有一个全局的 Store，包含着应用中的状态 State，这个 State 只是需要在组件中共享的数据，不用放所有的 State，没必要。这个 State 是单一的，和 Redux 类似，所以，一个应用仅会包含一个 Store 实例。单一状态树的好处是能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p><p>Vuex通过 store 选项，把 state 注入到了整个应用中，这样子组件能通过 this.$store 访问到 state 了。State 改变，View 就会跟着改变，这个改变利用的是 Vue 的响应式机制。</p><p>显而易见，State 不能直接改，需要通过一个约定的方式，这个方式在 Vuex 里面叫做 mutation，更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。</p><p>触发 mutation 事件的方式不是直接调用，比如 increment(state) 是不行的，而要通过 store.commit 方法</p><h1 id="25、说说浏览器和-Node-事件循环的区别"><a href="#25、说说浏览器和-Node-事件循环的区别" class="headerlink" title="25、说说浏览器和 Node 事件循环的区别"></a>25、说说浏览器和 Node 事件循环的区别</h1><h2 id="浏览器中的-Event-Loop"><a href="#浏览器中的-Event-Loop" class="headerlink" title="浏览器中的 Event Loop"></a>浏览器中的 Event Loop</h2><h3 id="1-Micro-Task-与-Macro-Task"><a href="#1-Micro-Task-与-Macro-Task" class="headerlink" title="1. Micro-Task 与 Macro-Task"></a>1. Micro-Task 与 Macro-Task</h3><p>浏览器端事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。宏任务队列可以有多个，微任务队列只有一个。</p><ul><li>常见的 macro-task 比如：setTimeout、setInterval、script（整体代码）、 I/O 操作、UI 渲染等。</li><li>常见的 micro-task 比如: new Promise().then(回调)、MutationObserver(html5新特性) 等。</li></ul><h3 id="2-Event-Loop-过程解析"><a href="#2-Event-Loop-过程解析" class="headerlink" title="2. Event Loop 过程解析"></a>2. Event Loop 过程解析</h3><ul><li>一开始执行栈空,我们可以把执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则。micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码）。</li><li>全局上下文（script 标签）被推入执行栈，同步代码执行。在执行的过程中，会判断是同步任务还是异步任务，通过对一些接口的调用，可以产生新的 macro-task 与 micro-task，它们会分别被推入各自的任务队列里。同步代码执行完了，script 脚本会被移出 macro 队列，这个过程本质上是队列的 macro-task 的执行和出队的过程。</li><li>上一步我们出队的是一个 macro-task，这一步我们处理的是 micro-task。但需要注意的是：当 macro-task 出队时，任务是一个一个执行的；而 micro-task 出队时，任务是一队一队执行的。因此，我们处理 micro 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。</li><li>执行渲染操作，更新界面</li><li>检查是否存在 Web worker 任务，如果有，则对其进行处理</li><li>上述过程循环往复，直到两个队列都清空</li></ul><p>当某个宏任务执行完后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，会读取宏任务队列中排在最前的任务，执行宏任务的过程中，遇到微任务，依次加入微任务队列。栈空后，再次读取微任务队列里的任务，依次类推。</p><h2 id="Node-中的-Event-Loop"><a href="#Node-中的-Event-Loop" class="headerlink" title="Node 中的 Event Loop"></a>Node 中的 Event Loop</h2><h3 id="1-Node-简介"><a href="#1-Node-简介" class="headerlink" title="1.Node 简介"></a>1.Node 简介</h3><p>Node 中的 Event Loop 和浏览器中的是完全不相同的东西。</p><p>Node.js 采用 V8 作为 js 的解析引擎，而 I/O 处理方面使用了自己设计的 libuv，libuv 是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。</p><h3 id="Node-js的运行机制如下"><a href="#Node-js的运行机制如下" class="headerlink" title="Node.js的运行机制如下:"></a>Node.js的运行机制如下:</h3><ol><li>V8 引擎解析JavaScript脚本。</li><li>解析后的代码，调用Node API。</li><li>libuv 库负责 Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。</li><li>V8引擎再将结果返回给用户。</li></ol><h3 id="2-六个阶段"><a href="#2-六个阶段" class="headerlink" title="2.六个阶段"></a>2.六个阶段</h3><p>其中 libuv 引擎中的事件循环分为 6 个阶段，它们会按照顺序反复运行。</p><p>每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。</p><p>Node.js 中的事件循环的顺序：</p><p>外部输入数据 → 轮询阶段(poll) → 检查阶段(check) → 关闭事件回调阶段(close callback) → 定时器检测阶段(timer) → I/O事件回调阶段(I/O callbacks) → 闲置阶段(idle, prepare) → 轮询阶段（按照该顺序反复运行）…</p><ul><li><p>timers 阶段：这个阶段执行timer（setTimeout、setInterval）的回调</p></li><li><p>I/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调</p></li><li><p>idle, prepare 阶段：仅node内部使用</p></li><li><p>poll 阶段：获取新的I/O事件, 适当的条件下node将阻塞在这里</p></li><li><p>check 阶段：执行 setImmediate() 的回调</p></li><li><p>close callbacks 阶段：执行 socket 的 close 事件回调</p><p>注意：上面六个阶段都不包括 <strong>process.nextTick()</strong></p></li></ul><h3 id="3-Micro-Task-与-Macro-Task"><a href="#3-Micro-Task-与-Macro-Task" class="headerlink" title="3. Micro-Task 与 Macro-Task"></a>3. Micro-Task 与 Macro-Task</h3><p>Node端事件循环中的异步队列也是这两种：macro（宏任务）队列和 micro（微任务）队列。</p><ul><li>常见的 macro-task 比如：setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作等。</li><li>常见的 micro-task 比如: process.nextTick、new Promise().then(回调)等。</li></ul><p><strong>process.nextTick</strong><br>这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。</p><h2 id="Node与浏览器的-Event-Loop-差异"><a href="#Node与浏览器的-Event-Loop-差异" class="headerlink" title="Node与浏览器的 Event Loop 差异"></a>Node与浏览器的 Event Loop 差异</h2><p>浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行。</p><p>而在Node.js中，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行microtask队列的任务。</p><p>总结：</p><p>浏览器和Node 环境下，microtask 任务队列的执行时机不同</p><ul><li>Node端，microtask 在事件循环的各个阶段之间执行</li><li>浏览器端，microtask 在事件循环的 macrotask 执行完之后执行</li></ul><p>但是，在Node版本更新到11之后，<strong>Event Loop运行原理发生了变化，一旦执行一个阶段里的一个宏任务(setTimeout,setInterval和setImmediate)就立刻执行微任务队列，这点就跟浏览器端一致。</strong></p><h1 id="26、介绍模块化发展历程"><a href="#26、介绍模块化发展历程" class="headerlink" title="26、介绍模块化发展历程"></a>26、介绍模块化发展历程</h1><blockquote><p>可从IIFE、AMD、CMD、CommonJS、UMD、webpack(require.ensure)、ES Module、<code>&lt;script type=&quot;module&quot;&gt;</code> 这几个角度考虑。</p></blockquote><p><strong>模块化主要是用来抽离公共代码，隔离作用域，避免变量冲突等。</strong></p><p>因为一开始 JavaScript 本身没有提供模块化的机制，所以才会衍生出 CommonJS、AMD、CMD 和 UMD 这么多模块化规范。JavaScript 在 ES6 时原生提供了 import 和export 模块化机制</p><p><strong>IIFE</strong>： 使用自执行函数来编写模块化，特点：<strong>在一个单独的函数作用域中执行代码，避免变量冲突</strong>。</p><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">return</span> &#123;data:[]  &#125;&#125;)()</code></pre><p><strong>AMD</strong>： 使用requireJS 来编写模块化，特点：<strong>依赖必须提前声明好</strong>。</p><pre><code class="hljs js">define(<span class="hljs-string">&#x27;./index.js&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">code</span>)</span>&#123;<span class="hljs-comment">// code 就是index.js 返回的内容</span>&#125;)</code></pre><p><strong>CMD</strong>： 使用seaJS 来编写模块化，特点：<strong>支持动态引入依赖文件</strong>。</p><pre><code class="hljs js">define(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require, exports, module</span>) </span>&#123;    <span class="hljs-keyword">var</span> indexCode = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./index.js&#x27;</span>);&#125;);</code></pre><p><strong>CommonJS</strong>： node.js 中自带的模块化。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);</code></pre><p>特点: <code>require</code>、<code>module.exports</code>、<code>exports</code><br>CommonJS 一般用在服务端或者Node用来同步加载模块，它对于模块的依赖发生在代码运行阶段，不适合在浏览器端做异步加载。</p><p><strong>UMD</strong>：兼容AMD，CommonJS 模块化语法。</p><p>**webpack(require.ensure)**：webpack 2.x 版本中的代码分割。</p><p><strong>ES Module</strong>： ES6 引入的模块化，支持import 来引入另一个 js 。</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> a <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;a&#x27;</span>;</code></pre><p>特点: <code>import</code>、<code>export</code><br>ES6模块化不是对象，<code>import</code>会在JavaScript引擎静态分析，在编译时就引入模块代码，而并非在代码运行时加载，因此也不适合异步加载。</p><p>ES Module 的优势：</p><ul><li>死代码检测和排除。我们可以用静态分析工具检测出哪些模块没有被调用过。比如，在引入工具类库时，工程中往往只用到了其中一部分组件或接口，但有可能会将其代码完整地加载进来。未被调用到的模块代码永远不会被执行，也就成为了死代码。通过静态分析可以在打包时去掉这些未曾使用过的模块，以减小打包资源体积。</li><li>模块变量类型检查。JavaScript属于动态类型语言，不会在代码执行前检查类型错误（比如对一个字符串类型的值进行函数调用）。ES6 Module的静态模块结构有助于确保模块之间传递的值或接口类型是正确的。</li><li>编译器优化。在CommonJS等动态模块系统中，无论采用哪种方式，本质上导入的都是一个对象，而ES6 Module支持直接导入变量，减少了引用层级，程序效率更高。</li></ul><h2 id="二者的差异"><a href="#二者的差异" class="headerlink" title="二者的差异"></a>二者的差异</h2><h3 id="CommonJS模块引用后是一个值的拷贝，而ESModule引用后是一个值的动态映射，并且这个映射是只读的。"><a href="#CommonJS模块引用后是一个值的拷贝，而ESModule引用后是一个值的动态映射，并且这个映射是只读的。" class="headerlink" title="CommonJS模块引用后是一个值的拷贝，而ESModule引用后是一个值的动态映射，并且这个映射是只读的。"></a>CommonJS模块引用后是一个值的拷贝，而ESModule引用后是一个值的动态映射，并且这个映射是只读的。</h3><ul><li>CommonJS 模块输出的是值的拷贝，一旦输出之后，无论模块内部怎么变化，都无法影响之前的引用。</li><li>ESModule 是引擎会在遇到<code>import</code>后生成一个引用链接，在脚本真正执行时才会根据这个引用链接去模块里面取值，模块内部的原始值变了<code>import</code>加载的模块也会变。</li></ul><h3 id="CommonJS运行时加载，ESModule编译阶段引用。"><a href="#CommonJS运行时加载，ESModule编译阶段引用。" class="headerlink" title="CommonJS运行时加载，ESModule编译阶段引用。"></a>CommonJS运行时加载，ESModule编译阶段引用。</h3><ul><li>CommonJS在引入时是加载整个模块，生成一个对象，然后再从这个生成的对象上读取方法和属性。</li><li>ESModule 不是对象，而是通过<code>export</code>暴露出要输出的代码块，在<code>import</code>时使用静态命令的方法引用指定的输出代码块，并在<code>import</code>语句处执行这个要输出的代码，而不是直接加载整个模块。</li></ul><h1 id="27、全局作用域中，用-const-和-let-声明的变量不在-window-上，那到底在哪里？如何去获取？"><a href="#27、全局作用域中，用-const-和-let-声明的变量不在-window-上，那到底在哪里？如何去获取？" class="headerlink" title="27、全局作用域中，用 const 和 let 声明的变量不在 window 上，那到底在哪里？如何去获取？"></a>27、全局作用域中，用 const 和 let 声明的变量不在 window 上，那到底在哪里？如何去获取？</h1><p>在 ES5 中，顶层对象的属性和全局变量是等价的，var 命令和 function 命令声明的全局变量，自然也是顶层对象。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">12</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a); <span class="hljs-comment">// 12</span><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.f); <span class="hljs-comment">// f()&#123;&#125;</span></code></pre><p>但 ES6 规定，var 命令和 function 命令声明的全局变量，依旧是顶层对象的属性，但 let 命令、const 命令、class 命令声明的全局变量，不属于顶层对象的属性。</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> aa = <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> bb = <span class="hljs-number">2</span>;<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.aa); <span class="hljs-comment">// undefined</span><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.bb); <span class="hljs-comment">// undefined</span></code></pre><p>在全局作用域中，用 let 和 const 声明的全局变量并没有在全局对象中，只是一个块级作用域（Script）中</p><p>在定义变量的块级作用域中就能获取啊，既然不属于顶层对象，那就不加 window（global）呗。</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> aa = <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> bb = <span class="hljs-number">2</span>;<span class="hljs-built_in">console</span>.log(aa); <span class="hljs-comment">// 1</span><span class="hljs-built_in">console</span>.log(bb); <span class="hljs-comment">// 2</span></code></pre><h1 id="28、cookie-和-token-都存放在-header-中，为什么不会劫持-token？"><a href="#28、cookie-和-token-都存放在-header-中，为什么不会劫持-token？" class="headerlink" title="28、cookie 和 token 都存放在 header 中，为什么不会劫持 token？"></a>28、cookie 和 token 都存放在 header 中，为什么不会劫持 token？</h1><p>形象的比喻一下：</p><p>cookie 就好比如：你将身份证给管理员看了一下，他记录下你的身份证号然后发给你一个编号，每次你出示编号，他拿着编号去查你的身份证号</p><p>token：就是直接给服务员看自己的身份证</p><p>cookie ：可以存一些用户信息。因为 HTTP 是无状态的，它不知道你有没有登陆过。故可以通过cookie里的信息解决无状态的问题。</p><p>而浏览器，会自动带上请求同域的cookie。（AJAX 不会自动携带cookie）</p><p>token ：后端把用户信息和其他内容放进去，通过 jwt 生成 token，返回给前端。<br>浏览器是不会自动携带 token。</p><h1 id="29、聊聊-Vue-的双向数据绑定，Model-如何改变-View，View-又是如何改变-Model-的"><a href="#29、聊聊-Vue-的双向数据绑定，Model-如何改变-View，View-又是如何改变-Model-的" class="headerlink" title="29、聊聊 Vue 的双向数据绑定，Model 如何改变 View，View 又是如何改变 Model 的"></a>29、聊聊 Vue 的双向数据绑定，Model 如何改变 View，View 又是如何改变 Model 的</h1><p>Vue2.x版本 的双向数据绑定核心是利用了 ES5  JavaScript 提供的元编程接口 <code>Object.defineProperty</code>  进行数据劫持，这也是Vue 不兼容 IE8及以下的浏览器的原因</p><p><code>Object.defineProperty</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象，我们可以利用<code>Object.defineProperty</code>提供的set、get 为对象属性设置 setter、getter方法，当我们访问或是修改对象属性时，就会触发 setter、getter 函数逻辑。</p><p>在 Vue 的初始化阶段会对 <code>props</code>、<code>methods</code>、<code>data</code>、<code>computed</code> 和 <code>watch</code> 等属性做了初始化操作挂载到vm实例上，通过vm.XX就可以访问到。调用 <code>observe</code> 方法给非 VNode 的对象类型数据添加一个 <code>Observer</code></p><p>通过 <code>Observer</code> 给对象的属性添加 getter 和 setter，同时还初始化了一个Dep 实例用于依赖收集和派发更新</p><p>给数据添加了 getter 和 setter，目的就是为了在我们访问数据以及写数据的时候能自动执行一些逻辑：getter 做的事情是依赖收集，setter 做的事情是派发更新。</p><p>在 <code>get</code> 函数中通过 <code>dep.depend</code> 做依赖收集，在<code>set</code>中通过另一个是 <code>dep.notify()</code>，通知所有的订阅者</p><p>Dep 是整个 getter 依赖收集的核心，<code>Dep</code> 是一个 Class，它定义了一些属性和方法，它有一个静态属性 <code>target</code>，这是一个全局唯一 <code>Watcher</code>，在同一时间只能有一个全局的 <code>Watcher</code> 被计算，另外它的自身属性 <code>subs</code> 也是 <code>Watcher</code> 的数组。</p><p><code>Watcher</code> 是一个 Class，在它的构造函数中，定义了一些和 <code>Dep</code> 相关的属性</p><p>当对数据对象的访问会触发他们的 getter 方法， Vue 的 mount 过程是通过 <code>mountComponent</code> 函数</p><p>收集依赖的目的是为了当这些响应式数据发生变化，触发它们的 setter 的时候，能知道应该通知哪些订阅者去做相应的逻辑处理，我们把这个过程叫派发更新，其实 <code>Watcher</code> 和 <code>Dep</code> 就是一个非常经典的观察者设计模式的实现</p><p>当我们在组件中对响应的数据做了修改，就会触发 setter 的逻辑，最后调用 <code>dep.notify()</code> 方法，他还遍历遍历<code>dep</code>所有的 <code>subs</code>，也就是 <code>Watcher</code> 的实例数组，然后调用每一个 <code>watcher</code> 的 <code>update</code> 方法</p><h1 id="30、两个数组合并成一个数组"><a href="#30、两个数组合并成一个数组" class="headerlink" title="30、两个数组合并成一个数组"></a>30、两个数组合并成一个数组</h1><blockquote><p>请把两个数组 [‘A1’, ‘A2’, ‘B1’, ‘B2’, ‘C1’, ‘C2’, ‘D1’, ‘D2’] 和 [‘A’, ‘B’, ‘C’, ‘D’]，合并为 [‘A1’, ‘A2’, ‘A’, ‘B1’, ‘B2’, ‘B’, ‘C1’, ‘C2’, ‘C’, ‘D1’, ‘D2’, ‘D’]。</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>, <span class="hljs-string">&#x27;C1&#x27;</span>, <span class="hljs-string">&#x27;C2&#x27;</span>, <span class="hljs-string">&#x27;D1&#x27;</span>, <span class="hljs-string">&#x27;D2&#x27;</span>]<span class="hljs-keyword">const</span> arr2 = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>]<span class="hljs-keyword">const</span> arr3 = arr2.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item + <span class="hljs-number">3</span>)<span class="hljs-built_in">console</span>.log(arr3) <span class="hljs-comment">//[ &#x27;A3&#x27;, &#x27;B3&#x27;, &#x27;C3&#x27;, &#x27;D3&#x27; ]</span><span class="hljs-keyword">const</span> arr4 = [...arr1, ...arr3].sort()<span class="hljs-built_in">console</span>.log(arr4)<span class="hljs-comment">//[&quot;A1&quot;, &quot;A2&quot;, &quot;A3&quot;, &quot;B1&quot;, &quot;B2&quot;, &quot;B3&quot;, &quot;C1&quot;, &quot;C2&quot;, &quot;C3&quot;, &quot;D1&quot;, &quot;D2&quot;, &quot;D3&quot;]</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《前端100问》20</title>
    <link href="/2020/11/06/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B20/"/>
    <url>/2020/11/06/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B20/</url>
    
    <content type="html"><![CDATA[<h1 id="11、算法手写题-数组扁平化去重"><a href="#11、算法手写题-数组扁平化去重" class="headerlink" title="11、算法手写题 数组扁平化去重"></a>11、算法手写题 数组扁平化去重</h1><blockquote><p>已知如下数组：</p><p>var arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];</p><p>编写一个程序将数组扁平化去并除其中重复部分数据，最终得到一个升序且不重复的数组</p></blockquote><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr.flat(<span class="hljs-literal">Infinity</span>))).sort((<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b))</code></pre><p><code>Array.prototype.flat()</code> 用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。</p><p><code>flat()</code> 默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将 <code>flat()</code> 方法的参数写成一个整数，表示想要拉平的层数，默认为1。</p><p>如果不管有多少层嵌套，都要转成一维数组，可以用 <code>Infinity</code> 关键字作为参数。</p><h1 id="12、JS-异步解决方案的发展历程以及优缺点"><a href="#12、JS-异步解决方案的发展历程以及优缺点" class="headerlink" title="12、JS 异步解决方案的发展历程以及优缺点"></a>12、JS 异步解决方案的发展历程以及优缺点</h1><p>按时间顺序：</p><ol><li>回调函数（callback）</li><li>Promise</li><li>Generator</li><li>async/await</li></ol><p>优缺点：</p><h2 id="回调函数（callback）"><a href="#回调函数（callback）" class="headerlink" title="回调函数（callback）"></a>回调函数（callback）</h2><p><strong>优点：解决了同步的问题</strong>（只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行）</p><p>缺点：回调地狱，不能用 try catch 捕获错误，不能 return</p><p>回调地狱的根本问题在于：</p><ul><li>缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符</li><li>嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身，即（<strong>控制反转</strong>）</li><li>嵌套函数过多的多话，很难处理错误</li></ul><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote><p>Promise就是为了解决callback的问题而产生的。</p></blockquote><p><strong>优点：解决了回调地狱的问题</strong></p><p><strong>缺点：无法取消 Promise ，错误需要通过回调函数来捕获</strong></p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p><strong>特点：可以控制函数的执行</strong>，可以配合 co 函数库使用</p><p>缺点：需要手动调用函数执行，麻烦</p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><blockquote><p>async、await 是异步的终极解决方案</p></blockquote><p><strong>优点是：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题。async 相比于 Generator内置了执行器，拥有更好的语义化</strong> </p><p><strong>缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低</strong></p><h1 id="13、Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？"><a href="#13、Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？" class="headerlink" title="13、Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？"></a>13、Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？</h1><p><strong>Promise</strong> 构造函数是同步执行的，而then方法里面的执行函数一般是放到微任务队列的异步任务所以是异步执行</p><p><strong>扩展：什么是Promise？</strong></p><p><strong>Promise</strong> 是解决异步编程的一种方案。以前我们处理异步操作，一般都是通过回调函数来处理，典型的例子就好像使用 <code>setTimeout</code> 一样，如果执行操作函数里面还有 <code>setTimeout</code>，一层一层往下，都有的话。那么代码看起来十分臃肿，不利于维护，也很容易写出bug。</p><p>而 <strong>Promise</strong> 的出现，能够让异步编程变得更加可观，把异步操作按照同步操作的流程表达出来，避免层层嵌套的回调函数。</p><p><strong>Promise</strong> 对象有三种状态，进行中<code>pending</code>、完成成功<code>fulfilled</code>、失败<code>rejected</code>，顾名思义，表示这个异步操作是进行中还是成功还是失败了。</p><p><strong>Promise</strong> 的状态一旦确定了，就不会再更改了，这就是 promise（承诺）的由来吧，承诺状态确定了就是确定了。</p><p>然而 <strong>Promise</strong> 还是有不足的地方：</p><ol><li>如果没有执行捕获错误的函数（如下述说的 catch，then 的第二个参数），则 <strong>Promise</strong> 内部发生的错误（虽然会报错但）是无法传递到 <strong>Promise</strong> 外部代码上的，因此外部脚本并不会因为错误而导致不继续执行下去。</li><li>一旦新建了，就无法中断它的操作。不像 <code>setTimeout</code> 那样，我还可以使用 <code>clearTimeout</code> 取消掉。</li></ol><h1 id="14、如何实现一个-new"><a href="#14、如何实现一个-new" class="headerlink" title="14、如何实现一个 new"></a>14、如何实现一个 new</h1><p><code>new</code> 在执行时，会做下面这四件事：</p><ol><li><p>开辟内存空间，在内存中创建一个新的空对象。</p></li><li><p>让 <strong>this</strong> 指向这个新的对象。</p></li><li><p>执行构造函数里面的代码，给这个新对象添加属性和方法。</p></li><li><p>返回这个新对象（所以构造函数里面不需要 return）</p></li></ol><pre><code class="hljs js"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 1. 创建了一个全新的对象。</span><span class="hljs-comment"> * 2. 这个对象会被执行[[Prototype]]（也就是__proto__）链接。</span><span class="hljs-comment"> * 3. 生成的新对象会绑定到函数调用的this。</span><span class="hljs-comment"> * 4. 通过new创建的每个对象将最终被[[Prototype]]链接到这个函数的prototype对象上。</span><span class="hljs-comment"> * 5. 如果函数没有返回对象类型Object(包含Functoin, Array, Date, RegExg, Error)，那么new表达式中的函数调用会自动返回这个新的对象。</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_new</span>(<span class="hljs-params">fn, ...arg</span>) </span>&#123;  <span class="hljs-keyword">const</span> obj = <span class="hljs-built_in">Object</span>.create(fn.prototype)  <span class="hljs-keyword">const</span> ret = fn.apply(obj, arg)  <span class="hljs-keyword">return</span> ret <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> ? ret : obj&#125;</code></pre><h1 id="15、简单讲解一下http2的多路复用"><a href="#15、简单讲解一下http2的多路复用" class="headerlink" title="15、简单讲解一下http2的多路复用"></a>15、简单讲解一下http2的多路复用</h1><p>HTTP2.0 的出现，相比较于 HTTP1.x，大幅度提升了 Web 的性能。在与 1.x 版本语义上完全兼容的基础上大幅度减少了网络延迟，减少了前端在 Web 优化的工作量。</p><p>而实现以上优点的原因就是 HTTP2.0 采用了多路复用，即允许同时通过单一的 HTTP2.0 连接发起多重的 <em>请求-响应</em> 消息。就是连接一次可以发送多个请求-响应。</p><p>多路复用代替了 HTTP1.x 的 <em>序列</em> 和 <em>阻塞机制</em>，所有的相同域名请求都通过同一个 TCP 连接并发完成。在HTTP1.x 中，并发多个请求需要多个 TCP 连接，浏览器为了控制资源会有 6 到 8 个 TCP 连接都限制。</p><p>HTTP2.0 采用二进制格式传输，取代了 HTTP1.x 的文本格式，二进制格式解析更高效。</p><p>在 HTTP2.0 中：</p><ul><li>同域名下所有通信都在单个连接上完成，消除了因多个 TCP 连接而带来的延时和内存消耗。</li><li>单个连接上可以并行交错的请求和响应，之间互不干扰</li></ul><p>HTTP2.0 中有两个很重要的概念：帧（frame）和流（stream）</p><p>帧代表着最小的数据单位，每个帧都会标识出该帧属于哪个流，流就是由多个帧组成的数据流。</p><p>多路复用，也就是在一个 TCP 连接中可以存在多条流，就是我们所说的可以发送多个请求，对端可以通过帧的标示知道，该帧属于哪个流（请求），通过这个技术及意义避免 HTTP 1.x 中的队头阻塞问题，极大的提高传输性能。</p><h1 id="16、谈谈你对TCP三次握手和四次挥手的理解"><a href="#16、谈谈你对TCP三次握手和四次挥手的理解" class="headerlink" title="16、谈谈你对TCP三次握手和四次挥手的理解"></a>16、谈谈你对TCP三次握手和四次挥手的理解</h1><p>三次握手：</p><p>Browser:先告诉服务器 “我要开始发起请求了，你那边可以吗？”<br>Server:服务器回复浏览器 “没问题，你发吧！”<br>Browser:告诉服务器 “好的，那我开始发了。”</p><p>四次挥手：</p><p>Browser:先告诉服务器 “我数据都发完了，你可以关闭连接了。”<br>Server:回复浏览器 “我先看看我这边还有没有数据没传完。”<br>Server:确认过以后，再次回复浏览器 “我这边数据传输完成了，你可以关闭连接了。”<br>Browser:告诉服务器 “好的，那我真的关闭了。你不用回复我了。”</p><p>Browser又等了2MSL，确认确实没有再收到请求了，才会真的关闭TCP连接。</p><hr><p>三次握手：</p><p>从最开始双方都处于<code>CLOSED</code>状态。然后服务端开始监听某个端口，进入了<code>LISTEN</code>状态。</p><p>然后客户端主动发起连接，发送 SYN(同步序列编号) , 自己变成了<code>SYN-SENT</code>状态。</p><p>服务端接收到，返回<code>SYN</code>(对应客户端发来的SYN)和<code>ACK</code>(确认字符)，自己变成了<code>SYN-REVD</code>。</p><p>之后客户端再发送<code>ACK</code>给服务端，自己变成了<code>ESTABLISHED</code>状态；服务端收到<code>ACK</code>之后，也变成了<code>ESTABLISHED</code>状态。</p><p>四次挥手：</p><p>刚开始双方处于<code>ESTABLISHED</code>状态。客户端要断开了，向服务器发送 <code>FIN</code>(结束字段) 报文。发送后客户端变成了<code>FIN-WAIT-1</code>状态。注意, 这时候客户端同时也变成了<code>half-close(半关闭)</code>状态，即无法向服务端发送报文，只能接收</p><p>服务端接收后向客户端确认，变成了<code>CLOSED-WAIT</code>状态。客户端接收到了服务端的确认，变成了<code>FIN-WAIT2</code>状态。</p><p>随后，服务端向客户端发送<code>FIN</code>，自己进入<code>LAST-ACK</code>状态，客户端收到服务端发来的<code>FIN</code>后，自己变成了<code>TIME-WAIT</code>状态然后发送 ACK 给服务端。</p><p>这个时候，客户端需要等待足够长的时间，具体来说，是 2 个 <code>MSL</code>(<code>Maximum Segment Lifetime，报文最大生存时间</code>), 在这段时间内如果客户端没有收到服务端的重发请求，那么表示 ACK 成功到达，挥手结束，否则客户端重发 ACK。</p><p>补充：</p><p>TCP 三次握手的过程为什么是三次而不是两次、四次？</p><p>为什么不是两次？根本原因: 无法确认客户端的接收能力。</p><blockquote><p>如果是两次，你现在发了 SYN 报文想握手，但是这个包<strong>滞留</strong>在了当前的网络中迟迟没有到达，TCP 以为这是丢了包，于是重传，两次握手建立好了连接。看似没有问题，但是连接关闭后，如果这个<strong>滞留</strong>在网路中的包到达了服务端呢？这时候由于是两次握手，服务端只要接收到然后发送相应的数据包，就默认<strong>建立连接</strong>，但是现在客户端已经断开了。这就带来了连接资源的浪费。</p></blockquote><p>为什么不是四次？三次就足够了，再多用处就不大了。</p><p>为什么是四次挥手而不是三次？因为服务端在接收到<code>FIN</code>, 往往不会立即返回<code>FIN</code>, 必须等到服务端所有的报文都发送完毕了，才能发<code>FIN</code>。因此先发一个<code>ACK</code>表示已经收到客户端的<code>FIN</code>，延迟一段时间才发<code>FIN</code>。这就造成了四次挥手。</p><p>如果是三次挥手会有什么问题？等于说服务端将<code>ACK</code>和<code>FIN</code>的发送合并为一次挥手，这个时候长时间的延迟可能会导致客户端误以为<code>FIN</code>没有到达客户端，从而让客户端不断的重发<code>FIN</code>。</p><h1 id="17、A、B-机器正常连接后，B-机器突然重启，问-A-此时处于-TCP-什么状态"><a href="#17、A、B-机器正常连接后，B-机器突然重启，问-A-此时处于-TCP-什么状态" class="headerlink" title="17、A、B 机器正常连接后，B 机器突然重启，问 A 此时处于 TCP 什么状态"></a>17、A、B 机器正常连接后，B 机器突然重启，问 A 此时处于 TCP 什么状态</h1><blockquote><p>如果A 与 B 建立了正常连接后，从未相互发过数据，这个时候 B 突然机器重启，问 A 此时处于 TCP 什么状态？如何消除服务器程序中的这个状态？（超纲题，了解即可）</p></blockquote><p>A侧在超时退出之后一般会发送一个RST 包用于告知对端重置链路，并给应用层一个异常的状态信息，视乎同步IO与异步IO的差异，这个异常获知的时机会有所不同。</p><p>B侧重启之后，因为不存有之前A-B之间建立链路相关的信息，这时候收到任何A侧来的数据都会以RST作为响应，以告知A侧链路发生异常</p><h1 id="18、React-中-setState-什么时候是同步的，什么时候是异步的？"><a href="#18、React-中-setState-什么时候是同步的，什么时候是异步的？" class="headerlink" title="18、React 中 setState 什么时候是同步的，什么时候是异步的？"></a>18、React 中 setState 什么时候是同步的，什么时候是异步的？</h1><h1 id="19、React-setState-笔试题，下面的代码输出什么？"><a href="#19、React-setState-笔试题，下面的代码输出什么？" class="headerlink" title="19、React setState 笔试题，下面的代码输出什么？"></a>19、React setState 笔试题，下面的代码输出什么？</h1><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;  <span class="hljs-keyword">constructor</span>() &#123;    <span class="hljs-built_in">super</span>();    <span class="hljs-built_in">this</span>.state = &#123;      val: <span class="hljs-number">0</span>    &#125;;  &#125;    componentDidMount() &#123;    <span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">val</span>: <span class="hljs-built_in">this</span>.state.val + <span class="hljs-number">1</span>&#125;);    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.val);    <span class="hljs-comment">// 第 1 次 log</span>    <span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">val</span>: <span class="hljs-built_in">this</span>.state.val + <span class="hljs-number">1</span>&#125;);    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.val);    <span class="hljs-comment">// 第 2 次 log</span>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">val</span>: <span class="hljs-built_in">this</span>.state.val + <span class="hljs-number">1</span>&#125;);      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.val);  <span class="hljs-comment">// 第 3 次 log</span>      <span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">val</span>: <span class="hljs-built_in">this</span>.state.val + <span class="hljs-number">1</span>&#125;);      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.val);  <span class="hljs-comment">// 第 4 次 log</span>    &#125;, <span class="hljs-number">0</span>);  &#125;  render() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;;</code></pre><h1 id="20、介绍下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？"><a href="#20、介绍下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？" class="headerlink" title="20、介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？"></a>20、介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？</h1><ul><li>发出<code>npm install</code>命令</li><li>查询node_modules目录之中是否已经存在指定模块<ul><li>若存在，不再重新安装</li><li>若不存在<ul><li>npm 向 registry 查询模块压缩包的网址</li><li>下载压缩包，存放在根目录下的<code>.npm</code>目录里</li><li>解压压缩包到当前项目的<code>node_modules</code>目录</li></ul></li></ul></li></ul><h2 id="npm-实现原理"><a href="#npm-实现原理" class="headerlink" title="npm 实现原理"></a>npm 实现原理</h2><ol><li><p>执行工程自身 preinstall</p><blockquote><p>当前 npm 工程如果定义了 preinstall 钩子此时会被执行。</p></blockquote></li><li><p>确定首层依赖模块</p><blockquote><p>首先需要做的是确定工程中的首层依赖，也就是 dependencies 和 devDependencies 属性中直接指定的模块（假设此时没有添加 npm install 参数）。</p></blockquote><blockquote><p>工程本身是整棵依赖树的根节点，每个首层依赖模块都是根节点下面的一棵子树，npm 会开启多进程从每个首层依赖模块开始逐步寻找更深层级的节点。</p></blockquote></li><li><p>获取模块</p></li></ol><p>获取模块是一个递归的过程</p><ul><li>获取模块信息。在下载一个模块之前，首先要确定其版本，这是因为 package.json 中往往是 semantic version（semver，语义化版本）。此时如果版本描述文件（npm-shrinkwrap.json 或 package-lock.json）中有该模块信息直接拿即可，如果没有则从仓库获取。如 packaeg.json 中某个包的版本是 ^1.1.0，npm 就会去仓库中获取符合 1.x.x 形式的最新版本。</li><li>获取模块实体。上一步会获取到模块的压缩包地址（resolved 字段），npm 会用此地址检查本地缓存，缓存中有就直接拿，如果没有则从仓库下载。</li><li>查找该模块依赖，如果有依赖则回到第1步，如果没有则停止。</li></ul><ol start="4"><li>模块扁平化（dedup）</li></ol><p>上一步获取到的是一棵完整的依赖树，其中可能包含大量重复模块。比如 A 模块依赖于 loadsh，B 模块同样依赖于 lodash。在 npm3 以前会严格按照依赖树的结构进行安装，因此会造成模块冗余。</p><p>从 npm3 开始默认加入了一个 dedupe 的过程。它会遍历所有节点，逐个将模块放在根节点下面，也就是 node-modules 的第一层。当发现有<strong>重复模块</strong>时，则将其丢弃。</p><p>这里需要对<strong>重复模块</strong>进行一个定义，它指的是模块名相同且 semver 兼容。每个 semver 都对应一段版本允许范围，如果两个模块的版本允许范围存在交集，那么就可以得到一个兼容版本，而不必版本号完全一致，这可以使更多冗余模块在 dedupe 过程中被去掉。</p><ol start="5"><li><p>安装模块</p></li><li><p>执行工程自身生命周期</p></li></ol><blockquote><p>当前 npm 工程如果定义了钩子此时会被执行（按照 install、postinstall、prepublish、prepare 的顺序）。</p></blockquote><p>最后一步是生成或更新版本描述文件，npm install 过程完成。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《前端100问》10</title>
    <link href="/2020/11/06/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B10/"/>
    <url>/2020/11/06/%E3%80%8A%E5%89%8D%E7%AB%AF100%E9%97%AE%E3%80%8B10/</url>
    
    <content type="html"><![CDATA[<h1 id="1、写-React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？"><a href="#1、写-React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？" class="headerlink" title="1、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？"></a>1、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？</h1><p><code>key</code> 是给每一个 <strong>VNode</strong> 的唯一 <code>id</code>，可以依靠 <code>key</code>，在 <strong>diff 算法</strong> 执行时更快的找到对应的节点。</p><p>更准确、更快的拿到 <strong>Old VNode</strong> 中对应的 <strong>VNode</strong> 节点。</p><p>在数据变化时强制更新组件，以避免「原地复用」带来的副作用，使用 <code>key</code> 时，它会基于 <code>key</code> 的变化重新排列元素顺序，并且会移除 <code>key</code> 不存在的元素。</p><h1 id="2、-‘1’-‘2’-‘3’-map-parseInt-what-amp-why"><a href="#2、-‘1’-‘2’-‘3’-map-parseInt-what-amp-why" class="headerlink" title="2、[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ?"></a>2、[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ?</h1><p><strong>parseInt</strong></p><p><code>parseInt()</code> 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> intValue = <span class="hljs-built_in">parseInt</span>(string[, radix]);</code></pre><p><code>string</code> 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 toString 抽象操作)。字符串开头的空白符将会被忽略。</p><p><code>radix</code> 一个介于 2 和 36 之间的整数(数学系统的基础)，表示上述字符串的基数。<strong>默认为10</strong><br><code>返回值</code> 返回一个整数或 <strong>NaN</strong></p><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">// 100</span><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">100</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">// 100</span><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">100</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 4 -&gt; converts 100 in base 2 to base 10</span></code></pre><p><strong>注意：</strong><br>在 <code>radix</code> 为 <em>undefined</em>，或者 <code>radix</code> 为 <em>0</em> 或者没有指定的情况下，JavaScript 作如下处理：</p><ul><li>如果字符串 string 以 <em>0x</em> 或者 <em>0X</em> 开头, 则基数是16 (16进制).</li><li>如果字符串 string 以 <em>0</em> 开头, 基数是8（八进制）或者10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出 <code>radix</code> 参数的值。</li><li>如果字符串 string 以其它任何值开头，则基数是10 (十进制)。</li></ul><p><strong>map</strong></p><p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> new_array = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">currentValue[,index[, array]]</span>) </span>&#123; <span class="hljs-comment">// Return element for new_array</span> &#125;[, thisArg])</code></pre><p>可以看到 <code>callback</code> 回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。</p><ul><li><code>currentValue</code> 是 callback 数组中正在处理的当前元素。</li><li><code>index</code> 可选, 是 callback 数组中正在处理的当前元素的索引。</li><li><code>array</code> 可选, 是 callback map 方法被调用的数组。</li><li>另外还有 <code>thisArg</code> 可选, 执行 callback 函数时使用的 this 值。</li></ul><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];arr.map(<span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> num + <span class="hljs-number">1</span>); <span class="hljs-comment">// [2, 3, 4]</span></code></pre><p>所以对于题目：</p><pre><code class="hljs js">[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>].map(<span class="hljs-built_in">parseInt</span>)</code></pre><p>对于每个迭代<code>map</code>, <code>parseInt()</code>传递两个参数: <strong>字符串和基数</strong>。</p><p>所以实际执行的的代码是：</p><pre><code class="hljs js">[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>].map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(item, index)&#125;)</code></pre><p>所以结果为：</p><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// 1</span><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// NaN</span><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// NaN, 3 不是二进制</span>[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>].map(<span class="hljs-built_in">parseInt</span>)<span class="hljs-comment">// 1, NaN, NaN</span></code></pre><h1 id="3、什么是防抖和节流？有什么区别？如何实现？"><a href="#3、什么是防抖和节流？有什么区别？如何实现？" class="headerlink" title="3、什么是防抖和节流？有什么区别？如何实现？"></a>3、什么是防抖和节流？有什么区别？如何实现？</h1><p><strong>防抖</strong> （debounce）：防抖，顾名思义，防止抖动，以免把一次事件误认为多次，敲键盘就是一个每天都会接触到的防抖操作。</p><p>防抖适用场景：</p><ol><li>登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖。</li><li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖。</li><li>文本编辑器实时保存，当无任何更改操作一秒后进行保存。</li></ol><p>可以看出来<strong>防抖重在清零 <code>clearTimeout(timer)</code></strong></p><p><strong>节流</strong>（throttle）：节流，顾名思义，控制水的流量。控制事件发生的频率，如控制为1s发生一次，甚至1分钟发生一次。与<strong>服务端</strong>(server)及<strong>网关</strong>(gateway)控制的<strong>限流</strong>(Rate Limit) 类似。</p><p>节流适用场景：</p><ol><li><code>scroll</code> 事件，每隔一秒计算一次位置信息等。</li><li>浏览器播放事件，每个一秒计算一次进度信息等。</li><li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求 (也可做防抖)。</li></ol><p>可以看出来<strong>节流重在加锁 <code>timer=timeout</code></strong></p><p>代码实现：</p><pre><code class="hljs js"><span class="hljs-comment">/**防抖</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> <span class="hljs-variable">fn</span></span></span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> <span class="hljs-variable">wait</span></span></span><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;Function&#125;</span></span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;    <span class="hljs-keyword">let</span> timer;    <span class="hljs-comment">// 箭头函数始终指向上一层 this</span>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;        <span class="hljs-comment">// 使用闭包 timer持久化</span>        <span class="hljs-built_in">clearTimeout</span>(timer);        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;            fn(...args);        &#125;, wait);    &#125;;&#125;</code></pre><pre><code class="hljs js"><span class="hljs-comment">/**节流</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> <span class="hljs-variable">fn</span></span></span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> <span class="hljs-variable">wait</span></span></span><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;Function&#125;</span> </span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;    <span class="hljs-keyword">let</span> timer;    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (timer) <span class="hljs-keyword">return</span>;        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;            fn(...args);            timer = <span class="hljs-literal">null</span>;        &#125;,wait);    &#125;;&#125;</code></pre><h1 id="4、介绍下-Set、Map、WeakSet-和-WeakMap-的区别？"><a href="#4、介绍下-Set、Map、WeakSet-和-WeakMap-的区别？" class="headerlink" title="4、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？"></a>4、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h1><p>Set 和 Map 主要的应用场景在于 <strong>数据重组</strong> 和 <strong>数据储存</strong></p><p>Set 是一种叫做<strong>集合</strong>的数据结构，Map 是一种叫做<strong>字典</strong>的数据结构</p><p><strong>集合（Set）</strong></p><p>ES6 新增的一种新的数据结构，类似于数组，但成员是唯一且无序的，没有重复的值。</p><p><strong>Set 本身是一种构造函数，用来生成 Set 数据结构。</strong></p><p>Set 对象允许你储存任何类型的唯一值，无论是原始值或者是对象引用。</p><p><strong>WeakSet</strong></p><p>WeakSet 对象允许你将<strong>弱引用对象</strong>储存在一个集合中</p><p>WeakSet 与 Set 的区别：</p><ul><li>WeakSet 只能储存对象引用，不能存放值，而 Set 对象都可以。</li><li>WeakSet 对象中储存的对象值都是被弱引用的，即垃圾回收机制不考虑 WeakSet 对该对象的应用，如果没有其他的变量或属性引用这个对象值，则这个对象将会被垃圾回收掉（不考虑该对象还存在于 WeakSet 中），所以，WeakSet 对象里有多少个成员元素，取决于垃圾回收机制有没有运行，运行前后成员个数可能不一致，遍历结束之后，有的成员可能取不到了（被垃圾回收了），WeakSet 对象是无法被遍历的（ES6 规定 WeakSet 不可遍历），也没有办法拿到它包含的所有元素。</li></ul><p><strong>字典（Map）</strong></p><p>集合 与 字典 的区别：</p><ul><li>共同点：集合、字典 可以储存不重复的值</li><li>不同点：集合 是以 [value, value] 的形式储存元素，字典 是以 [ key, value ] 的形式储存</li></ul><p><strong>WeakMap</strong></p><p>WeakMap 对象是一组键值对的集合，其中的<strong>键是弱引用对象，而值可以是任意</strong>。</p><p><strong>注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。</strong></p><p>WeakMap 中，每个键对自己所引用对象的引用都是弱引用，在没有其他引用和该键引用同一对象，这个对象将会被垃圾回收（相应的 key 则变成无效的），所以，WeakMap 的 key 是不可枚举的。</p><h1 id="5、介绍下深度优先遍历和广度优先遍历，如何实现？"><a href="#5、介绍下深度优先遍历和广度优先遍历，如何实现？" class="headerlink" title="5、介绍下深度优先遍历和广度优先遍历，如何实现？"></a>5、介绍下深度优先遍历和广度优先遍历，如何实现？</h1><p>深度优先遍历：从根节点出发，沿着左子树方向进行纵向遍历，直到找到叶子节点为止。然后回溯到前一个节点，进行右子树节点的遍历，直到遍历完所有可达节点为止。</p><p>广度优先遍历：从根节点出发，在横向遍历二叉树层段节点的基础上纵向遍历二叉树的层次。</p><p>以遍历 Dom 树为例子：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-one&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-one-one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-one-two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-one-three&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-two&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-two-one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-two-two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-three&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;onr-four&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>深度优先遍历：</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> depthFirstSearch = <span class="hljs-function">(<span class="hljs-params">node, nodeList = []</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;      nodeList.push(node)      <span class="hljs-comment">//ParentNode.children 返回子节点集合（动态）</span>      <span class="hljs-keyword">let</span> children = node.children      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; children.length; index++) &#123;        depthFirstSearch(children[index], nodeList)      &#125;    &#125;    <span class="hljs-keyword">return</span> nodeList  &#125;<span class="hljs-comment">//test</span><span class="hljs-keyword">const</span> node = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.one&#x27;</span>)<span class="hljs-built_in">console</span>.dir(depthFirstSearch(node))</code></pre><pre><code class="hljs js"><span class="hljs-comment">//结果：</span><span class="hljs-number">0</span>: div.one<span class="hljs-number">1</span>: div.one-one<span class="hljs-number">2</span>: div.one-one-one<span class="hljs-number">3</span>: div.one-one-two<span class="hljs-number">4</span>: div.one-one-three<span class="hljs-number">5</span>: div.one-two<span class="hljs-number">6</span>: div.one-two-one<span class="hljs-number">7</span>: div.one-two-two<span class="hljs-number">8</span>: div.one-three<span class="hljs-number">9</span>: div.onr-four</code></pre><p>广度遍历优先：</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> breadthFirstSearch = <span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> &#123;  <span class="hljs-keyword">let</span> nodes = []  <span class="hljs-keyword">let</span> stack = []  <span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;    stack.push(node)    <span class="hljs-keyword">while</span> (stack.length) &#123;      <span class="hljs-keyword">let</span> item = stack.shift()      <span class="hljs-keyword">let</span> children = item.children      nodes.push(item)      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; children.length; index++) &#123;        stack.push(children[index])      &#125;    &#125;  &#125;  <span class="hljs-keyword">return</span> nodes&#125;<span class="hljs-comment">//test</span><span class="hljs-keyword">const</span> node = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.one&#x27;</span>)<span class="hljs-built_in">console</span>.dir(breadthFirstSearch(node))</code></pre><pre><code class="hljs js"><span class="hljs-comment">//结果：</span><span class="hljs-number">0</span>: div.one<span class="hljs-number">1</span>: div.one-one<span class="hljs-number">2</span>: div.one-two<span class="hljs-number">3</span>: div.one-three<span class="hljs-number">4</span>: div.onr-four<span class="hljs-number">5</span>: div.one-one-one<span class="hljs-number">6</span>: div.one-one-two<span class="hljs-number">7</span>: div.one-one-three<span class="hljs-number">8</span>: div.one-two-one<span class="hljs-number">9</span>: div.one-two-two</code></pre><h1 id="6、请分别用深度优先思想和广度优先思想实现一个拷贝函数？"><a href="#6、请分别用深度优先思想和广度优先思想实现一个拷贝函数？" class="headerlink" title="6、请分别用深度优先思想和广度优先思想实现一个拷贝函数？"></a>6、请分别用深度优先思想和广度优先思想实现一个拷贝函数？</h1><blockquote><p>题目用意应该是考察遍历树和重复引用吧</p></blockquote><p>只深拷贝了 Object, Array，其他的非基本类型都是浅拷贝</p><pre><code class="hljs js"><span class="hljs-comment">/**工具函数</span><span class="hljs-comment"> * 如果是对象/数组，返回一个空的对象/数组</span><span class="hljs-comment"> * 都不是的话直接返回原对象</span><span class="hljs-comment"> * 判断返回的对象和原有对象是否相同就可以知道是否需要继续深拷贝</span><span class="hljs-comment"> * 处理其他的数据类型的话就在这里加判断</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>o 拷贝的对象</span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getEmpty</span>(<span class="hljs-params">o</span>) </span>&#123;  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.toString.call(o) === <span class="hljs-string">&#x27;[object Object]&#x27;</span>) &#123;    <span class="hljs-keyword">return</span> &#123;&#125;  &#125;  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.toString.call(o) === <span class="hljs-string">&#x27;[object Array]&#x27;</span>) &#123;    <span class="hljs-keyword">return</span> []  &#125;  <span class="hljs-keyword">return</span> target&#125;<span class="hljs-comment">// 深度优先拷贝</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepCopyDFS</span>(<span class="hljs-params">origin</span>) </span>&#123;  <span class="hljs-keyword">let</span> stack = []  <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>() <span class="hljs-comment">// 记录出现过的对象，用于处理环</span>  <span class="hljs-keyword">let</span> target = getEmpty(origin)  <span class="hljs-keyword">if</span> (target !== origin) &#123;    stack.push([origin, target])    map.set(origin, target)  &#125;  <span class="hljs-keyword">while</span> (stack.length) &#123;    <span class="hljs-keyword">let</span> [ori, tar] = stack.pop()    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> ori) &#123;      <span class="hljs-comment">// 处理环状</span>      <span class="hljs-keyword">if</span> (map.get(ori[key])) &#123;        tar[key] = map.get(ori[key])        <span class="hljs-keyword">continue</span>      &#125;      tar[key] = getEmpty(ori[key])      <span class="hljs-keyword">if</span> (tar[key] !== ori[key]) &#123;        stack.push([ori[key], tar[key]])        map.set(ori[key], tar[key])      &#125;    &#125;  &#125;  <span class="hljs-keyword">return</span> target&#125;</code></pre><h1 id="7、ES5-ES6-的继承除了写法以外还有什么区别？"><a href="#7、ES5-ES6-的继承除了写法以外还有什么区别？" class="headerlink" title="7、ES5/ES6 的继承除了写法以外还有什么区别？"></a>7、ES5/ES6 的继承除了写法以外还有什么区别？</h1><ol><li><code>class</code> 声明会提升，但不会初始化赋值。<code>Foo</code> 进入暂时性死区，类似于 <code>let</code>、<code>const</code> 声明变量。</li><li><code>class</code> 声明内部会启用严格模式。</li><li><code>class</code> 的所有方法（包括静态方法和实例方法）都是不可枚举的。</li><li><code>class</code> 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有<code>[[construct]]</code>，不能使用 <code>new</code> 来调用。</li><li>必须使用 <code>new</code> 调用 <code>class</code>。</li><li><code>class</code> 内部无法重写类名</li></ol><h1 id="8、setTimeout、Promise、Async-Await-的区别"><a href="#8、setTimeout、Promise、Async-Await-的区别" class="headerlink" title="8、setTimeout、Promise、Async/Await 的区别"></a>8、setTimeout、Promise、Async/Await 的区别</h1><p>setTimeout 是宿主环境（浏览器、Node）所发起的异步任务，相同的还有事件和 ajax</p><p>而 Promise 和 Async/Await 分别是 ES6、ES7，JavaScript 语言本身所实现的异步任务。</p><p>它们在 JavaScript 引擎中别分为由宿主发起的异步宏任务，和 JavaScript 语言自身发起的异步微任务。</p><p>当异步任务的回调函数注册完毕，分别进入宏任务队列和微任务队列，在执行顺序上优先执行微任务队列，执行完微任务队列再去读取宏任务队列，每执行完一个异步宏任务，都先读取一遍微任务队列，有就执行，没有就就继续执行宏任务队列</p><h1 id="9、Async-Await-如何通过同步的方式实现异步"><a href="#9、Async-Await-如何通过同步的方式实现异步" class="headerlink" title="9、Async/Await 如何通过同步的方式实现异步"></a>9、Async/Await 如何通过同步的方式实现异步</h1><p>Async/Await 就是一个<strong>自执行</strong>的 <em>generator</em>  函数。利用 <em>generator</em>  函数的特性把异步的代码写成“同步”的形式。</p><p><strong>生成器函数</strong>在执行时能暂停，后面又能从暂停处继续执行。</p><p>调用一个<strong>生成器函数</strong>并不会马上执行它里面的语句，而是返回一个这个生成器的 <strong>迭代器</strong> <strong>（ iterator）对象</strong>。当这个迭代器的 <code>next() </code>方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现<code>yield</code>的位置为止，<code>yield</code>后紧跟迭代器要返回的值。或者如果用的是 <code>yield*</code>)（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。</p><h1 id="10、异步笔试题"><a href="#10、异步笔试题" class="headerlink" title="10、异步笔试题"></a>10、异步笔试题</h1><blockquote><p>请写出下面代码的运行结果</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>);    <span class="hljs-keyword">await</span> async2();    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>);&#125;<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>);&#125;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>);<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout&#x27;</span>);&#125;, <span class="hljs-number">0</span>)<span class="hljs-comment">//1</span>async1();<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>);    resolve();&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>);&#125;);<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>);</code></pre><p>await 做了什么？</p><p>await 等待的是一个表达式，这个表达式的返回值可以是一个promise对象也可以是其他值。</p><p>很多人以为 await 会一直等待之后的表达式执行完之后才会继续执行后面的代码，<strong>实际上await是一个让出线程的标志。await 后面的表达式会先执行一遍，将 await 后面的代码加入到 microtask 中，然后就会跳出整个async函数来执行后面的代码。</strong></p><p>结果：</p><pre><code class="hljs js"><span class="hljs-comment">//script start</span><span class="hljs-comment">//async1 start</span><span class="hljs-comment">//async2</span><span class="hljs-comment">//promise1</span><span class="hljs-comment">//script end</span><span class="hljs-comment">//async1 end</span><span class="hljs-comment">//promise2</span><span class="hljs-comment">//setTimeout</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECMAScript6 精粹</title>
    <link href="/2020/11/02/ECMAScript6/"/>
    <url>/2020/11/02/ECMAScript6/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>整理一些在学习、工作中用到的 ES6</p></blockquote><h1 id="1-let-和-const"><a href="#1-let-和-const" class="headerlink" title="1. let 和 const"></a>1. let 和 const</h1><p>let 的作用域与 const 相同：只在声明所在的「块」级作用域内有效。且不存在变量提升 。</p><p>对于 数值、字符串、布尔值 经常会变的，用 let 声明。</p><p>对象、数组和函数用 const 来声明</p><h2 id="1-1-let"><a href="#1-1-let" class="headerlink" title="1.1 let"></a>1.1 let</h2><p>let 声明的变量，可以改变</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">4396</span>a = <span class="hljs-number">5678</span><span class="hljs-keyword">let</span> b = <span class="hljs-string">&#x27;playlife&#x27;</span>b = <span class="hljs-string">&#x27;Johnny&#x27;</span></code></pre><h2 id="1-2-const"><a href="#1-2-const" class="headerlink" title="1.2 const"></a>1.2 const</h2><p>const 声明一个只读的常量。一旦声明，常量的值就不能改变。</p><p>简单类型的数据（数值、字符串、布尔值），不可以变动</p><p>复合类型的数据（主要是对象和数组），可以这样子变动</p><pre><code class="hljs stylus">const <span class="hljs-selector-tag">a</span> = [<span class="hljs-number">4396</span>]<span class="hljs-selector-tag">a</span>.push(<span class="hljs-number">2233</span>)const <span class="hljs-selector-tag">b</span> = &#123;&#125;<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.name</span> = <span class="hljs-string">&#x27;playlife&#x27;</span></code></pre><h2 id="1-3-不存在变量提升"><a href="#1-3-不存在变量提升" class="headerlink" title="1.3 不存在变量提升"></a>1.3 不存在变量提升</h2><p>let 和 const 的暂时性死区：let 和 const 不存在变量提升是因为 let/const 命令会使区块形成封闭的作用域，</p><p>用 let/const 声明的变量会先在作用域中被创建出来，但因此时还未进行词法绑定，所以是不能被访问的，如果访问就会抛出错误。</p><p>因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。这在语法上，称为 “暂时性死区”（ temporal dead zone，简称 TDZ）。</p><h1 id="2-解构-Destructuring"><a href="#2-解构-Destructuring" class="headerlink" title="2. 解构 (Destructuring)"></a>2. 解构 (Destructuring)</h1><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构 （Destructuring）。</p><h2 id="2-1-数组"><a href="#2-1-数组" class="headerlink" title="2.1 数组"></a>2.1 数组</h2><p>一次性声明多个变量：</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> [a, b, c] = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ];</code></pre><p>结合扩展运算符：</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> [head, ...tail] = [ <span class="hljs-number">4</span> , <span class="hljs-number">3</span> , <span class="hljs-number">2</span> ,<span class="hljs-number">5</span> ]<span class="hljs-built_in">console</span>.log(head) <span class="hljs-comment">// 4</span><span class="hljs-built_in">console</span>.log(tail) <span class="hljs-comment">// [3, 2, 5]</span></code></pre><p>解构赋值允许指定默认值:</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> [foo = <span class="hljs-literal">true</span>] = [];foo <span class="hljs-comment">// true</span><span class="hljs-keyword">let</span> [x, y = <span class="hljs-string">&#x27;b&#x27;</span>] = [<span class="hljs-string">&#x27;a&#x27;</span>];<span class="hljs-comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></code></pre><blockquote><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p></blockquote><p>如果解构不成功，变量的值就等于<code>undefined</code>。</p><h2 id="2-2-对象-（常用）"><a href="#2-2-对象-（常用）" class="headerlink" title="2.2 对象 （常用）"></a>2.2 对象 （常用）</h2><p>解构不仅可以用于数组，还可以用于对象。</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;foo <span class="hljs-comment">// &quot;aaa&quot;</span>bar <span class="hljs-comment">// &quot;bbb&quot;</span></code></pre><p>数组的结构赋值取决于变量的排列位置，在对象中，结构赋值变量必须于对象的属性同名才能正确的赋值。（对象的解构赋值在开发中常用，它帮助我们代码更加简洁，更加优雅）</p><p>如果解构失败，变量的值等于<code>undefined</code>。</p><p>对象的解构也可以指定默认值。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> &#123;x = <span class="hljs-number">3</span>&#125; = &#123;&#125;;x <span class="hljs-comment">// 3</span><span class="hljs-keyword">var</span> &#123;x, y = <span class="hljs-number">5</span>&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;;x <span class="hljs-comment">// 1</span>y <span class="hljs-comment">// 5</span><span class="hljs-keyword">var</span> &#123;<span class="hljs-attr">x</span>: y = <span class="hljs-number">3</span>&#125; = &#123;&#125;;y <span class="hljs-comment">// 3</span><span class="hljs-keyword">var</span> &#123;<span class="hljs-attr">x</span>: y = <span class="hljs-number">3</span>&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">5</span>&#125;;y <span class="hljs-comment">// 5</span><span class="hljs-keyword">var</span> &#123; <span class="hljs-attr">message</span>: msg = <span class="hljs-string">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;msg <span class="hljs-comment">// &quot;Something went wrong&quot;</span></code></pre><h2 id="2-3-字符串"><a href="#2-3-字符串" class="headerlink" title="2.3 字符串"></a>2.3 字符串</h2><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span>;a <span class="hljs-comment">// &quot;h&quot;</span>b <span class="hljs-comment">// &quot;e&quot;</span>c <span class="hljs-comment">// &quot;l&quot;</span>d <span class="hljs-comment">// &quot;l&quot;</span>e <span class="hljs-comment">// &quot;o&quot;</span></code></pre><p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">length</span> : len&#125; = <span class="hljs-string">&#x27;hello&#x27;</span>;len <span class="hljs-comment">// 5</span></code></pre><h2 id="2-4-解构赋值用途"><a href="#2-4-解构赋值用途" class="headerlink" title="2.4 解构赋值用途"></a>2.4 解构赋值用途</h2><h3 id="2-4-1-交换变量的值"><a href="#2-4-1-交换变量的值" class="headerlink" title="2.4.1 交换变量的值"></a>2.4.1 交换变量的值</h3><pre><code class="hljs js"><span class="hljs-keyword">let</span> x = <span class="hljs-number">2</span><span class="hljs-keyword">let</span> y = <span class="hljs-number">3</span>[ x , y ] = [ y , x ]</code></pre><h3 id="2-4-2-接受函数返回的值"><a href="#2-4-2-接受函数返回的值" class="headerlink" title="2.4.2 接受函数返回的值"></a>2.4.2 接受函数返回的值</h3><blockquote><p>常用于 ajax请求返回数据的获取</p></blockquote><p>简单例子：</p><pre><code class="hljs js">cont &#123;status , data&#125; = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;localhost:33301&#x27;</span>)</code></pre><h3 id="2-4-3-导入模块指定的方法"><a href="#2-4-3-导入模块指定的方法" class="headerlink" title="2.4.3 导入模块指定的方法"></a>2.4.3 导入模块指定的方法</h3><p>举例子：vuex中的方法</p><pre><code class="hljs js"><span class="hljs-comment">//导入 vuex 的 mapGetters 方法</span><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></code></pre><h1 id="3-模版字符串"><a href="#3-模版字符串" class="headerlink" title="3. 模版字符串"></a>3. 模版字符串</h1><blockquote><p>可以在字符串中嵌入变量，可以换行，可以调用方法，比普通的拼接字符串更加高效优雅</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<span class="hljs-keyword">let</span> y = <span class="hljs-number">2</span>;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">`输出值为：<span class="hljs-subst">$&#123;x&#125;</span>`</span>) <span class="hljs-comment">// &quot;输出值为：1&quot;</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`输出值为：<span class="hljs-subst">$&#123;x + y&#125;</span>`</span>) <span class="hljs-comment">// &quot;输出值为：3&quot;</span></code></pre><p>常用于模版引擎</p><h1 id="4-字符串的新增方法"><a href="#4-字符串的新增方法" class="headerlink" title="4. 字符串的新增方法"></a>4. 字符串的新增方法</h1><blockquote><p>仅列举常用的新增方法，更多的请查看《ES6标准入门》阮一峰老师的书学习</p></blockquote><p>传统上，JavaScript 只有<code>indexOf</code>方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p><ul><li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li><li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;s.startsWith(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// true</span>s.endsWith(<span class="hljs-string">&#x27;!&#x27;</span>) <span class="hljs-comment">// true</span>s.includes(<span class="hljs-string">&#x27;o&#x27;</span>) <span class="hljs-comment">// true</span></code></pre><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;s.startsWith(<span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-number">6</span>) <span class="hljs-comment">// true</span>s.endsWith(<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// true</span>s.includes(<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-number">6</span>) <span class="hljs-comment">// false</span></code></pre><p>上面代码表示，使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p><p>扩展眼界列举出其他新增方法但是不详细展开，有需要再去查阅资料💾</p><ol><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#String.fromCodePoint()">String.fromCodePoint()</a></li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#String.raw()">String.raw()</a></li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9AcodePointAt()">实例方法：codePointAt()</a></li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Anormalize()">实例方法：normalize()</a></li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Aincludes(">实例方法：includes(), startsWith(), endsWith()</a>, startsWith(), endsWith())</li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Arepeat()">实例方法：repeat()</a></li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9ApadStart()%EF%BC%8CpadEnd()">实例方法：padStart()，padEnd()</a></li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9AtrimStart()%EF%BC%8CtrimEnd()">实例方法：trimStart()，trimEnd()</a></li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9AmatchAll()">实例方法：matchAll()</a></li><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9AreplaceAll()">实例方法：replaceAll()</a></li></ol><h1 id="5-函数的扩展"><a href="#5-函数的扩展" class="headerlink" title="5. 函数的扩展"></a>5. 函数的扩展</h1><h2 id="5-1-函数参数的默认值"><a href="#5-1-函数参数的默认值" class="headerlink" title="5.1 函数参数的默认值"></a>5.1 函数参数的默认值</h2><p>可以为函数参数声明一个默认值</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Point</span>(<span class="hljs-params">x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span></span>) </span>&#123;  <span class="hljs-built_in">this</span>.x = x;  <span class="hljs-built_in">this</span>.y = y;&#125;<span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Point();p <span class="hljs-comment">// &#123; x: 0, y: 0 &#125;</span></code></pre><p>参数变量是默认声明的，所以不能用<code>let</code>或<code>const</code>再次声明。</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x = <span class="hljs-number">5</span></span>) </span>&#123;  <span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>; <span class="hljs-comment">// error</span>  <span class="hljs-keyword">const</span> x = <span class="hljs-number">2</span>; <span class="hljs-comment">// error</span>&#125;</code></pre><p>上面代码中，参数变量<code>x</code>是默认声明的，在函数体中，不能用<code>let</code>或<code>const</code>再次声明，否则会报错。</p><p>使用参数默认值时，函数不能有同名参数。</p><p>参数默认值可以与解构赋值的默认值，结合起来使用。</p><pre><code class="hljs js">参数默认值可以与解构赋值的默认值，结合起来使用。<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">&#123;x, y = <span class="hljs-number">5</span>&#125;</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(x, y);&#125;foo(&#123;&#125;) <span class="hljs-comment">// undefined 5</span>foo(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;) <span class="hljs-comment">// 1 5</span>foo(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>&#125;) <span class="hljs-comment">// 1 2</span>foo() <span class="hljs-comment">// TypeError: Cannot read property &#x27;x&#x27; of undefined</span></code></pre><h2 id="5-2-rest-参数"><a href="#5-2-rest-参数" class="headerlink" title="5.2 rest 参数"></a>5.2 rest 参数</h2><p>ES6 引入 rest 参数（形式为<code>...变量名</code>），用于获取函数的多余参数，这样就不需要使用<code>arguments</code>对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">...values</span>) </span>&#123;  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> val <span class="hljs-keyword">of</span> values) &#123;    sum += val;  &#125;  <span class="hljs-keyword">return</span> sum;&#125;add(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 10</span></code></pre><p>上面代码的 add 函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。</p><p>注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</p><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, ...b, c</span>) </span>&#123;  <span class="hljs-comment">// ...</span>&#125;</code></pre><p>函数的<code>length</code>属性，不包括 rest 参数。</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>) </span>&#123;&#125;).length  <span class="hljs-comment">// 1</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...a</span>) </span>&#123;&#125;).length  <span class="hljs-comment">// 0</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, ...b</span>) </span>&#123;&#125;).length  <span class="hljs-comment">// 1</span></code></pre><h2 id="5-3-箭头函数"><a href="#5-3-箭头函数" class="headerlink" title="5.3 箭头函数"></a>5.3 箭头函数</h2><p>ES6 允许使用“箭头”（<code>=&gt;</code>）定义函数。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;<span class="hljs-comment">// 等同于</span><span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>&#123;  <span class="hljs-keyword">return</span> v;&#125;;</code></pre><p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><span class="hljs-keyword">let</span> getTempItem = <span class="hljs-function"><span class="hljs-params">id</span> =&gt;</span> &#123; <span class="hljs-attr">id</span>: id, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Temp&quot;</span> &#125;;<span class="hljs-comment">// 不报错</span><span class="hljs-keyword">let</span> getTempItem = <span class="hljs-function"><span class="hljs-params">id</span> =&gt;</span> (&#123; <span class="hljs-attr">id</span>: id, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Temp&quot;</span> &#125;);</code></pre><p>下面是 rest 参数与箭头函数结合的例子。</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> numbers = <span class="hljs-function">(<span class="hljs-params">...nums</span>) =&gt;</span> nums;numbers(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<span class="hljs-comment">// [1,2,3,4,5]</span><span class="hljs-keyword">const</span> headAndTail = <span class="hljs-function">(<span class="hljs-params">head, ...tail</span>) =&gt;</span> [head, tail];headAndTail(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<span class="hljs-comment">// [1,[2,3,4,5]]</span></code></pre><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>（2）不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</p><p>（3）不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</p><p>上面四点中，第一点尤其值得注意。<code>this</code>对象的指向是可变的，但是在箭头函数中，它是固定的。</p><h3 id="5-3-1-箭头函数不适用场景"><a href="#5-3-1-箭头函数不适用场景" class="headerlink" title="5.3.1 箭头函数不适用场景"></a>5.3.1 箭头函数不适用场景</h3><p>由于箭头函数使得<code>this</code>从“动态”变成“静态”，下面两个场合不应该使用箭头函数。</p><p>第一个场合是定义对象的方法，且该方法内部包括<code>this</code>。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> cat = &#123;  lives: <span class="hljs-number">9</span>,  jumps: <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">this</span>.lives--;  &#125;&#125;</code></pre><p>第二个场合是需要动态<code>this</code>的时候，也不应使用箭头函数。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> button = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;press&#x27;</span>);button.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-built_in">this</span>.classList.toggle(<span class="hljs-string">&#x27;on&#x27;</span>);&#125;);</code></pre><h1 id="6-数组的扩展"><a href="#6-数组的扩展" class="headerlink" title="6. 数组的扩展"></a>6. 数组的扩展</h1><p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p><h2 id="6-1-数组合并的新写法"><a href="#6-1-数组合并的新写法" class="headerlink" title="6.1 数组合并的新写法"></a>6.1 数组合并的新写法</h2><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<span class="hljs-keyword">const</span> arr2 = [<span class="hljs-string">&#x27;c&#x27;</span>];<span class="hljs-keyword">const</span> arr3 = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>];<span class="hljs-comment">// ES5 的合并数组</span>arr1.concat(arr2, arr3);<span class="hljs-comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span><span class="hljs-comment">// ES6 的合并数组</span>[...arr1, ...arr2, ...arr3]<span class="hljs-comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></code></pre><h2 id="6-2-函数调用"><a href="#6-2-函数调用" class="headerlink" title="6.2 函数调用"></a>6.2 函数调用</h2><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;  <span class="hljs-keyword">return</span> x + y;&#125;<span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">4</span>];add(...numbers) <span class="hljs-comment">// 8</span></code></pre><p>上面代码中函数的调用，它使用了扩展运算符。该运算符将一个数组，变为参数序列。</p><p>扩展运算符与正常的函数参数可以结合使用，非常灵活。</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">v, w, x, y, z</span>) </span>&#123; &#125;<span class="hljs-keyword">const</span> args = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];f(<span class="hljs-number">-1</span>, ...args, <span class="hljs-number">2</span>, ...[<span class="hljs-number">3</span>]);</code></pre><h2 id="6-3-复制数组的简便写法"><a href="#6-3-复制数组的简便写法" class="headerlink" title="6.3 复制数组的简便写法"></a>6.3 复制数组的简便写法</h2><pre><code class="hljs js"><span class="hljs-keyword">const</span> a1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<span class="hljs-comment">// 写法一</span><span class="hljs-keyword">const</span> a2 = [...a1];a2[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;a1 <span class="hljs-comment">// [1, 2]</span><span class="hljs-comment">// 写法二</span><span class="hljs-keyword">const</span> [...a2] = a1;a2[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;a1 <span class="hljs-comment">// [1, 2]</span></code></pre><p>上面的两种写法，a2 都是 a1 的克隆，且不会修改原来的数组。</p><h2 id="6-4-将字符串转为真正的数组"><a href="#6-4-将字符串转为真正的数组" class="headerlink" title="6.4 将字符串转为真正的数组"></a>6.4 将字符串转为真正的数组</h2><pre><code class="hljs js">[...<span class="hljs-string">&#x27;hello&#x27;</span>]<span class="hljs-comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></code></pre><h2 id="6-5-数组实例的-entries-，keys-和-values"><a href="#6-5-数组实例的-entries-，keys-和-values" class="headerlink" title="6.5 数组实例的 entries()，keys() 和 values()"></a>6.5 数组实例的 entries()，keys() 和 values()</h2><p>用 for…of 循环进行遍历，唯一的区别是 keys() 是对键名的遍历、values() 是对键值的遍历，entries() 是对键值对的遍历。</p><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">of</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].keys()) &#123;  <span class="hljs-built_in">console</span>.log(index);&#125;<span class="hljs-comment">// 0</span><span class="hljs-comment">// 1</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> elem <span class="hljs-keyword">of</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].values()) &#123;  <span class="hljs-built_in">console</span>.log(elem);&#125;<span class="hljs-comment">// &#x27;a&#x27;</span><span class="hljs-comment">// &#x27;b&#x27;</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [index, elem] <span class="hljs-keyword">of</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].entries()) &#123;  <span class="hljs-built_in">console</span>.log(index, elem);&#125;<span class="hljs-comment">// 0 &quot;a&quot;</span><span class="hljs-comment">// 1 &quot;b&quot;</span></code></pre><h2 id="6-6-includes-是否包含给定的值"><a href="#6-6-includes-是否包含给定的值" class="headerlink" title="6.6 includes() 是否包含给定的值"></a>6.6 includes() 是否包含给定的值</h2><p>Array.prototype.includes 方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的 includes 方法类似。ES2016 引入了该方法。</p><pre><code class="hljs yaml">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-string">.includes(2)</span>     <span class="hljs-string">//</span> <span class="hljs-literal">true</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-string">.includes(4)</span>     <span class="hljs-string">//</span> <span class="hljs-literal">false</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">NaN</span>]<span class="hljs-string">.includes(NaN)</span> <span class="hljs-string">//</span> <span class="hljs-literal">true</span></code></pre><p>该方法的第二个参数表示搜索的起始位置，默认为 0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为 -4，但数组长度为 3 ），则会重置为从 0 开始。</p><pre><code class="hljs js">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">// false</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">3</span>, <span class="hljs-number">-1</span>); <span class="hljs-comment">// true</span></code></pre><h2 id="6-7-Array-from-转为真正的数组"><a href="#6-7-Array-from-转为真正的数组" class="headerlink" title="6.7 Array.from() 转为真正的数组"></a>6.7 Array.from() 转为真正的数组</h2><p><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p><p>下面是一个类似数组的对象，<code>Array.from</code>将它转为真正的数组。</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arrayLike = &#123;    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,    length: <span class="hljs-number">3</span>&#125;;<span class="hljs-comment">// ES5的写法</span><span class="hljs-keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><span class="hljs-comment">// ES6的写法</span><span class="hljs-keyword">let</span> arr2 = <span class="hljs-built_in">Array</span>.from(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></code></pre><h1 id="7-对象的扩展"><a href="#7-对象的扩展" class="headerlink" title="7. 对象的扩展"></a>7. 对象的扩展</h1><h2 id="7-1-属性和方法的简洁表示法"><a href="#7-1-属性和方法的简洁表示法" class="headerlink" title="7.1 属性和方法的简洁表示法"></a>7.1 属性和方法的简洁表示法</h2><pre><code class="hljs js"><span class="hljs-keyword">let</span> birth = <span class="hljs-string">&#x27;1997/04/05&#x27;</span>;<span class="hljs-keyword">const</span> Person = &#123;  name: <span class="hljs-string">&#x27;playlife&#x27;</span>,  <span class="hljs-comment">//等同于birth: birth</span>  birth,  <span class="hljs-comment">// 等同于hello: function ()...</span>  hello() &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我的名字是&#x27;</span>, <span class="hljs-built_in">this</span>.name); &#125;&#125;;</code></pre><h2 id="7-2-Object-assign"><a href="#7-2-Object-assign" class="headerlink" title="7.2 Object.assign()"></a>7.2 Object.assign()</h2><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<span class="hljs-keyword">const</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<span class="hljs-keyword">const</span> source2 = &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<span class="hljs-built_in">Object</span>.assign(target, source1, source2);target <span class="hljs-comment">// &#123;a:1, b:2, c:3&#125;</span></code></pre><p>Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。</p><p><strong>注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</strong></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;;<span class="hljs-keyword">const</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> &#125;;<span class="hljs-keyword">const</span> source2 = &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<span class="hljs-built_in">Object</span>.assign(target, source1, source2);target <span class="hljs-comment">// &#123;a:1, b:2, c:3&#125;</span></code></pre><p>Object.assign 方法实行的是浅拷贝，而不是深拷贝。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj1 = &#123;<span class="hljs-attr">a</span>: &#123;<span class="hljs-attr">b</span>: <span class="hljs-number">1</span>&#125;&#125;;<span class="hljs-keyword">const</span> obj2 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj1);obj1.a.b = <span class="hljs-number">2</span>;obj2.a.b <span class="hljs-comment">// 2</span></code></pre><p>上面代码中，源对象 obj1 的 a 属性的值是一个对象，Object.assign 拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。</p><p>补充：</p><p>描述对象的<code>enumerable</code>属性，称为“可枚举性”，如果该属性为<code>false</code>，就表示某些操作会忽略当前属性。</p><p>目前，有四个操作会忽略<code>enumerable</code>为<code>false</code>的属性。</p><ul><li><code>for...in</code>循环：只遍历对象自身的和继承的可枚举的属性。</li><li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名。</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性。</li><li><code>Object.assign()</code>： 忽略<code>enumerable</code>为<code>false</code>的属性，只拷贝对象自身的可枚举的属性。</li></ul><h2 id="7-3-属性遍历"><a href="#7-3-属性遍历" class="headerlink" title="7.3 属性遍历"></a>7.3 属性遍历</h2><p>ES6 一共有 5 种方法可以遍历对象的属性。</p><p><strong>（1）for…in</strong></p><p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><p><strong>（2）Object.keys(obj)</strong></p><p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><p><strong>（3）Object.getOwnPropertyNames(obj)</strong></p><p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><p><strong>（4）Object.getOwnPropertySymbols(obj)</strong></p><p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><p><strong>（5）Reflect.ownKeys(obj)</strong></p><p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</p><p>以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。</p><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li></ul><h2 id="7-4-super-关键字"><a href="#7-4-super-关键字" class="headerlink" title="7.4 super 关键字"></a>7.4 super 关键字</h2><p><code>this</code>关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字<code>super</code>，指向当前对象的原型对象。</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> proto = &#123;  foo: <span class="hljs-string">&#x27;hello&#x27;</span>&#125;;<span class="hljs-keyword">const</span> obj = &#123;  foo: <span class="hljs-string">&#x27;world&#x27;</span>,  find() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.foo;  &#125;&#125;;<span class="hljs-built_in">Object</span>.setPrototypeOf(obj, proto);obj.find() <span class="hljs-comment">// &quot;hello&quot;</span></code></pre><p>上面代码中，对象<code>obj.find()</code>方法之中，通过<code>super.foo</code>引用了原型对象<code>proto</code>的<code>foo</code>属性。</p><p>注意，<code>super</code>关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。</p><h1 id="8-Set"><a href="#8-Set" class="headerlink" title="8. Set"></a>8. Set</h1><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set 本身是一个构造函数，用来生成 Set 数据结构。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>].forEach(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> s.add(x));<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s) &#123;  <span class="hljs-built_in">console</span>.log(i);&#125;<span class="hljs-comment">// 2 3 5 4</span></code></pre><p>上面代码通过<code>add()</code>方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。</p><p><code>Set</code>函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p><p>向 Set 加入值的时候，不会发生类型转换，所以<code>5</code>和<code>&quot;5&quot;</code>是两个不同的值。</p><p>Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（<code>===</code>），主要的区别是向 Set 加入值时认为<code>NaN</code>等于自身，而精确相等运算符认为<code>NaN</code>不等于自身。</p><h2 id="8-1-Set-实例的属性和方法"><a href="#8-1-Set-实例的属性和方法" class="headerlink" title="8.1 Set 实例的属性和方法"></a>8.1 Set 实例的属性和方法</h2><p>Set 结构的实例有以下属性。</p><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</li><li><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</li></ul><p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p><ul><li><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。</li><li><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li><li><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</li></ul><p>Set 结构的实例有四个遍历方法，可以用于遍历成员。</p><ul><li><code>Set.prototype.keys()</code>：返回键名的遍历器</li><li><code>Set.prototype.values()</code>：返回键值的遍历器</li><li><code>Set.prototype.entries()</code>：返回键值对的遍历器</li><li><code>Set.prototype.forEach()</code>：使用回调函数遍历每个成员</li></ul><p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。</p><p>首先，WeakSet 的成员只能是对象，而不能是其他类型的值。</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakSet</span>();ws.add(<span class="hljs-number">1</span>)<span class="hljs-comment">// TypeError: Invalid value used in weak set</span>ws.add(<span class="hljs-built_in">Symbol</span>())<span class="hljs-comment">// TypeError: invalid value used in weak set</span></code></pre><p>上面代码试图向 WeakSet 添加一个数值和<code>Symbol</code>值，结果报错，因为 WeakSet 只能放置对象。</p><p>其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><p>WeakSet 结构有以下三个方法。</p><ul><li>**WeakSet.prototype.add(value)**：向 WeakSet 实例添加一个新成员。</li><li>**WeakSet.prototype.delete(value)**：清除 WeakSet 实例的指定成员。</li><li>**WeakSet.prototype.has(value)**：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。</li></ul><p>WeakSet 没有<code>size</code>属性，没有办法遍历它的成员。</p><h1 id="9-Map"><a href="#9-Map" class="headerlink" title="9. Map"></a>9. Map</h1><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123;&#125;;<span class="hljs-keyword">const</span> element = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myDiv&#x27;</span>);data[element] = <span class="hljs-string">&#x27;metadata&#x27;</span>;data[<span class="hljs-string">&#x27;[object HTMLDivElement]&#x27;</span>] <span class="hljs-comment">// &quot;metadata&quot;</span></code></pre><p>上面代码原意是将一个 DOM 节点作为对象<code>data</code>的键，但是由于对象只接受字符串作为键名，所以<code>element</code>被自动转为字符串<code>[object HTMLDivElement]</code>。</p><p>为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><p><code>Map</code>构造函数接受数组作为参数，实际上执行的是下面的算法。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> items = [  [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>],  [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;Author&#x27;</span>]];<span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();items.forEach(  ([key, value]) =&gt; map.set(key, value));</code></pre><p>事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构（详见《Iterator》一章）都可以当作<code>Map</code>构造函数的参数。这就是说，<code>Set</code>和<code>Map</code>都可以用来生成新的 Map。</p><h2 id="9-1-Map-实例的属性和方法"><a href="#9-1-Map-实例的属性和方法" class="headerlink" title="9.1 Map 实例的属性和方法"></a>9.1 Map 实例的属性和方法</h2><p>Map 结构的实例有以下属性和操作方法。</p><ul><li><strong>size 属性</strong></li></ul><p><code>size</code>属性返回 Map 结构的成员总数。</p><ul><li><strong>Map.prototype.set(key, value)</strong></li></ul><p><code>set</code>方法设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键。</p><ul><li><strong>Map.prototype.get(key)</strong></li></ul><p><code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>。</p><ul><li><strong>Map.prototype.has(key)</strong></li></ul><p><code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p><ul><li><strong>Map.prototype.delete(key)</strong></li></ul><p><code>delete</code>方法删除某个键，返回<code>true</code>。如果删除失败，返回<code>false</code>。</p><ul><li><strong>Map.prototype.clear()</strong></li></ul><p><code>clear</code>方法清除所有成员，没有返回值。</p><p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p><ul><li><code>Map.prototype.keys()</code>：返回键名的遍历器。</li><li><code>Map.prototype.values()</code>：返回键值的遍历器。</li><li><code>Map.prototype.entries()</code>：返回所有成员的遍历器。</li><li><code>Map.prototype.forEach()</code>：遍历 Map 的所有成员。</li></ul><p>需要特别注意的是，Map 的遍历顺序就是插入顺序。</p><h1 id="10-Promise-对象"><a href="#10-Promise-对象" class="headerlink" title="10. Promise 对象"></a>10. Promise 对象</h1><p>Promise 是异步编程的一种解决方案。</p><p>Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。</p><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p><code>Promise</code>对象有以下两个特点。</p><p>（1）对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是<code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对<code>Promise</code>对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><p>有了<code>Promise</code>对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，<code>Promise</code>对象提供统一的接口，使得控制异步操作更加容易。</p><p><code>Promise</code>也有一些缺点。首先，无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反应到外部。第三，当处于<code>pending</code>状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> someAsyncThing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">flag</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;    <span class="hljs-keyword">if</span>(flag)&#123;        resolve(<span class="hljs-string">&#x27;ok&#x27;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        reject(<span class="hljs-string">&#x27;error&#x27;</span>)    &#125;  &#125;);&#125;;someAsyncThing(<span class="hljs-literal">true</span>).then(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;data:&#x27;</span>,data); <span class="hljs-comment">// 输出 &#x27;ok&#x27;</span>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error:&#x27;</span>, error); <span class="hljs-comment">// 不执行</span>&#125;)someAsyncThing(<span class="hljs-literal">false</span>).then(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;data:&#x27;</span>,data); <span class="hljs-comment">// 不执行</span>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error:&#x27;</span>, error); <span class="hljs-comment">// 输出 &#x27;error&#x27;</span>&#125;)</code></pre><p>上面代码中，someAsyncThing 函数成功返回 ‘OK’, 失败返回 ‘error’, 只有失败时才会被 catch 捕捉到。</p><h2 id="10-1-Promise-实例方法"><a href="#10-1-Promise-实例方法" class="headerlink" title="10.1 Promise 实例方法"></a>10.1 Promise 实例方法</h2><ul><li><strong>Promise.all()</strong> </li></ul><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.all([p1, p2, p3]);</code></pre><p><code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。</p><p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p><p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p><ul><li><strong>Promise.race()</strong> </li></ul><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.race([p1, p2, p3]);</code></pre><p>上面代码中，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给<code>p</code>的回调函数。</p><p><code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是 Promise 实例，就会先调用下面讲到的<code>Promise.resolve()</code>方法，将参数转为 Promise 实例，再进一步处理。</p><p>下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为<code>reject</code>，否则变为<code>resolve</code>。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.race([  fetch(<span class="hljs-string">&#x27;/resource-that-may-take-a-while&#x27;</span>),  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;request timeout&#x27;</span>)), <span class="hljs-number">5000</span>)  &#125;)]);p.then(<span class="hljs-built_in">console</span>.log).catch(<span class="hljs-built_in">console</span>.error);</code></pre><p>上面代码中，如果 5 秒之内<code>fetch</code>方法无法返回结果，变量<code>p</code>的状态就会变为<code>rejected</code>，从而触发<code>catch</code>方法指定的回调函数。</p><ul><li><strong>Promise.allSettled()</strong> ES2020 引入</li></ul><p><code>Promise.allSettled()</code>方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是<code>fulfilled</code>还是<code>rejected</code>，包装实例才会结束。</p><ul><li><strong>Promise.any()</strong> ES2021 引入</li></ul><p>ES2021 引入了<a href="https://github.com/tc39/proposal-promise-any"><code>Promise.any()</code>方法</a>。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。只要参数实例有一个变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；如果所有参数实例都变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态。</p><p><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是不会因为某个 Promise 变成<code>rejected</code>状态而结束。</p><h1 id="11-async-await"><a href="#11-async-await" class="headerlink" title="11. async / await"></a>11. async / await</h1><p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p><p>async 函数的使用方式，直接在普通函数前面加上 async，表示这是一个异步函数，在要异步执行的语句前面加上 await，表示后面的表达式需要等待。async 是 Generator 的语法糖</p><ol><li>async 函数内部 return 语句返回的值，会成为 then 方法回调函数的参数。</li><li>async 函数内部抛出错误，会导致返回的 Promise 对象变为 reject 状态。抛出的错误对象会被 catch 方法回调函数接收到。</li><li>async 函数返回的 Promise 对象，必须等到内部所有 await 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 return 语句或者抛出错误。也就是说，只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的回调函数。 </li></ol><p>可以用写同步的方式来写异步操作</p><h1 id="12-Class-语法"><a href="#12-Class-语法" class="headerlink" title="12. Class 语法"></a>12. Class 语法</h1><p>ES6 的类，完全可以看作构造函数的另一种写法。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;  <span class="hljs-comment">// ...</span>&#125;<span class="hljs-keyword">typeof</span> Point <span class="hljs-comment">// &quot;function&quot;</span>Point === Point.prototype.constructor <span class="hljs-comment">// true</span></code></pre><p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p><p>使用的时候，也是直接对类使用<code>new</code>命令，跟构造函数的用法完全一致</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> </span>&#123;  doStuff() &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;stuff&#x27;</span>);  &#125;&#125;<span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> Bar();b.doStuff() <span class="hljs-comment">// &quot;stuff&quot;</span></code></pre><p>构造函数的<code>prototype</code>属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;  <span class="hljs-keyword">constructor</span>() &#123;    <span class="hljs-comment">// ...</span>  &#125;  toString() &#123;    <span class="hljs-comment">// ...</span>  &#125;  toValue() &#123;    <span class="hljs-comment">// ...</span>  &#125;&#125;<span class="hljs-comment">// 等同于</span>Point.prototype = &#123;  <span class="hljs-keyword">constructor</span>() &#123;&#125;,  toString() &#123;&#125;,  toValue() &#123;&#125;,&#125;;</code></pre><p>在类的实例上面调用方法，其实就是调用原型上的方法。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;&#125;<span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> B();b.constructor === B.prototype.constructor <span class="hljs-comment">// true</span></code></pre><p>上面代码中，<code>b</code>是<code>B</code>类的实例，它的<code>constructor</code>方法就是<code>B</code>类原型的<code>constructor</code>方法。</p><p>由于类的方法都定义在<code>prototype</code>对象上面，所以类的新方法可以添加在<code>prototype</code>对象上面。<code>Object.assign</code>方法可以很方便地一次向类添加多个方法。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;  <span class="hljs-keyword">constructor</span>()&#123;    <span class="hljs-comment">// ...</span>  &#125;&#125;<span class="hljs-built_in">Object</span>.assign(Point.prototype, &#123;  toString()&#123;&#125;,  toValue()&#123;&#125;&#125;);</code></pre><p><code>prototype</code>对象的<code>constructor</code>属性，直接指向“类”的本身，这与 ES5 的行为是一致的。</p><pre><code class="hljs javascript">Point.prototype.constructor === Point <span class="hljs-comment">// true</span></code></pre><p>另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</p><p>注意：Class 内部默认采用严格模式</p><ul><li>取值函数（getter）和存值函数（setter）</li></ul><p>与 ES5 一样，在“类”的内部可以使用<code>get</code>和<code>set</code>关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;  <span class="hljs-keyword">constructor</span>() &#123;    <span class="hljs-comment">// ...</span>  &#125;  <span class="hljs-keyword">get</span> <span class="hljs-title">prop</span>() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;getter&#x27;</span>;  &#125;  <span class="hljs-keyword">set</span> <span class="hljs-title">prop</span>(<span class="hljs-params">value</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setter: &#x27;</span>+value);  &#125;&#125;<span class="hljs-keyword">let</span> inst = <span class="hljs-keyword">new</span> MyClass();inst.prop = <span class="hljs-number">123</span>;<span class="hljs-comment">// setter: 123</span>inst.prop<span class="hljs-comment">// &#x27;getter&#x27;</span></code></pre><p>上面代码中，<code>prop</code>属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。</p><h2 id="12-1-Class-继承"><a href="#12-1-Class-继承" class="headerlink" title="12.1 Class 继承"></a>12.1 Class 继承</h2><p>Class 可以通过<code>extends</code>关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColorPoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Point</span> </span>&#123;&#125;</code></pre><p>上面代码定义了一个<code>ColorPoint</code>类，该类通过<code>extends</code>关键字，继承了<code>Point</code>类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个<code>Point</code>类。下面，我们在<code>ColorPoint</code>内部加上代码。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColorPoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Point</span> </span>&#123;  <span class="hljs-keyword">constructor</span>(x, y, color) &#123;    <span class="hljs-built_in">super</span>(x, y); <span class="hljs-comment">// 调用父类的constructor(x, y)</span>    <span class="hljs-built_in">this</span>.color = color;  &#125;  toString() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.color + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">super</span>.toString(); <span class="hljs-comment">// 调用父类的toString()</span>  &#125;&#125;</code></pre><p>上面代码中，<code>constructor</code>方法和<code>toString</code>方法之中，都出现了<code>super</code>关键字，它在这里表示父类的构造函数，用来新建父类的<code>this</code>对象。</p><p>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类自己的<code>this</code>对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123; <span class="hljs-comment">/* ... */</span> &#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColorPoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Point</span> </span>&#123;  <span class="hljs-keyword">constructor</span>() &#123;  &#125;&#125;<span class="hljs-keyword">let</span> cp = <span class="hljs-keyword">new</span> ColorPoint(); <span class="hljs-comment">// ReferenceError</span></code></pre><p>上面代码中，<code>ColorPoint</code>继承了父类<code>Point</code>，但是它的构造函数没有调用<code>super</code>方法，导致新建实例时报错。</p><h1 id="13-Symbol"><a href="#13-Symbol" class="headerlink" title="13. Symbol"></a>13. Symbol</h1><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。</p><p>如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p><p>ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>();<span class="hljs-keyword">typeof</span> s<span class="hljs-comment">// &quot;symbol&quot;</span></code></pre><p>上面代码中，变量<code>s</code>就是一个独一无二的值。<code>typeof</code>运算符的结果，表明变量<code>s</code>是 Symbol 数据类型，而不是字符串之类的其他类型。</p><p>注意，<code>Symbol</code>函数前不能使用<code>new</code>命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。</p><p><code>Symbol</code>函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);s1 <span class="hljs-comment">// Symbol(foo)</span>s2 <span class="hljs-comment">// Symbol(bar)</span>s1.toString() <span class="hljs-comment">// &quot;Symbol(foo)&quot;</span>s2.toString() <span class="hljs-comment">// &quot;Symbol(bar)&quot;</span></code></pre><p>上面代码中，<code>s1</code>和<code>s2</code>是两个 Symbol 值。如果不加参数，它们在控制台的输出都是<code>Symbol()</code>，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。</p><p>如果 Symbol 的参数是一个对象，就会调用该对象的<code>toString</code>方法，将其转为字符串，然后才生成一个 Symbol 值。                                                                                                                         </p><p>注意，<code>Symbol</code>函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的<code>Symbol</code>函数的返回值是不相等的。</p><p>Symbol 值不能与其他类型的值进行运算，会报错。</p><p>但是，Symbol 值可以显式转为字符串。</p><p>另外，Symbol 值也可以转为布尔值，但是不能转为数值。</p><h2 id="13-1-作为属性名"><a href="#13-1-作为属性名" class="headerlink" title="13.1 作为属性名"></a>13.1 作为属性名</h2><p>由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-built_in">Symbol</span>();<span class="hljs-comment">// 第一种写法</span><span class="hljs-keyword">let</span> a = &#123;&#125;;a[mySymbol] = <span class="hljs-string">&#x27;Hello!&#x27;</span>;<span class="hljs-comment">// 第二种写法</span><span class="hljs-keyword">let</span> a = &#123;  [mySymbol]: <span class="hljs-string">&#x27;Hello!&#x27;</span>&#125;;<span class="hljs-comment">// 第三种写法</span><span class="hljs-keyword">let</span> a = &#123;&#125;;<span class="hljs-built_in">Object</span>.defineProperty(a, mySymbol, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello!&#x27;</span> &#125;);<span class="hljs-comment">// 以上写法都得到同样结果</span>a[mySymbol] <span class="hljs-comment">// &quot;Hello!&quot;</span></code></pre><p>上面代码通过方括号结构和<code>Object.defineProperty</code>，将对象的属性名指定为一个 Symbol 值。</p><p>注意，Symbol 值作为对象属性名时，不能用点运算符。因为点运算符后面总是字符串，所以不会读取<code>mySymbol</code>作为标识名所指代的那个值，导致<code>a</code>的属性名实际上是一个字符串，而不是一个 Symbol 值。</p><h2 id="13-2-属性名的遍历"><a href="#13-2-属性名的遍历" class="headerlink" title="13.2 属性名的遍历"></a>13.2 属性名的遍历</h2><p>Symbol 作为属性名，遍历对象的时候，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。</p><p>不会被以下遍历：</p><ul><li><code>for...in</code></li><li><code>for...of</code></li></ul><p>不会被以下返回：</p><ul><li><code>Object.keys()</code></li><li><code>Object.getOwnPropertyNames()</code></li><li><code>JSON.stringify()</code></li></ul><p>但是，它也不是私有属性，有一个<code>Object.getOwnPropertySymbols()</code>方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><h2 id="13-3-Symbol-for-Symbol-keyFor"><a href="#13-3-Symbol-for-Symbol-keyFor" class="headerlink" title="13.3 Symbol.for() Symbol.keyFor()"></a>13.3 Symbol.for() Symbol.keyFor()</h2><p>有时，我们希望重新使用同一个 Symbol 值，<code>Symbol.for()</code>方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;foo&#x27;</span>);<span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;foo&#x27;</span>);s1 === s2 <span class="hljs-comment">// true</span></code></pre><p>上面代码中，<code>s1</code>和<code>s2</code>都是 Symbol 值，但是它们都是由同样参数的<code>Symbol.for</code>方法生成的，所以实际上是同一个值。</p><h1 id="14-Module-语法"><a href="#14-Module-语法" class="headerlink" title="14. Module 语法"></a>14. Module 语法</h1><p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上<code>&quot;use strict&quot;;</code>。</p><h2 id="14-1-export"><a href="#14-1-export" class="headerlink" title="14.1 export"></a>14.1 export</h2><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。下面是一个 JS 文件，里面使用<code>export</code>命令输出变量。</p><pre><code class="hljs js"><span class="hljs-comment">// profile.js</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&#x27;Michael&#x27;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Jackson&#x27;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;</code></pre><p>上面代码是<code>profile.js</code>文件，保存了用户信息。ES6 将其视为一个模块，里面用<code>export</code>命令对外部输出了三个变量。</p><p>等价于：</p><pre><code class="hljs js"><span class="hljs-comment">// profile.js</span><span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&#x27;Michael&#x27;</span>;<span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Jackson&#x27;</span>;<span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<span class="hljs-keyword">export</span> &#123; firstName, lastName, year &#125;;</code></pre><p><code>export</code>命令除了输出变量，还可以输出函数或类（class）。</p><p>通常情况下，<code>export</code>输出的变量就是本来的名字，但是可以使用<code>as</code>关键字重命名。</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">v1</span>(<span class="hljs-params"></span>) </span>&#123; ... &#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">v2</span>(<span class="hljs-params"></span>) </span>&#123; ... &#125;<span class="hljs-keyword">export</span> &#123;  v1 <span class="hljs-keyword">as</span> streamV1,  v2 <span class="hljs-keyword">as</span> streamV2,  v2 <span class="hljs-keyword">as</span> streamLatestVersion&#125;;</code></pre><p>上面代码使用<code>as</code>关键字，重命名了函数<code>v1</code>和<code>v2</code>的对外接口。重命名后，<code>v2</code>可以用不同的名字输出两次。</p><p>需要特别注意的是，<code>export</code>命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p><p>同样的，<code>function</code>和<code>class</code>的输出，也必须遵守这样的写法。</p><h2 id="14-2-import"><a href="#14-2-import" class="headerlink" title="14.2 import"></a>14.2 import</h2><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><span class="hljs-keyword">import</span> &#123; firstName, lastName, year &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./profile.js&#x27;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params">element</span>) </span>&#123;  element.textContent = firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName;&#125;</code></pre><p>上面代码的<code>import</code>命令，用于加载<code>profile.js</code>文件，并从中输入变量。<code>import</code>命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（<code>profile.js</code>）对外接口的名称相同。</p><p><code>import</code>后面的<code>from</code>指定模块文件的位置，可以是相对路径，也可以是绝对路径。如果不带有路径，只是一个模块名，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。</p><p>注意，<code>import</code>命令具有提升效果，会提升到整个模块的头部，首先执行。</p><pre><code class="hljs javascript">foo();<span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;</code></pre><p>上面的代码不会报错，因为<code>import</code>的执行早于<code>foo</code>的调用。这种行为的本质是，<code>import</code>命令是编译阶段执行的，在代码运行之前。</p><p>由于<code>import</code>是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</p><p>最后，<code>import</code>语句会执行所加载的模块，因此可以有下面的写法。</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;</code></pre><p>上面代码仅仅执行<code>lodash</code>模块，但是不输入任何值。</p><h2 id="14-3-export-default"><a href="#14-3-export-default" class="headerlink" title="14.3 export default"></a>14.3 export default</h2><p>用到<code>export default</code>命令，为模块指定默认输出。</p><pre><code class="hljs javascript"><span class="hljs-comment">// export-default.js</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;foo&#x27;</span>);&#125;</code></pre><p>上面代码是一个模块文件<code>export-default.js</code>，它的默认输出是一个函数。</p><p>其他模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字。</p><pre><code class="hljs javascript"><span class="hljs-comment">// import-default.js</span><span class="hljs-keyword">import</span> customName <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./export-default&#x27;</span>;customName(); <span class="hljs-comment">// &#x27;foo&#x27;</span></code></pre><p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p><p><code>export default</code>命令用在非匿名函数前，也是可以的。</p><p>下面比较一下默认输出和正常输出。</p><pre><code class="hljs javascript"><span class="hljs-comment">// 第一组</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">crc32</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 输出</span>  <span class="hljs-comment">// ...</span>&#125;<span class="hljs-keyword">import</span> crc32 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;crc32&#x27;</span>; <span class="hljs-comment">// 输入</span><span class="hljs-comment">// 第二组</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">crc32</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 输出</span>  <span class="hljs-comment">// ...</span>&#125;;<span class="hljs-keyword">import</span> &#123;crc32&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;crc32&#x27;</span>; <span class="hljs-comment">// 输入</span></code></pre><p>上面代码的两组写法，第一组是使用<code>export default</code>时，对应的<code>import</code>语句不需要使用大括号；第二组是不使用<code>export default</code>时，对应的<code>import</code>语句需要使用大括号。</p><p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p><p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p><pre><code class="hljs javascript"><span class="hljs-comment">// modules.js</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;  <span class="hljs-keyword">return</span> x * y;&#125;<span class="hljs-keyword">export</span> &#123;add <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span>&#125;;<span class="hljs-comment">// 等同于</span><span class="hljs-comment">// export default add;</span><span class="hljs-comment">// app.js</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;modules&#x27;</span>;<span class="hljs-comment">// 等同于</span><span class="hljs-comment">// import foo from &#x27;modules&#x27;;</span></code></pre><p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p><pre><code class="hljs javascript"><span class="hljs-comment">// 正确</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<span class="hljs-comment">// 正确</span><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> a;<span class="hljs-comment">// 错误</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;</code></pre><p>上面代码中，<code>export default a</code>的含义是将变量<code>a</code>的值赋给变量<code>default</code>。所以，最后一种写法会报错。</p><p>同样地，因为<code>export default</code>命令的本质是将后面的值，赋给<code>default</code>变量，所以可以直接将一个值写在<code>export default</code>之后。</p><pre><code class="hljs javascript"><span class="hljs-comment">// 正确</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-number">42</span>;<span class="hljs-comment">// 报错</span><span class="hljs-keyword">export</span> <span class="hljs-number">42</span>;</code></pre><p>上面代码中，后一句报错是因为没有指定对外的接口，而前一句指定对外接口为<code>default</code>。</p><p>有了<code>export default</code>命令，输入模块时就非常直观了，以输入 lodash 模块为例。</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;</code></pre><p>如果想在一条<code>import</code>语句中，同时输入默认方法和其他接口，可以写成下面这样。</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> _, &#123; each, forEach &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;</code></pre><p>对应上面代码的<code>export</code>语句如下。</p><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;  <span class="hljs-comment">// ···</span>&#125;<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">each</span>(<span class="hljs-params">obj, iterator, context</span>) </span>&#123;  <span class="hljs-comment">// ···</span>&#125;<span class="hljs-keyword">export</span> &#123; each <span class="hljs-keyword">as</span> forEach &#125;;</code></pre><p>上面代码的最后一行的意思是，暴露出<code>forEach</code>接口，默认指向<code>each</code>接口，即<code>forEach</code>和<code>each</code>指向同一个方法。</p><p><code>export default</code>也可以用来输出类。</p><h1 id="15-Reflect"><a href="#15-Reflect" class="headerlink" title="15. Reflect"></a>15. Reflect</h1><p><code>Reflect</code>是一个内置的对象，它提供拦截 JavaScript 操作的方法。Reflect 不是一个函数对象，因此它是不可构造的。<code>Reflect</code>的所有的方法都是静态的就和<code>Math</code>一样，目前它还没有静态属性。</p><p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法相同。</p><p><code>Reflect</code> 一共有13个静态方法：</p><p>它可以分为一部分是是原来存在<code>Object</code>上的方法，将它转义到了<code>Reflect</code>上，并作了小改动，让方法更加合理。</p><ol><li><code>defineProperty</code> 与<a href="https://juejin.im/post/6844903788642484237#heading-1">Object.defineProperty</a>类似，但是当对象无法定义时<code>Object.defineProperty</code>会报错而<code>Reflect.defineProperty</code>不会，它会返回<code>false</code>，成功时返回<code>true</code>，如果不是对象还是会报错。</li><li><code>getPrototypeOf(target)</code> 与<code>Object.getPrototypeOf</code>一样，返回指定对象的原型。</li><li><code>setPrototypeOf(target, prototype)</code> 与<code>Object.setPrototypeOf</code>一样，它将指定对象的原型设置为另外一个对象。</li><li><code>getOwnPropertyDescriptor()</code> 与<code>Object.getOwnPropertyDescriptor</code>一样，如果在对象中存在，则返回给定的属性的<a href="https://juejin.im/post/6844903788642484237#heading-1">属性描述符</a>。</li><li><code>isExtensible(target)</code> 与<code>Object.isExtensible</code>类似，判断一个对象是否可扩展（是否可以在它上面添加新的属性），它们的不同点是，当参数不是对象时（原始值），<code>Object</code>的将它强制转变为一个对象，<code>Reflect</code>是直接报错。</li><li><code>preventExtensions(target)</code> 与<code>Object.preventExtensions</code>类似，阻止新属性添加到对象，不同点和上一条一样。</li><li><code>apply(func, thisArg, args)</code> 与<code>Function.prototype.apply.call(fn, obj, args)</code>一样。</li><li><code>ownKeys(target)</code> 与<code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code>一样，返回一个包含所有自身属性（不包含继承属性）的数组</li></ol><p>另一部分是将原来操作符的功能，变成函数行为。</p><ol><li><code>has(target, key)</code> 与<code>in</code>操作符一样，让判断操作都变成函数行为。</li><li><code>deleteProperty(target, key)</code> 与<code>delete</code>操作符一样，让删除操作变成函数行为，返回布尔值代表成功或失败。</li><li><code>construct(target, argumentsList[, newTarget])</code> 与<code>new</code>操作符一样，<code>target</code>构造函数，第二参数是构造函数参数类数组，第三个是<a href="https://juejin.im/post/6844903788642484237#heading-4">new.target</a>的值。</li><li><code>get(target, key[, receiver])</code> 与<code>obj[key]</code>一样，第三个参数是当要取值的<code>key</code>部署了<code>getter</code>时，访问其函数的<code>this</code>绑定为<code>receiver</code>对象。</li><li><code>set(target, key, value[, receiver])</code> 设置<code>target</code>对象的<code>key</code>属性等于<code>value</code>，第三个参数和<code>set</code>一样。返回一个布尔值。</li></ol><pre><code class="hljs js"><span class="hljs-comment">// 老写法</span><span class="hljs-string">&#x27;assign&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// true</span><span class="hljs-comment">// 新写法</span><span class="hljs-built_in">Reflect</span>.has(<span class="hljs-built_in">Object</span>, <span class="hljs-string">&#x27;assign&#x27;</span>) <span class="hljs-comment">// true</span><span class="hljs-comment">// 老写法</span><span class="hljs-built_in">Function</span>.prototype.apply.call(<span class="hljs-built_in">Math</span>.floor, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">1.75</span>]) <span class="hljs-comment">// 1</span><span class="hljs-comment">// 新写法</span><span class="hljs-built_in">Reflect</span>.apply(<span class="hljs-built_in">Math</span>.floor, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">1.75</span>]) <span class="hljs-comment">// 1</span><span class="hljs-comment">// 旧写法</span><span class="hljs-keyword">delete</span> myObj.foo;<span class="hljs-comment">// 新写法</span><span class="hljs-built_in">Reflect</span>.deleteProperty(myObj, <span class="hljs-string">&#x27;foo&#x27;</span>);<span class="hljs-comment">// new 的写法</span><span class="hljs-keyword">const</span> instance = <span class="hljs-keyword">new</span> Greeting(<span class="hljs-string">&#x27;张三&#x27;</span>);<span class="hljs-comment">// Reflect.construct 的写法</span><span class="hljs-keyword">const</span> instance = <span class="hljs-built_in">Reflect</span>.construct(Greeting, [<span class="hljs-string">&#x27;张三&#x27;</span>]);<span class="hljs-comment">// 旧写法</span><span class="hljs-built_in">Object</span>.defineProperty(MyDate, <span class="hljs-string">&#x27;now&#x27;</span>, &#123;  value: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">Date</span>.now()&#125;);<span class="hljs-comment">// 新写法</span><span class="hljs-built_in">Reflect</span>.defineProperty(MyDate, <span class="hljs-string">&#x27;now&#x27;</span>, &#123;  value: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">Date</span>.now()&#125;);<span class="hljs-built_in">Reflect</span>.get(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;foo&#x27;</span>) <span class="hljs-comment">// 报错</span><span class="hljs-built_in">Reflect</span>.get(<span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;foo&#x27;</span>) <span class="hljs-comment">// 报错</span><span class="hljs-built_in">Reflect</span>.set(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, &#123;&#125;) <span class="hljs-comment">// 报错</span><span class="hljs-built_in">Reflect</span>.set(<span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, &#123;&#125;) <span class="hljs-comment">// 报错</span><span class="hljs-comment">// ---------------</span><span class="hljs-keyword">var</span> myObject = &#123;  foo: <span class="hljs-number">1</span>,  bar: <span class="hljs-number">2</span>,  <span class="hljs-keyword">get</span> <span class="hljs-title">baz</span>() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.foo + <span class="hljs-built_in">this</span>.bar;  &#125;,&#125;;<span class="hljs-keyword">var</span> myReceiverObject = &#123;  foo: <span class="hljs-number">4</span>,  bar: <span class="hljs-number">4</span>,&#125;;<span class="hljs-built_in">Reflect</span>.get(myObject, <span class="hljs-string">&#x27;baz&#x27;</span>, myReceiverObject) <span class="hljs-comment">// 8</span></code></pre><h1 id="16-Proxy"><a href="#16-Proxy" class="headerlink" title="16. Proxy"></a>16. Proxy</h1><blockquote><p>ES6 Proxy 提供了强大的 Javascript 元编程接口</p></blockquote><p><strong>Proxy</strong> 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等），等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</p><p><strong>Proxy</strong> 就像在目标对象之间的一个代理，任何对目标的操作都要经过代理。代理就可以对外界的操作进行过滤和改写。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler)</code></pre><p><code>Proxy</code>是构造函数，它有两个参数<code>target</code>和<code>handler</code>，</p><p><code>target</code>是用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p><p><code>handler</code>是一个对象，其属性是当执行一个操作时定义代理的行为的函数。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(&#123;&#125;, &#123;  get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, key, receiver</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`getting <span class="hljs-subst">$&#123;key&#125;</span>!`</span>);    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, key, receiver);  &#125;,  set: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, key, value, receiver</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`setting <span class="hljs-subst">$&#123;key&#125;</span>!`</span>);    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, key, value, receiver);  &#125;&#125;);obj.count = <span class="hljs-number">1</span><span class="hljs-comment">//  setting count!</span>++obj.count<span class="hljs-comment">//  getting count!</span><span class="hljs-comment">//  setting count!</span><span class="hljs-comment">//  2</span></code></pre><p><code>Proxy</code>只有一个静态方法<code>revocable(target, handler)</code>可以用来创建一个可撤销的代理对象。两个参数和构造函数的相同。它返回一个包含了所生成的代理对象本身以及该代理对象的撤销方法的对象。</p><p>一旦某个代理对象被撤销，它将变的几乎完全不可用，在它身上执行任何的可代理操作都会抛出 TypeError 异常（注意，可代理操作一共有 14 种，执行这 14 种操作以外的操作不会抛出异常）。</p><p>一旦被撤销，这个代理对象永远不可能恢复到原来的状态，同时和它关联的目标对象以及处理器对象将有可能被垃圾回收掉。调用撤销方法多次将不会有任何效果，当然，也不会报错。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> revocable = <span class="hljs-built_in">Proxy</span>.revocable(&#123;&#125;, &#123;  get(target, name) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[[&quot;</span> + name + <span class="hljs-string">&quot;]]&quot;</span>;  &#125;&#125;);<span class="hljs-comment">// revocable -&gt; &#123;&quot;proxy&quot;: proxy, &quot;revoke&quot;: revoke&#125;</span><span class="hljs-keyword">var</span> proxy = revocable.proxy;proxy.foo;              <span class="hljs-comment">// &quot;[[foo]]&quot;</span>revocable.revoke();     <span class="hljs-comment">// 执行撤销方法</span>proxy.foo;              <span class="hljs-comment">// TypeError</span>proxy.foo = <span class="hljs-number">1</span>           <span class="hljs-comment">// 同样 TypeError</span><span class="hljs-keyword">delete</span> proxy.foo;       <span class="hljs-comment">// 还是 TypeError</span><span class="hljs-keyword">typeof</span> proxy            <span class="hljs-comment">// &quot;object&quot;，因为 typeof 不属于可代理操作</span></code></pre><p><code>handler</code>参数是代理函数对象，它一共支持 13 种拦截函数。和<code>Reflect</code>的相同。如果没有定义某种操作，那么这种操作会被转发到目标对象身上。</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(&#123;&#125;, &#123;  get: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, property, receiver</span>) </span>&#123;    <span class="hljs-keyword">return</span> receiver;    <span class="hljs-comment">// receiver 总是指向原始的读操作所在的那个对象，一般情况下就是 Proxy 实例。</span>  &#125;&#125;);proxy.getReceiver === proxy <span class="hljs-comment">// true</span></code></pre><p>如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则通过 Proxy 对象访问该属性会报错。</p><ol><li><p><code>apply</code>方法拦截函数的<code>调用</code>、<code>call</code>和<code>apply</code>操作。</p></li><li><p><code>defineProperty</code>方法拦截了<code>Object.defineProperty</code>操作。</p></li><li><p><code>getPrototypeOf</code>方法主要用来拦截获取对象原型，会以下这些操作：</p><ol><li><code>Object.prototype.__proto__</code></li><li><code>Object.prototype.isPrototypeOf()</code></li><li><code>Object.getPrototypeOf()</code></li><li><code>Reflect.getPrototypeOf()</code></li><li><code>instanceof</code></li></ol></li><li><p><code>ownKeys</code>方法用来拦截对象自身属性的读取操作，会拦截以下操作：</p><ol><li><code>Object.getOwnPropertyNames()</code></li><li><code>Object.getOwnPropertySymbols()</code></li><li><code>Object.keys()</code></li><li><code>for...in</code></li></ol></li></ol><h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><p>虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。</p><p>主要原因就是在 Proxy 代理的情况下，目标对象内部的<code>this</code>关键字会指向 Proxy 代理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ECMAScript6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端性能优化</title>
    <link href="/2020/10/27/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2020/10/27/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h1><ol><li><p>减少 HTTP 请求</p><ol><li>使用防抖、节流</li></ol></li><li><p>使用 HTTP2</p></li><li><p>使用服务端渲染</p><p>客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。</p><p>服务端渲染：服务端返回 HTML 文件，客户端只需解析 HTML。</p><ul><li>优点：首屏渲染快，SEO 好。</li><li>缺点：配置麻烦，增加了服务器的计算压力。、</li></ul></li><li><p>静态资源使用 CDN</p></li><li><p>将 CSS 放在文件头部，JavaScript 文件放在底部</p></li><li><p>使用字体图标 iconfont 代替图片图标、</p></li><li><p>善用缓存，不重复加载相同的资源</p></li><li><p>压缩文件</p><p>压缩文件可以减少文件下载时间，让用户体验性更好。</p><p>在 webpack 可以使用如下插件进行压缩：</p><ul><li>JavaScript：UglifyPlugin</li><li>CSS ：MiniCssExtractPlugin</li><li>HTML：HtmlWebpackPlugin</li></ul><p>服务器开启 gzip 压缩。</p></li><li><p>图片优化</p><ol><li>图片延迟加载（懒加载）</li><li>响应式图片，不同屏幕加载不同大小的图片</li><li>调整图片大小，先展示缩略图，等待用户点击再加载大图</li><li>降低图片质量（压缩图片）</li><li>使用 CSS3 效果代替图片</li><li>使用 webp 格式图片</li></ol></li><li><p>通过 webpack 按需加载代码，提取第三库代码，减少 ES6 转为 ES5 的冗余代码</p></li><li><p>减少重绘重排</p></li><li><p>使用事件委托</p></li><li><p>注意程序的局部性</p></li><li><p>if-else 对比 switch</p><p>当判断条件数量越来越多时，越倾向于使用 switch 而不是 if-else。</p></li><li><p>降低 CSS 选择器的复杂性</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML&amp;CSS</title>
    <link href="/2020/10/18/HTML&amp;CSS/"/>
    <url>/2020/10/18/HTML&amp;CSS/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML&amp;CSS"></a>HTML&amp;CSS</h1><blockquote><p>HTML &amp; CSS 知识点</p></blockquote><h1 id="HTML-元素标签语义化"><a href="#HTML-元素标签语义化" class="headerlink" title="HTML 元素标签语义化"></a>HTML 元素标签语义化</h1><h3 id="一、标签语义化是什么？"><a href="#一、标签语义化是什么？" class="headerlink" title="一、标签语义化是什么？"></a>一、标签语义化是什么？</h3><p>标签语义化就是让元素标签做适当的事情。例如 <code>p</code> 标签就是代表文本，<code>button</code> 标签代表按钮，<code>nav</code> 标签代表导航等等。</p><h3 id="二、为什么要标签语义化？"><a href="#二、为什么要标签语义化？" class="headerlink" title="二、为什么要标签语义化？"></a>二、为什么要标签语义化？</h3><p>其实标签语义化是给浏览器和搜索引擎看的。</p><h4 id="为什么浏览器关心？"><a href="#为什么浏览器关心？" class="headerlink" title="为什么浏览器关心？"></a>为什么浏览器关心？</h4><p>DOM 的大部分内容具有隐式语义含义。 也就是说，DOM 采用的原生 HTML 元素能够被浏览器识别，并且可以预测其在各类平台上的工作方式。</p><p>例如用 <code>div</code> 实现的按钮和用原生 <code>button</code> 实现的按钮就有一些区别，在表单内 <code>button</code> 可以不用绑定 onclick 事件就可以提交表单内容，用 <code>div</code> 实现的按钮则不行。另外在浏览器中按 tab 键盘可以在 <code>button</code> 之间来回切换，而 <code>div</code> 则不可以。</p><p>还有 <code>input</code> 标签 type 属性，由于值的不同在手机上的表现也不同。例如 type=”tel” 和 type=”number” 弹出来的数字键盘是不一样的。</p><h4 id="为什么搜索引擎关心？"><a href="#为什么搜索引擎关心？" class="headerlink" title="为什么搜索引擎关心？"></a>为什么搜索引擎关心？</h4><p>搜索引擎的爬虫根据标签来确定上下文、关键字的权重，有利于 SEO。</p><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>当对一个文档进行布局（lay out）的时候，浏览器的渲染引擎会根据标准之一的 <strong>CSS 基础框盒模型</strong>（<strong>CSS basic box model</strong>），将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…）。</p><p>每个盒子由四个部分（或称<em>区域</em>）组成，其效用由它们各自的边界（Edge）所定义</p><p>每个盒子有四个边界：<em>内容边界</em> <em>Content edge</em>、<em>内边距边界</em> <em>Padding Edge</em>、<em>边框边界</em> <em>Border Edge</em>、<em>外边框边界</em> <em>Margin Edge</em>。</p><p>一个盒子中主要的属性就5个：width、height、padding、border、margin。</p><ul><li>width和height：<strong>内容</strong>的宽度、高度（不是盒子的宽度、高度）。</li><li>padding：内边距。</li><li>border：边框。</li><li>margin：外边距。</li></ul><p>盒子模型有两种：</p><ul><li><p>W3C 标准盒子模型</p></li><li><p>IE 盒子模型</p></li></ul><p>CSS盒模型和IE盒模型的区别：</p><p>在 <strong>标准盒子模型</strong>中，<strong>width 和 height 指的是内容区域</strong>的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p><p>在<strong>IE盒子模型</strong>中，<strong>width 和 height 指的是 内容区域 + border + padding</strong> 的宽度和高度。</p><p>通过 CSS3 新添加属性 <code>box-sizing</code> 可以更改盒子模型标准</p><h1 id="BFC-块格式化上下文"><a href="#BFC-块格式化上下文" class="headerlink" title="BFC 块格式化上下文"></a>BFC 块格式化上下文</h1><p>块格式化上下文 (Block Formatting Context，BFC) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>块格式化上下文对浮动定位与清除浮动都很重要。浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠也只会发生在属于同一BFC的块级元素之间。</p><p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong></p><p>触发 BFC形成条件（任意一条）：</p><ul><li><code>&lt;html&gt;</code> 根元素</li><li><code>float</code> 值不为 <code>none</code></li><li><code>overflow</code> 值为<code>auto</code>,<code>scroll</code>,<code>hidden</code> 不是<code>visible</code></li><li><code>display</code> 的值为 <code>table-cell</code>, <code>table-caption</code>,<code>inline-block</code>,<code>flex</code>,或者<code>inline-flex</code>中任何一个              </li><li><code>position</code> 的值不为 <code>static</code> 和 <code>relative</code></li></ul><p>BFC 特性</p><ul><li>内部的盒子会在垂直方向上一个接一个的放置</li><li>对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。**(外边距塌陷)**</li><li>每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此</li><li>BFC的区域不会与float的元素区域重叠，BFC 可以阻止元素被浮动元素覆盖</li><li>计算BFC的高度时，浮动子元素也参与计算</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li></ul><p><strong>外边距塌陷：</strong></p><blockquote><p>同一个 BFC 下外边距会发生折叠</p></blockquote><p>有三种情况会形成外边距重叠：</p><ul><li><p>同一层相邻元素之间相邻的两个元素之间的外边距重叠，除非后一个元素加上。</p></li><li><p>没有内容将父元素和后代元素分开</p></li><li><p>空的块级元素</p></li></ul><p>BFC 可以包含浮动的元素 用于<strong>清除浮动</strong></p><h1 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h1><ol><li><p>给外部盒子也添加浮动 （BFC 可以包含浮动的元素 用于<strong>清除浮动</strong>）<br>缺点：可读性差，不易于维护（别人很难理解为什么要给父元素也添上float），而且可能需要调整整个页面布局。</p></li><li><p>在外部盒子内最下方添上带clear属性的空盒子</p><p>可以是div也可以是其它块级元素，把 <code>&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code>放在盒内底部，用最下面的空盒子清除浮动，把盒子重新撑起来。<br>缺点：引入了冗余元素</p></li><li><p>用<code>overflow:hidden </code>清除浮动 (计算BFC的高度时，浮动子元素也参与计算)<br>给外部盒子添上这个属性<br>缺点：有可能造成溢出元素不可见，影响展示效果。</p></li><li><p>用伪元素清除浮动<br>给外部盒子的 after 伪元素设置 clear 属性，再隐藏它<br>这其实是对空盒子方案的改进，一种纯 CSS 的解决方案，不用引入冗余元素。</p><pre><code class="hljs css"><span class="hljs-comment">/*清除浮动*/</span><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::before</span>,<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-attribute">display</span>: table;&#125;<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;    <span class="hljs-attribute">clear</span>: both;&#125;</code></pre><p>这也是 bootstrap 框架采用的清除浮动的方法。</p></li><li><p>定高法    </p><p>给每个盒子规定 width 和 height，要多大给多大即可。但是这样的布局不是内容自适应的，如果页面内容极少发生变动，这也是一个不错的方案，因为它的兼容性是毋庸置疑的。</p></li></ol><h1 id="HTML5-新添加特性简单说明"><a href="#HTML5-新添加特性简单说明" class="headerlink" title="HTML5 新添加特性简单说明"></a>HTML5 新添加特性简单说明</h1><p>新增加语义化更好的标签元素</p><ol><li>结构元素：article、aside、header、hgroup、footer、figure、section、nav</li><li>其他元素：video、audio、canvas、embed、mark、progress、meter、time、command、details、datagrid、keygen、output、source、menu、ruby、wbr、bdi、dialog、</li></ol><p>废除了：纯表现元素、部分浏览器支持的元素和对可用性产生负面影响的元素</p><blockquote><p>纯表现元素：basefont、big、center、font、s、strike、tt、u 用css代替<br>部分浏览器支持的元素：applet、bgsound、blink、marquee<br>对可用性产生负面影响的元素：frameset、frame、noframes,在html5中不支持frame框架，只支持iframe框架</p></blockquote><p>新增的API：</p><p>Canvas：首先获取canvas元素的上下文对象，然后使用该上下文对象中的绘图功能进行绘制。</p><p>SVG：SVG是html5的另一项图形功能，是一种标准的矢量图形，是一种文件格式，有自己的API。</p><p>音频和视频：2大好处,一是作为浏览器原生支持的功能，新的audio和video元素无需安装；二是媒体元素向web页面提供了通用、集成和可脚本化控制的API。</p><p>Geolocation：可以请求用户共享他们的位置。位置信息来源IP地址、三维坐标、GPS、从RFID、Wifi和蓝牙到Wifi的MAC地址、GSM或CDMA手机的ID、用户自定义数据</p><p>XMLHttpRequest Level2：改进了跨源XMLHttpRequest和进度事件，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。</p><p>WebSockets：要连接远程主机，只需新建一个WebSocket实例，提供希望连接的对端URL。</p><p>Forms：新表单元素tel、email、url、search、range、number 未来的表单元素color、datetime、datetime-local、time、date、week、month</p><p>新表单特性和函数：placeholder、autocomplete、autofocus、spellcheck、list特性、datalist元素、min和max、step、required</p><p>拖放API：draggable属性、拖放事件(dragstart、drag、dragenter、dragleave、dragover、drap、dragend)、dataTransfer对象</p><p>Web Workers API：Web Workers可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。</p><p>Web Storage API：sessionStorage(保存在session中，浏览器关闭，数据消失)、localStorage(保存在客户端本地，除非手动删除，否则一直保存)</p><h1 id="CSS3-新添加的属性简单说明"><a href="#CSS3-新添加的属性简单说明" class="headerlink" title="CSS3 新添加的属性简单说明"></a>CSS3 新添加的属性简单说明</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><blockquote><p>新增加了一些选择器</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">element1</span>~<span class="hljs-selector-tag">element2</span>: <span class="hljs-comment">/*选择前面有element1元素的每个element2元素。*/</span><span class="hljs-selector-attr">[attribute^=value]</span>:<span class="hljs-comment">/*选择某元素attribute属性是以value开头的。*/</span><span class="hljs-selector-attr">[attribute$=value]</span>:<span class="hljs-comment">/*选择某元素attribute属性是以value结尾的。*/</span><span class="hljs-selector-attr">[attribute*=value]</span>:<span class="hljs-comment">/*选择某元素attribute属性包含value字符串的。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:first-of-type</span>: <span class="hljs-comment">/*选择属于其父元素的首个E元素的每个E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:last-of-type</span>: <span class="hljs-comment">/*选择属于其父元素的最后E元素的每个E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:only-of-type</span>: <span class="hljs-comment">/*选择属于其父元素唯一的E元素的每个E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:only-child</span>: <span class="hljs-comment">/*选择属于其父元素的唯一子元素的每个E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:nth-child(n)</span>: <span class="hljs-comment">/*选择属于其父元素的第n个子元素的每个E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:nth-last-child(n)</span>: <span class="hljs-comment">/*选择属于其父元素的倒数第n个子元素的每个E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:nth-of-type(n)</span>: <span class="hljs-comment">/*选择属于其父元素第n个E元素的每个E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:nth-last-of-type(n)</span>: <span class="hljs-comment">/*选择属于其父元素倒数第n个E元素的每个E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:last-child</span>: <span class="hljs-comment">/*选择属于其父元素最后一个子元素每个E元素。*/</span><span class="hljs-selector-pseudo">:root</span>: <span class="hljs-comment">/*选择文档的根元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:empty</span>: <span class="hljs-comment">/*选择没有子元素的每个E元素（包括文本节点)。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:target</span>: <span class="hljs-comment">/*选择当前活动的E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:enabled</span>: <span class="hljs-comment">/*选择每个启用的E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:disabled</span>: <span class="hljs-comment">/*选择每个禁用的E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:checked</span>: <span class="hljs-comment">/*选择每个被选中的E元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">:not(selector)</span>: <span class="hljs-comment">/*选择非selector元素的每个元素。*/</span><span class="hljs-selector-tag">E</span><span class="hljs-selector-pseudo">::selection</span>: <span class="hljs-comment">/*选择被用户选取的元素部分。*/</span></code></pre><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><blockquote><p>CSS <code>transform</code> 属性允许你旋转，缩放，倾斜或平移给定元素。这是通过修改CSS视觉格式化模型的坐标空间来实现的。</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">transform</span><span class="hljs-selector-pseudo">:matrix</span> <span class="hljs-selector-tag">translate</span> <span class="hljs-selector-tag">scale</span> <span class="hljs-selector-tag">rotate</span> <span class="hljs-selector-tag">skew</span> <span class="hljs-selector-tag">perspective</span>；<span class="hljs-selector-tag">transform-style</span>: <span class="hljs-selector-tag">preserve-3d</span>;<span class="hljs-comment">/*真3d效果*/</span><span class="hljs-selector-tag">transform-orign</span><span class="hljs-comment">/*转换发生位置*/</span></code></pre><h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><blockquote><p>过渡需要出发、动画可以自己启动</p></blockquote><pre><code class="hljs css"><span class="hljs-comment">/*过渡*/</span><span class="hljs-selector-tag">transition</span><span class="hljs-comment">/*配合转换使用，形成动画效果*/</span><span class="hljs-comment">/*动画*/</span><span class="hljs-selector-tag">animation</span><span class="hljs-keyword">@keyfram</span> 动画名&#123;&#125;</code></pre><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><pre><code class="hljs css"><span class="hljs-selector-tag">border-radius</span><span class="hljs-comment">/*可以创建圆角边框*/</span><span class="hljs-selector-tag">box-shadow</span><span class="hljs-comment">/*可以为元素添加阴影*/</span><span class="hljs-selector-tag">border-image</span><span class="hljs-comment">/*可以使用图片来绘制边框*/</span></code></pre><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><pre><code class="hljs css"><span class="hljs-selector-tag">background-clip</span><span class="hljs-comment">/*确定背景画区*/</span><span class="hljs-selector-tag">background-origin</span><span class="hljs-comment">/*确定背景的位置，它通常与background-position联合使用*/</span><span class="hljs-selector-tag">background-size</span><span class="hljs-comment">/*调整背景图片的大小，等比例缩放，移动Web开发常常用的*/</span><span class="hljs-selector-tag">background-break</span><span class="hljs-comment">/*控制背景怎样在这些不同的盒子中显示*/</span></code></pre><h2 id="背景可以添加渐变属性"><a href="#背景可以添加渐变属性" class="headerlink" title="背景可以添加渐变属性"></a>背景可以添加渐变属性</h2><pre><code class="hljs css"><span class="hljs-comment">/*渐变*/</span><span class="hljs-selector-tag">linear-gradient</span><span class="hljs-comment">/*线性渐变*/</span><span class="hljs-selector-tag">radial-gradient</span><span class="hljs-comment">/*径向渐变*/</span></code></pre><h2 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h2><pre><code class="hljs css"><span class="hljs-comment">/*自动内减*/</span><span class="hljs-comment">/*content-box: padding和border不被包含在定义的width和height之内。*/</span><span class="hljs-selector-tag">box-sizing</span><span class="hljs-selector-pseudo">:content-box</span>;<span class="hljs-comment">/*border-box: padding和border被包含在定义的width和height之内。*/</span></code></pre><h1 id="CSS-优先级计算规则"><a href="#CSS-优先级计算规则" class="headerlink" title="CSS 优先级计算规则"></a>CSS 优先级计算规则</h1><p>优先级就是分配给指定的 CSS 声明的一个权重，它由 匹配的选择器中的 每一种选择器类型的 数值 决定。</p><p>而当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上。</p><p>当同一个元素有多个声明的时候，优先级才会有意义。因为每一个直接作用于元素的 CSS 规则总是会接管/覆盖（take over）该元素从祖先元素继承而来的规则。</p><p>用一个简单的公式来说明一下 CSS 选择器的优先级：</p><p>!important (正无穷) &gt; 内联样式(1000) &gt; #id(100) &gt; .class(10)、属性(10)、伪类(10) &gt; tag(1)、伪元素(1) &gt; *(0)、相邻选择器、子代选择器</p><p>权重值计算:</p><table><thead><tr><th>选择器</th><th>案例</th><th>权重值</th></tr></thead><tbody><tr><td>!important</td><td>!important</td><td>Infinity</td></tr><tr><td>内联样式</td><td>style=”..”</td><td>1000</td></tr><tr><td>ID</td><td>#id</td><td>100</td></tr><tr><td>class</td><td>.class</td><td>10</td></tr><tr><td>属性</td><td>[type=’text’]</td><td>10</td></tr><tr><td>伪类</td><td>:hover</td><td>10</td></tr><tr><td>标签</td><td>p</td><td>1</td></tr><tr><td>伪元素</td><td>::first-line</td><td>1</td></tr><tr><td>相邻选择器、子代选择器、通配符</td><td>* &gt; +</td><td>0</td></tr></tbody></table><p>比较规则:</p><ul><li>1000&gt;100。也就是说从左往右逐个等级比较，前一等级相等才往后比。</li><li>在权重相同的情况下，后面的样式会覆盖掉前面的样式。</li><li>继承属性没有权重值</li><li>通配符、子选择器、相邻选择器等的。虽然权值为0，但是也比继承的样式优先。</li><li>ie6以上才支持<code>important</code>，并且尽量少用它。</li></ul><h2 id="important-说明"><a href="#important-说明" class="headerlink" title="!important 说明"></a>!important 说明</h2><p>使用 <code>!important</code> 是一个<strong>坏习惯</strong>，应该尽量避免，因为这破坏了样式表中的固有的级联规则 使得调试找 bug 变得更加困难了。当两条相互冲突的带有 <code>!important</code> 规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用。</p><p><strong>一些经验法则：</strong></p><ul><li><p><strong>一定</strong>要优先考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></p></li><li><p><strong>只有</strong>在需要覆盖全站或外部 CSS 的特定页面中使用 <code>!important</code></p></li><li><p><strong>永远不要</strong>在你的插件中使用 <code>!important</code></p></li><li><p><strong>永远不要</strong>在全站范围的 CSS 代码中使用 <code>!important</code></p></li><li><p><strong>与其使用</strong> <code>!important</code>，<strong>你可以：</strong></p></li></ul><ol><li>更好地利用 CSS 级联属性</li><li>使用更具体的规则。在您选择的元素之前，增加一个或多个其他元素，使选择器变得更加具体，并获得更高的优先级。</li></ol><h1 id="CSS-弹性盒子布局"><a href="#CSS-弹性盒子布局" class="headerlink" title="CSS 弹性盒子布局"></a>CSS 弹性盒子布局</h1><blockquote><p><strong>CSS 弹性盒子布局</strong>是 CSS 的模块之一，定义了一种针对用户界面设计而优化的 CSS 盒子模型。</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<span class="hljs-attribute">display</span>: flex;&#125;</code></pre><h2 id="弹性盒子布局主要属性"><a href="#弹性盒子布局主要属性" class="headerlink" title="弹性盒子布局主要属性"></a>弹性盒子布局主要属性</h2><p>容器属性：</p><ol><li>flex-direction 属性决定主轴的方向（即项目的排列方向）。</li><li>flex-wrap 属性定义，如果一条轴线排不下，如何换行。</li><li>flex-flow 属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li><li>justify-content 属性定义了项目在主轴上（即相当于X轴）的对齐方式。</li><li>align-items 属性定义项目在交叉轴上（即Y轴上）如何对齐。</li><li>align-content 属性定义了多根轴线的对齐方式。</li></ol><p>项目属性：</p><ol><li>order 属性定义项目的排列顺序</li><li>flex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li><li>flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li><li>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。</li><li>flex 属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。</li><li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。</li></ol><h2 id="CSS-属性-flex"><a href="#CSS-属性-flex" class="headerlink" title="CSS 属性 - flex"></a>CSS 属性 - flex</h2><p><code>flex</code> 属性简写详解：</p><p>此属性是以下 CSS 属性的简写：</p><ul><li><code>flex-grow</code> 增长系数</li><li><code>flex-shrink</code> 元素的收缩规则</li><li><code>flex-basis</code> 初始大小</li></ul><p>CSS属性 <strong><code>flex-grow</code></strong> 设置了一个flex项主尺寸的 flex 增长系数。它指定了 flex 容器中剩余空间的多少应该分配给项目（flex增长系数）。</p><p>CSS属性 <strong><code>flex-shrink</code></strong> 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。</p><p>CSS属性 属性 <strong><code>flex-basis</code></strong> 指定了 flex 元素在主轴方向上的初始大小。如果不使用  <code>box-sizing</code>改变盒模型的话，那么这个属性就决定了 flex 元素的内容盒（content-box）的尺寸。</p><p>语法：</p><p>可以使用一个，两个或三个值来指定 <code>flex</code>属性。</p><p><strong>单值语法</strong>: 值必须为以下其中之一:</p><ul><li>一个无单位<strong>数<code>(&lt;number&gt;)</code></strong>: 它会被当作<code>&lt;flex-grow&gt;的值。</code></li><li>一个有效的<strong>宽度(<code>width</code>)值</strong>: 它会被当作 <code>&lt;flex-basis&gt;的值。</code></li><li>关键字<code>none</code>，<code>auto</code>或<code>initial</code>.</li></ul><p><strong>双值语法</strong>: 第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。第二个值必须为以下之一：</p><ul><li>一个无单位数：它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li><li>一个有效的宽度值: 它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li></ul><p><strong>三值语法:</strong></p><ul><li>第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。</li><li>第二个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li><li>第三个值必须为一个有效的宽度值， 并且它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li></ul><p>大多数情况下，开发者需要将 <code>flex</code> 设置为以下值之一： <code>auto</code>，<code>initial</code>，<code>none</code>，或一个无单位正数。</p><pre><code class="hljs css"><span class="hljs-comment">/* 关键字值 */</span><span class="hljs-selector-tag">flex</span>: <span class="hljs-selector-tag">auto</span>;<span class="hljs-selector-tag">flex</span>: <span class="hljs-selector-tag">initial</span>;<span class="hljs-selector-tag">flex</span>: <span class="hljs-selector-tag">none</span>;<span class="hljs-comment">/* 一个值, 无单位数字: flex-grow */</span><span class="hljs-selector-tag">flex</span>: 2;<span class="hljs-comment">/* 一个值, width/height: flex-basis */</span><span class="hljs-selector-tag">flex</span>: 10<span class="hljs-selector-tag">em</span>;<span class="hljs-selector-tag">flex</span>: 30<span class="hljs-selector-tag">px</span>;<span class="hljs-selector-tag">flex</span>: <span class="hljs-selector-tag">min-content</span>;<span class="hljs-comment">/* 两个值: flex-grow | flex-basis */</span><span class="hljs-selector-tag">flex</span>: 1 30<span class="hljs-selector-tag">px</span>;<span class="hljs-comment">/* 两个值: flex-grow | flex-shrink */</span><span class="hljs-selector-tag">flex</span>: 2 2;<span class="hljs-comment">/* 三个值: flex-grow | flex-shrink | flex-basis */</span><span class="hljs-selector-tag">flex</span>: 2 2 10%;<span class="hljs-comment">/*全局属性值 */</span><span class="hljs-selector-tag">flex</span>: <span class="hljs-selector-tag">inherit</span>;<span class="hljs-selector-tag">flex</span>: <span class="hljs-selector-tag">initial</span>;<span class="hljs-selector-tag">flex</span>: <span class="hljs-selector-tag">unset</span>;</code></pre><h1 id="CSS-属性"><a href="#CSS-属性" class="headerlink" title="CSS 属性"></a>CSS 属性</h1><h2 id="object-fit"><a href="#object-fit" class="headerlink" title="object-fit"></a>object-fit</h2><p><strong><code>object-fit</code></strong> CSS 属性指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框。</p><p>您可以通过使用 <code>object-position</code> 属性来切换被替换元素的内容对象在元素框内的对齐方式。</p><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><ul><li><p><code>contain</code></p><p>被替换的内容将被缩放，以在填充元素的内容框时保持其宽高比。 整个对象在填充盒子的同时保留其长宽比，因此如果宽高比与框的宽高比不匹配，该对象将被添加“<a href="https://zh.wikipedia.org/wiki/%E9%BB%91%E9%82%8A">黑边</a>”。</p></li><li><p><code>cover</code></p><p>被替换的内容在保持其宽高比的同时填充元素的整个内容框。如果对象的宽高比与内容框不相匹配，该对象将被剪裁以适应内容框。</p></li><li><p><code>fill</code></p><p>被替换的内容正好填充元素的内容框。整个对象将完全填充此框。如果对象的宽高比与内容框不相匹配，那么该对象将被拉伸以适应内容框。</p></li><li><p><code>none</code></p><p>被替换的内容将保持其原有的尺寸。</p></li><li><p><code>scale-down</code></p><p>内容的尺寸与 <code>none</code> 或 <code>contain</code> 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。</p></li></ul><h2 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a>word-break</h2><p>CSS 属性 <code>word-break</code> 指定了怎样在单词内断行。</p><p><strong>语法：</strong></p><pre><code class="hljs css"><span class="hljs-comment">/* Keyword values */</span><span class="hljs-selector-tag">word-break</span>: <span class="hljs-selector-tag">normal</span>; <span class="hljs-selector-tag">word-break</span>: <span class="hljs-selector-tag">break-all</span>; <span class="hljs-selector-tag">word-break</span>: <span class="hljs-selector-tag">keep-all</span>;<span class="hljs-selector-tag">word-break</span>: <span class="hljs-selector-tag">break-word</span>; <span class="hljs-comment">/* deprecated */</span><span class="hljs-comment">/* Global values */</span><span class="hljs-selector-tag">word-break</span>: <span class="hljs-selector-tag">inherit</span>;<span class="hljs-selector-tag">word-break</span>: <span class="hljs-selector-tag">initial</span>;<span class="hljs-selector-tag">word-break</span>: <span class="hljs-selector-tag">unset</span>;</code></pre><p><strong>值:</strong></p><ul><li><p><code>normal</code> 使用默认的断行规则。</p></li><li><p><code>break-all</code> 对于non-CJK (CJK 指中文/日文/韩文) 文本，可在任意字符间断行。</p></li><li><p><code>keep-all</code> CJK 文本不断行。 Non-CJK 文本表现同 <code>normal</code>。</p></li><li><p><code>break-word</code> 他的效果是<code>word-break: normal</code> 和 <code>overflow-wrap: anywhere</code> 的合，不论 <code>overflow-wrap</code>的值是多少。</p></li></ul><h2 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h2><p>CSS 属性<code>white-space</code> 是用来设置如何处理元素中的空白。</p><p>语法：</p><pre><code class="hljs css"><span class="hljs-comment">/* Keyword values */</span><span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">normal</span>;<span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">nowrap</span>;<span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">pre</span>;<span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">pre-wrap</span>;<span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">pre-line</span>;<span class="hljs-comment">/* https://github.com/w3c/csswg-drafts/pull/2841 */</span><span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">break-spaces</span>;<span class="hljs-comment">/* Global values */</span><span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">inherit</span>;<span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">initial</span>;<span class="hljs-selector-tag">white-space</span>: <span class="hljs-selector-tag">unset</span>;</code></pre><p><strong>值:</strong></p><ul><li><p><code>normal</code></p><p>连续的空白符会被合并，换行符会被当作空白符来处理。换行在填充「行框盒子」时是必要。</p></li><li><p><code>nowrap</code></p><p>和 normal 一样，连续的空白符会被合并。但文本内的换行无效。</p></li><li><p><code>pre</code></p><p>连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素时才会换行。 </p></li><li><p><code>pre-wrap</code></p><p>连续的空白符会被保留。在遇到换行符或者<code>&lt;br&gt;</code>元素，或者需要为了填充「行框盒子」时才会换行。</p></li><li><p><code>pre-line</code></p><p>连续的空白符会被合并。在遇到换行符或者<code>&lt;br&gt;</code>元素，或者需要为了填充「行框盒子」时会换行。</p></li><li><p><code>break-spaces</code>与 <code>pre-wrap</code>的行为相同，除了：</p><ul><li>任何保留的空白序列总是占用空间，包括在行尾。</li><li>每个保留的空格字符后都存在换行机会，包括空格字符之间。</li><li>这样保留的空间占用空间而不会挂起，从而影响盒子的固有尺寸（最小内容大小和最大内容大小）。</li></ul></li></ul><p>对于展示文章可以结合使用</p><pre><code class="hljs css"><span class="hljs-selector-class">.article</span>&#123;  <span class="hljs-comment">/*连续的空白符会被保留。在遇到换行符或者&lt;br&gt;元素，或者需要为了填充「行框盒子(line boxes)」时才会换行。*/</span><span class="hljs-attribute">white-space</span>: pre-wrap;<span class="hljs-comment">/*对于non-CJK (CJK 指中文/日文/韩文) 文本，可在任意字符间断行。*/</span><span class="hljs-attribute">word-break</span>: break-all;&#125;</code></pre><h1 id="页面导入样式时，使用link和-import有什么区别？"><a href="#页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="页面导入样式时，使用link和@import有什么区别？"></a>页面导入样式时，使用link和@import有什么区别？</h1><ul><li>区别1：<code>link</code> 是 <strong>XHTML 标签</strong>，除了加载 <strong>CSS</strong> 外，还可以定义 <strong>RSS</strong> 等其他事务；<code>@import </code>属于 <strong>CSS</strong> 范畴，只能加载 <strong>CSS</strong>。</li><li>区别2：<code>link</code> 引用 <strong>CSS</strong> 时，在页面载入时同时加载；<code>@import</code>需要页面网页完全载入以后加载。<br>所以会出现一开始没有 <strong>CSS</strong> 样式，闪烁一下出现样式后的页面(网速慢的情况下)</li><li>区别3：<code>link</code> 是XHTML标签，无兼容问题；<code>@import </code>是在 <strong>CSS2.1</strong> 提出的，低版本的浏览器不支持。</li><li>区别4：<code>link</code> 支持使用 <strong>Javascript</strong> 控制 <strong>DOM</strong> 去改变样式；而<code>@import</code>不支持。</li></ul><h1 id="CSS-实现垂直水平居中"><a href="#CSS-实现垂直水平居中" class="headerlink" title="CSS 实现垂直水平居中"></a>CSS 实现垂直水平居中</h1><blockquote><p>不定宽高的盒子水平居中</p></blockquote><h2 id="使用-flex-布局"><a href="#使用-flex-布局" class="headerlink" title="使用 flex 布局"></a>使用 flex 布局</h2><pre><code class="hljs css"><span class="hljs-comment">/*1.使用flex布局*/</span><span class="hljs-comment">/*1.1方案*/</span><span class="hljs-comment">/*设置父盒子：*/</span><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:flex</span>;<span class="hljs-selector-tag">justify-content</span><span class="hljs-selector-pseudo">:center</span>;<span class="hljs-selector-tag">align-item</span><span class="hljs-selector-pseudo">:center</span>;<span class="hljs-comment">/*侧轴只有单个元素*/</span><span class="hljs-comment">/*1.2方案（单个元素）*/</span><span class="hljs-comment">/*设置父盒子：*/</span><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:flex</span>;<span class="hljs-comment">/*设置要居中的DIV：*/</span><span class="hljs-selector-tag">margin</span><span class="hljs-selector-pseudo">:auto</span>;</code></pre><h2 id="使用绝对定位配合-transform"><a href="#使用绝对定位配合-transform" class="headerlink" title="使用绝对定位配合 transform"></a>使用绝对定位配合 transform</h2><pre><code class="hljs css"><span class="hljs-comment">/*2.使用CSS3 transform*/</span><span class="hljs-comment">/*设置父盒子：*/</span><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:relative</span>;<span class="hljs-comment">/*设置要居中的DIV：*/</span><span class="hljs-selector-tag">transform</span><span class="hljs-selector-pseudo">:translate(-50</span>%,<span class="hljs-selector-tag">-50</span>%);<span class="hljs-selector-tag">top</span><span class="hljs-selector-pseudo">:50</span>%;<span class="hljs-selector-tag">left50</span>%;<span class="hljs-selector-tag">position</span><span class="hljs-selector-pseudo">:absolute</span>;</code></pre><h2 id="使用表格布局"><a href="#使用表格布局" class="headerlink" title="使用表格布局"></a>使用表格布局</h2><pre><code class="hljs css"><span class="hljs-comment">/*3.使用display:table-cell方法(拓展)*/</span><span class="hljs-comment">/*设置父盒子：*/</span><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:table-cell</span>;<span class="hljs-selector-tag">text-align</span><span class="hljs-selector-pseudo">:center</span>;<span class="hljs-selector-tag">vertical-align</span><span class="hljs-selector-pseudo">:middle</span>;<span class="hljs-comment">/*设置要居中的DIV：*/</span><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:inline-block</span>;<span class="hljs-selector-tag">vertical-align</span><span class="hljs-selector-pseudo">:middle</span>;</code></pre><h2 id="使用-grid-布局"><a href="#使用-grid-布局" class="headerlink" title="使用 grid 布局"></a>使用 grid 布局</h2><pre><code class="hljs css"><span class="hljs-comment">/*4.grid布局 (最新浏览器支持,只支持IE10及以上，兼容性不如flex优先使用flex)*/</span><span class="hljs-comment">/*设置父盒子：*/</span><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">grid</span>;<span class="hljs-selector-tag">align-items</span><span class="hljs-selector-pseudo">:center</span>;<span class="hljs-selector-tag">justify-content</span>: <span class="hljs-selector-tag">center</span>;</code></pre><h1 id="简述一下-src-与-href-的区别"><a href="#简述一下-src-与-href-的区别" class="headerlink" title="简述一下 src 与 href 的区别"></a>简述一下 src 与 href 的区别</h1><p><code>href</code> 是指向「网络资源」所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p><p><code>src</code>   是指向「外部资源」的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求 <code>src</code> 资源时会将其指向的资源下载并应用到文档内，例如 js脚本，img图片 和 frame等元素。</p><p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将 js脚本放在底部而不是头部。</p><h1 id="px-和-em-的区别"><a href="#px-和-em-的区别" class="headerlink" title="px 和 em 的区别"></a>px 和 em 的区别</h1><p>相同点：px 和 em 都是长度单位；</p><p>异同点：px 的值是固定的，指定是多少就是多少，计算比较容易。em 的值不是固定的，并且 em 会继承父级元素的字体大小。</p><p>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。</p><p>px 是 CSS中的逻辑像素，和移动端的物理像素之间会有一个比值dpr。</p><p>px 是固定的值,无论页面放大或者缩小都不会改变。<br>em 是指相对于父元素的大小如果父元素的字体为 12px，那么子元素 1em 就是 24px。由于是相对父级的倍数，所以多层嵌套时，倍数关系的计算会很头痛。</p><p>rem 中的 r 就是 root，也就是相对于 root元素(html标签) 的字体大小的倍数。如果不做任何修改，浏览器默认字体大小为 16px。</p><p>默认情况下： 1 em = 10 px 、1 rem = 16 px</p><h1 id="什么叫优雅降级和渐进增强？"><a href="#什么叫优雅降级和渐进增强？" class="headerlink" title="什么叫优雅降级和渐进增强？"></a>什么叫优雅降级和渐进增强？</h1><p><strong>渐进增强</strong> progressive enhancement：</p><p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p><strong>优雅降级</strong> graceful degradation：</p><p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><p><strong>区别</strong>：</p><ol><li><p>优雅降级是从复杂的现状开始，并试图减少用户体验的供给</p></li><li><p>渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要</p></li><li><p>降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</p></li></ol><h1 id="CSS的优先级是如何计算的？"><a href="#CSS的优先级是如何计算的？" class="headerlink" title="CSS的优先级是如何计算的？"></a>CSS的优先级是如何计算的？</h1><p>!important (正无穷) &gt; 内联样式(1000) &gt; #id(100) &gt; .class(10)、属性(10)、伪类(10) &gt; tag(1)、伪元素(1) &gt; *(0)、相邻选择器、子代选择器</p><h2 id="权重值计算"><a href="#权重值计算" class="headerlink" title="权重值计算"></a>权重值计算</h2><table><thead><tr><th>选择器</th><th>案例</th><th>权重值</th></tr></thead><tbody><tr><td>!important</td><td>!important</td><td>Infinity</td></tr><tr><td>内联样式</td><td>style=”..”</td><td>1000</td></tr><tr><td>ID</td><td>#id</td><td>100</td></tr><tr><td>class</td><td>.class</td><td>10</td></tr><tr><td>属性</td><td>[type=’text’]</td><td>10</td></tr><tr><td>伪类</td><td>:hover</td><td>10</td></tr><tr><td>标签</td><td>p</td><td>1</td></tr><tr><td>伪元素</td><td>::first-line</td><td>1</td></tr><tr><td>相邻选择器、子代选择器、通配符</td><td>* &gt; +</td><td>0</td></tr></tbody></table><h2 id="比较规则"><a href="#比较规则" class="headerlink" title="比较规则"></a>比较规则</h2><ul><li>1000&gt;100。也就是说从左往右逐个等级比较，前一等级相等才往后比。</li><li>在权重相同的情况下，后面的样式会覆盖掉前面的样式。</li><li>继承属性没有权重值</li><li>通配符、子选择器、相邻选择器等的。虽然权值为0，但是也比继承的样式优先。</li><li>ie6以上才支持<code>important</code>，并且尽量少用它。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HTML&amp;CSS</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 的运行机制</title>
    <link href="/2020/09/28/JavaScript%20%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/09/28/JavaScript%20%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-的运行机制"><a href="#JavaScript-的运行机制" class="headerlink" title="JavaScript 的运行机制"></a>JavaScript 的运行机制</h1><h2 id="事件循环-Event-Loop"><a href="#事件循环-Event-Loop" class="headerlink" title="事件循环 Event Loop"></a>事件循环 Event Loop</h2><p>JavaScript 脚本加载完成时, JS 引擎会去预解析JS代码, 为代码中的「对象」预先在堆内存中分配地址空间, 然后按</p><p>顺序逐句解释执行( 即时编译 JIT)</p><p>第一次JS代码执行时, 会默认创建一个「全局执行上下文」, 并将其压入「执行栈」底,  然后每当引擎遇到一个函数</p><p>调用时, 都将会为其创建一个<strong>新</strong>的「函数执行上下文」, 并将其压入执行栈<strong>顶.</strong> 引擎会执行那些执行上下文位于<strong>栈顶</strong></p><p>的函数。当该函数执行结束时，「执行上下文」从栈中弹出，控制流程到达当前栈中的下一个上下文。</p><p>每一个 JavaScript 程序都有且只有一个默认的「全局执行上下文」, 在浏览器环境中它指向 <code>Window</code></p><p><img src="/images/exceute_stack.jpg" alt="exceute_stack"></p><blockquote><p>macro-task(宏任务)：包括整体代码script（同步宏任务），setTimeout、setInterval（异步宏任务）</p><p>micro-task(微任务)：Promise，process.nextTick，ajax请求（异步微任务）</p></blockquote><p>当引擎在创建函数「执行上下文」之前, 会判断当前函数是 <strong>同步任务</strong>还是 <strong>异步任务</strong>, 如果是 <strong>同步任务</strong>,  就进入主</p><p>线程创建「函数执行上下文」并且压入 <strong>执行栈顶</strong>等待执行, 如果是 <strong>异步任务</strong> , 则不 进入主线程执行 ,  不创建函数 </p><p> 执行上下文  , 而是被<code>Event Table</code> 所记录, 当 <strong>异步任务</strong>准备好时, 为其注册回调用函数, 进入事件队列<code>Event </code></p><p><code>Quene</code>等待执行</p><p>当执行栈执行完毕时, 调用 事件队列 <code>Event Quene</code> 中的回调函数进栈执行, 在<strong>异步任务</strong>被 <code>Event Table</code> 所记录之</p><p>前, 会判断是 「宏任务」 还是 「微任务」 , 分别被 宏任务 Event Table 和 微任务Event Table 记录, 最后再注册回</p><p>调函数, 并进入相应的「宏任务事件队列 」和 「微任务事件队列」</p><blockquote><p>注意「宏任务」和「微任务」并不是严格意义上的 “平级关系”</p></blockquote><p>在主线程调取「任务队列」的 回调函数进入「执行栈」执行时, 优先调用「微任务事件队列」执行完毕 再调用 </p><p>「宏任务事件队列」 以上步骤循环,就是 「JavaScript」 的 <strong>事件循环</strong></p><p>talk is cheap show your code, 用代码解释:</p><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>);<span class="hljs-comment">// 记作 set1</span><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span>);    <span class="hljs-comment">// set4</span>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3&#x27;</span>);    &#125;);    <span class="hljs-comment">// pro2</span>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4&#x27;</span>);        resolve();    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5&#x27;</span>);    &#125;);&#125;);<span class="hljs-comment">// 记作 pro1</span><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;6&#x27;</span>);    resolve();&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;7&#x27;</span>);    <span class="hljs-comment">// set3</span>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;8&#x27;</span>);    &#125;);&#125;);<span class="hljs-comment">// 记作 set2</span><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;9&#x27;</span>);    <span class="hljs-comment">// 记作 pro3</span>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;10&#x27;</span>);        resolve();    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;11&#x27;</span>);    &#125;);&#125;);</code></pre><ol><li><p>整体代码 script 为一个大的宏任务,进入执行栈执行, 顺序执行 <code>打印1</code> </p></li><li><p>遇到定时器set1为异步的宏任务不进入主线程执行,注册进入宏任务队列 <code>(set1)</code> </p></li><li><p>继续执行遇到 Promise pro1 先执行其中的同步代码  <code>打印6</code>  , pro1中的<code>then()</code>为异步的微任务不进入主线程执行, 注册进入微任务队列 <code>(pro1)</code>,</p></li><li><p>继续执行遇到定时器 set2 为异步的宏任务不进入主线程执行, 注册进入宏任务队列 <code>(set1 set2)</code>,</p></li><li><p>此时执行栈空,检测任务队列是否有任务等待执行,优先执行微任务 <code>(pro1)</code></p></li><li><p>执行微任务队列 <code>(pro1)</code> pro1的 then()  <code>打印7</code>  </p><ol><li>继续执行遇到定时器set3 不进入主线程执行,注册进入宏任务队列 <code>(set1 set2 set3)</code></li></ol></li><li><p>微任务队列空, 执行宏任务队列 <code>(set1 set2 set3)</code> set1  <code>打印2</code>  ,</p><ol><li>遇到定时器set4为异步的宏任务不进入主线程执行,注册进入宏任务队列 <code>(set2 set3 set4)</code> </li><li>遇到 Promise pro2 先执行其中的同步任务,并且为其then 注册微任务队列 <code>(pro2)</code></li></ol></li><li><p>执行栈继续调用任务队列回调函数执行, 此时微任务队列 (pro2)不为空, pro2 的<code>then()</code>优先执行<code>打印5</code> </p></li><li><p>执行微任务完毕, 继续执行宏任务队列<code>(set2 set3 set4)</code> set2  <code>打印9</code> </p><ol><li>遇到 pro3 同样先执行其中同步代码<code>打印10</code>再为其then 注册微任务队列 <code>(pro3)</code></li></ol></li><li><p>执行栈继续调用任务队列回调函数执行, 优先执行微任务队列<code>(pro3)</code>  pro3的 then() <code>打印11</code>  ,</p></li><li><p>微任务队列空, 执行宏任务队列<code>(set3 set4)</code>set3 <code>打印8</code>  执行set4  <code>打印3</code></p></li></ol><pre><code class="hljs js"><span class="hljs-comment">//打印顺序:1 6 7 2 5 9 10 11 8 3</span></code></pre><p>以上就是JS中的 「事件循环」Event Loop</p><p>执行顺序为 同步(宏)任务-&gt;异步微任务-&gt;异步宏任务-&gt;…</p><h3 id="微任务-microtask"><a href="#微任务-microtask" class="headerlink" title="微任务(microtask)"></a>微任务(microtask)</h3><p>ES6新引入了Promise标准，同时浏览器实现上多了一个<code>microtask</code>微任务概念，在ECMAScript中，<code>microtask</code>也被称为<code>jobs</code></p><p>我们已经知道<code>宏任务</code>结束后，会执行渲染，然后执行下一个<code>宏任务</code>， 而微任务可以理解成在当前<code>宏任务</code>执行后立即执行的任务</p><p>当一个<code>宏任务</code>执行完，会在渲染前，将执行期间所产生的所有<code>微任务</code>都执行完</p><pre><code class="hljs clean">宏任务 -&gt; 微任务 -&gt; GUI渲染 -&gt; 宏任务 -&gt; ...</code></pre><p>图解:</p><p><img src="/images/js_eventloop.jpg" alt="js_eventloop"></p><h1 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h1><p>当 JavaScript 脚本加载完成, 第一次被JavaScript 引擎所读取时, 会默认创建一个「全局执行上下文」, 并将其压入执行栈底, 然后每当引擎遇到一个函数调用, 它都会为该函数创建一个新的「函数执行上下文」并压入栈的顶部。</p><p>引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。</p><p>每一个 JavaScript 程序都有且只有一个默认的「全局执行上下文」, 在浏览器环境中它指向 <code>Window</code></p><p>下面是一段模拟执行栈顺序</p><p>代码:</p><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;Hello World!&#x27;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">first</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Inside first function&#x27;</span>);  second();  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Again inside first function&#x27;</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">second</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Inside second function&#x27;</span>);&#125;first();<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Inside Global Execution Context&#x27;</span>);</code></pre><p>打印台:</p><pre><code class="hljs js"><span class="hljs-comment">//Inside first function</span><span class="hljs-comment">//Inside second function</span><span class="hljs-comment">//Again inside first function</span><span class="hljs-comment">//Inside Global Execution Context</span></code></pre><p>图解执行栈:</p><p><img src="/images/exceute_stack.jpg" alt="exceute_stack"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
